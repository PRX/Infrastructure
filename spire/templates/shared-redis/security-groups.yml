# stacks/shared-redis/security-groups.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates security groups for the shared Redis cluster and for the clients that
  connect to the cluster. They are created in this stack to prevent circular
  dependencies.

Parameters:
  EnvironmentType: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  NestedChangeSetScrubbingResourcesState: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }

Conditions:
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  # The Redis cluster belongs to this security group. It allows traffic from
  # the client security group.
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Shared ${EnvironmentType} Redis cluster security group
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared_redis-cluster" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      VpcId: !Ref VpcId
  ClusterSecurityGroupClientIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Sub >-
        Allows inbound traffic from Redis client resources
      FromPort: 6379
      GroupId: !GetAtt ClusterSecurityGroup.GroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt ClientSecurityGroup.GroupId
      ToPort: 6379

  # Resources that need access to the Redis cluster (clients) belong to this
  # security group. It allows traffic to the cluster security group.
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Shared ${EnvironmentType} Redis client security group
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared_redis-client" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      VpcId: !Ref VpcId
  ClientSecurityGroupClusterEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: >-
        Allow traffic to the shared Redis cluster security group
      DestinationSecurityGroupId: !GetAtt ClusterSecurityGroup.GroupId
      FromPort: 6379
      GroupId: !GetAtt ClientSecurityGroup.GroupId
      IpProtocol: tcp
      ToPort: 6379

Outputs:
  ClusterSecurityGroupId:
    Value: !GetAtt ClusterSecurityGroup.GroupId
  ClientSecurityGroupId:
    Value: !GetAtt ClientSecurityGroup.GroupId
