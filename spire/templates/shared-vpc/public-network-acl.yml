# stacks/shared-vpc/public-network-acl.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates a Network ACL and rules for subnets of the public subnets in the
  shared VPC.

Parameters:
  EnvironmentType: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  NestedChangeSetScrubbingResourcesState: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  VpcCidrBlock: { Type: String }
  VpcIpv6CidrBlocks: { Type: CommaDelimitedList }

Conditions:
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared_public" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  # INGRESS 60
  # Allows inbound traffic on ephemeral and dynamic ports, such as for traffic
  # to ECS tasks with dynamic port mapping, load balancer traffic, and return
  # traffic for requests made from instances within the VPC.
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
  InboudIpV4TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 60
  InboudIpV6TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 61

  # TODO Figure out which other port ranges we're using, even if they overlap
  # with rule 60
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports

  # INGRESS 220
  # Allows inbound user traffic for standard HTTPS web requests from all IPs
  # (e.g., internet traffic intended for one of our apps that goes through an
  # ALB on a public subnet).
  InboundIpV4HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 220
  InboundIpV6HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 221

  # INGRESS 230
  # Allows inbound user traffic for insecure HTTP web requests from all IPs
  # (e.g., internet traffic intended for one of our apps that goes through an
  # ALB on a public subnet).
  InboundIpV4HttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 230
  InboundIpV6HttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 231

  # INGRESS 300
  # Allow return path TCP traffic from all IPs on the ephemeral port range used
  # by Amazon Linux. This is response traffic for request that originate from
  # Amazon Linux instances in the VPC (e.g, a program running on one of our
  # EC2 instances makes an HTTPS (443) request to Big Query, and the response
  # is sent back on ephemeral port 50129). This is required if we have Amazon
  # Linux instances making requests to the internet.
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
  InboudIpV4TcpAmazonLinuxEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 300
  InboudIpV6TcpAmazonLinuxEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 301

  # INGRESS 450
  # Allows inbound FTP traffic from all IPs
  InboundIpV4FtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 21
        To: 21
      Protocol: 6 # TPC
      RuleAction: allow
      RuleNumber: 450
  InboundIpV6FtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 21
        To: 21
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 451

  # INGRESS 530
  # Allows inbound echo reply ICMP traffic, mainly to allow PING traffic back
  # from pings originating from within the VPC
  InboundIpV4IcmpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      Icmp:
        Code: -1
        Type: 0 # Echo reply
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: 1 # ICMP
      RuleAction: allow
      RuleNumber: 530
  InboundIpV6IcmpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Icmp:
        Code: -1
        Type: 0 # Echo reply
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: 1 # ICMP
      RuleAction: allow
      RuleNumber: 531

  # INGRESS 550
  # Allows inbound NTP traffic from all IPs
  InboundIpV4NtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 550
  InboundIpV6NtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 551

  # INGRESS 570
  # Allows inbound SSH traffic from all IPs
  # TODO Maybe update this
  InboundIpV4SshNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TPC
      RuleAction: allow
      RuleNumber: 570
  InboundIpV6SshNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 571

  ##############################################################################
  ##############################################################################
  ##############################################################################

  # EGRESS 80
  # Allows outbound TCP traffic on a wide range of ephemeral ports. This allows
  # for the return path of external client requests being made through a
  # load balancer in the VPC (e.g., an HTTPS request from a user to one of our
  # web apps). This must cover all ports that any end-user device that we want
  # to support may choose as its ephemeral port.
  # - Some of the ports in this range may be denied by other rules.
  # https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-nacl
  OutboudIpV4TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 80
  OutboudIpV6TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 81

  # TODO Figure out which other port ranges we're using, even if they overlap
  # with rule 80
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports

  # EGRESS 200
  # Allows outbound MySQL and Aurora traffic to IPs within the VPC (e.g., an
  # application on one of our EC2 instances connecting to its Aurora database
  # in the same VPC)
  OutboundIpV4MysqlNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 3306
        To: 3306
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 200
  OutboundIpV6MysqlNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 3306
        To: 3306
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 201

  # EGRESS 210
  # Allows outbound PostgreSQL traffic to IPs within the VPC (e.g., an
  # application on one of our EC2 instances connecting to its PostgreSQL
  # database in the same VPC)
  OutboundIpV4PostgresqlNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 5432
        To: 5432
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 210
  OutboundIpV6PostgresqlNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 5432
        To: 5432
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 211

  # EGRESS 220
  # Allows outbound Redis traffic to IPs within the VPC (e.g., an application
  # on one of our EC2 instances connecting to a Redis cluster in the same VPC)
  OutboundIpV4RedisNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 6379
        To: 6379
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 220
  OutboundIpV6RedisNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 6379
        To: 6379
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 221

  # EGRESS 230
  # Allows outbound memcached traffic to IPs within the VPC (e.g., an
  # application on one of our EC2 instances connecting to a memcached instances
  # in the same VPC)
  OutboundIpV4MemcachedNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 11211
        To: 11211
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 230
  OutboundIpV6MemcachedNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 11211
        To: 11211
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 231

  # EGRESS 240
  # Allows outbound Elasticsearch traffic to IPs within the VPC (e.g., an
  # application on one of our EC2 instances connecting to an Elasticsearch
  # domian in the same VPC)
  OutboundIpV4ElasticsearchNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 9200
        To: 9200
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 240
  OutboundIpV6ElasticsearchNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 9200
        To: 9200
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 241

  # EGRESS 250
  # Allows outbound Sphinx traffic to IPs within the VPC (e.g., an
  # application on one of our EC2 instances connecting to an Sphinx server in
  # the same VPC)
  OutboundIpV4SphinxNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 9312
        To: 9312
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 250
  OutboundIpV6SphinxNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 9312
        To: 9312
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 251

  # EGRESS 260
  # Allows outbound Solr traffic to IPs within the VPC (e.g., an
  # application on one of our EC2 instances connecting to an Solr server in
  # the same VPC)
  OutboundIpV4SolrNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 8983
        To: 8983
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 260
  OutboundIpV6SolrNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 8983
        To: 8983
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 261

  # EGRESS 300
  # Allows outbound HTTPS web requests originating from hosts within the VPC
  # to all IPs (e.g., a program on one of our EC2 instances making an HTTPS
  # request)
  OutboundIpV4HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 300
  OutboundIpV6HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 301

  # EGRESS 320
  # Allows outbound insecure HTTP web requests originating from hosts within
  # the VPC to all IPs (e.g., a program on one of our EC2 instances making an
  # HTTP request)
  OutboundIpV4HttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 320
  OutboundIpV6HttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 321

  # EGRESS 400
  # Allows outbound SMTP traffic to all IPs (e.g., sending an email to a user
  # from an application running on one of our EC2 instances)
  OutboundIpV4SmtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 587
        To: 587
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 400
  OutboundIpV6SmtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 587
        To: 587
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 401

  # EGRESS 530
  # Allows outbound echo request ICMP traffic, mainly to allow PING from hosts
  # within the VPC to test reachability
  OutboundIpV4IcmpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Icmp:
        Code: -1
        Type: 8 # Echo
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: 1 # ICMP
      RuleAction: allow
      RuleNumber: 530
  OutboundIpV6IcmpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Icmp:
        Code: -1
        Type: 8 # Echo
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: 1 # ICMP
      RuleAction: allow
      RuleNumber: 531

  # EGRESS 550
  # Allows outbound NTP traffic to all IPs
  OutboundIpV4NtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 550
  OutboundIpV6NtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 551

  # EGRESS 620
  # Allows outbound SSH traffic to the VPC, mainly to allow tunneling through
  # an SSH bastion to other instances
  OutboundIpV4VpcSshNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 620
  OutboundIpV6VpcSshNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 621

Outputs:
  NetworkAclName:
    Description: The resource name of the public network ACL
    Value: !Ref PublicNetworkAcl
