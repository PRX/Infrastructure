# stacks/jump-server.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates an EC2 jump server for access to databases and other VPC resources.
  Also, you know, whatever other random things we want to run.

Parameters:
  kImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-arm64-gp2
  AuthorizedKeys: { Type: CommaDelimitedList }
  EnvironmentType: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  NestedChangeSetScrubbingResourcesState: { Type: String }
  CastlePostgresClientSecurityGroupId: { Type: String }
  CastlePostgresInstanceEndpointAddress: { Type: String }
  CastlePostgresInstanceEndpointPort: { Type: String }
  SharedAuroraMysqlEndpoint: { Type: String }
  SharedAuroraMysqlPort: { Type: String }
  SharedAuroraPostgresqlEndpoint: { Type: String }
  SharedAuroraPostgresqlPort: { Type: String }
  SharedEcsClusterName: { Type: String }
  SharedMysqlClientSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedPostgresqlClientSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedRedisClientSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedRedisReplicationGroupEndpointAddress: { Type: String }
  SharedRedisReplicationGroupEndpointPort: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  VpcPublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  Temp: { Type: AWS::SSM::Parameter::Value<String> }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  HasCastleSecurityGroup: !Not [!Equals [!Ref CastlePostgresClientSecurityGroupId, ""]]
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      # TODO: the actual policies
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        The security group for ${EnvironmentType} Jump Server inbound traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}-jump_server_sg" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      VpcId: !Ref VpcId

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub ${RootStackName}-jump-2022-07
      KeyType: ed25519
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Infrastructure }

  JumpServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_authorized_keys:
              # For more information, see:
              # https://github.com/PRX/internal/wiki/AWS:-Developer-Access
              command: !Sub
                - |-
                  #!/bin/bash
                  echo "Adding developer public keys to authorized_keys"
                  truncate -s 0 /home/ec2-user/.ssh/authorized_keys
                  echo "${developer_keys}" >> /home/ec2-user/.ssh/authorized_keys
                - developer_keys: !Join ["\n", !Ref AuthorizedKeys]
          files:
            /etc/cfn/cfn-hup.conf:
              # Create a configuration file for cfn-hup
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-hup.html#cfn-hup-config-file
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              # Define the actions to run when the resource metadata (found at
              # the given path) changes during a stack update.
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-hup.html#cfn-hup-hook-file
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.JumpServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource JumpServer
                runas=root
            /etc/profile.d/prxenv.sh:
              content: !Sub |
                export PRX_REGION=${AWS::Region}
                export PRX_ENVIRONMENT=${EnvironmentType}
                export PRX_ECS_CLUSTER_NAME=${SharedEcsClusterName}
                export PRX_SHARED_MYSQL_HOST=${SharedAuroraMysqlEndpoint}
                export PRX_SHARED_MYSQL_PORT=${SharedAuroraMysqlPort}
                export PRX_SHARED_POSTGRES_HOST=${SharedAuroraPostgresqlEndpoint}
                export PRX_SHARED_POSTGRES_PORT=${SharedAuroraPostgresqlPort}
                export PRX_SHARED_REDIS_HOST=${SharedRedisReplicationGroupEndpointAddress}
                export PRX_SHARED_REDIS_PORT=${SharedRedisReplicationGroupEndpointPort}
                export PRX_CASTLE_POSTGRES_HOST=${CastlePostgresInstanceEndpointAddress}
                export PRX_CASTLE_POSTGRES_PORT=${CastlePostgresInstanceEndpointPort}
          packages:
            yum:
              jq: []
              bind-utils: []
          services:
            sysvinit:
              cfn-hup:
                # Starts the cfn-hup service, and restarts the service if
                # cfn-init modifies the specified configuration files
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 100
      CreditSpecification:
        CPUCredits: unlimited
      DisableApiTermination: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref kImageId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !If [IsProduction, t4g.small, t4g.micro]
      KeyName: !Ref KeyPair
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet:
            - !GetAtt SecurityGroup.GroupId
            - !If [HasCastleSecurityGroup, !Ref CastlePostgresClientSecurityGroupId, !Ref AWS::NoValue]
            - !Ref SharedMysqlClientSecurityGroupId
            - !Ref SharedPostgresqlClientSecurityGroupId
            - !Ref SharedRedisClientSecurityGroupId
          SubnetId: !Ref VpcPublicSubnet1Id
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}-jump_server" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      UserData:
        # User data runs commands on EC2 instances when they are launched. To
        # support configuration updates on running EC2 instance, the user
        # data should primarily be used to run cfn-init. Any further launch
        # scripts or tasks should be defined in the resource metadata that
        # cfn-init loads, and that cfn-hup watches for changes.
        # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#multi-part_user_data
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html#cfn-helper-scripts-reference-amazon-amis
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            # The logs for this are found in: /var/log/cloud-init-output.log
            # Except the cfn-signal seems to get logged to /var/log/cfn-init.log
            # along with the rest of the cfn-init logs
            #
            # Despite what the docs say, the CloudFormation helper scripts are not preinstalled, so we install them
            # with aws-cfn-bootstrap. aws-cli fails to install as part of the cfn-init packages, so it's installed
            # here, even though they both use yum. Other packages should be installed through cfn-init.
            yum install -y aws-cfn-bootstrap aws-cli

            # --resource is the logical ID of the resource in a CloudFormation stack (generally a stack launched from
            # this template) that includes AWS::CloudFormation::Init metadata. By convention, this is the same
            # resource where this user data script (what you're reading right now) is defined.
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource JumpServer

  VanityJumpRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Record sets for regional EC2 jump servers
      HostedZoneName: prx.tech.
      RecordSets:
        - Name: !If [IsProduction, !Sub "jump.${AWS::Region}.prx.tech", !Sub "jump.staging.${AWS::Region}.prx.tech"]
          ResourceRecords:
            - !GetAtt JumpServer.PublicIp
          TTL: "3600"
          Type: A

Outputs:
  PublicDnsName:
    Description: The Public DNS name of the jump server
    Value: !GetAtt JumpServer.PublicDnsName
  PublicIp:
    Description: The Public IP address of the jump server
    Value: !GetAtt JumpServer.PublicIp
  Temp:
    Value: !Ref Temp
