# stacks/apps/dovetail-marketing-form-handler.yml
# 100A
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a Lambda function that handles HTML form submissions from the
  Dovetail marketing website

Parameters:
  NestedChangeSetScrubbingResourcesState: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  PrxZendeskApiUsername: { Type: AWS::SSM::Parameter::Value<String> }
  PrxZendeskApiToken: { Type: AWS::SSM::Parameter::Value<String> }

Conditions:
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  FormSubmissionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub >-
        ${EnvironmentType} Dovetail Marketing Website form submissions
      Environment:
        Variables:
          PRX_ZENDESK_API_USERNAME: !Ref PrxZendeskApiUsername
          PRX_ZENDESK_API_TOKEN: !Ref PrxZendeskApiToken
          PRX_ZENDESK_DOVETAIL_GROUP_ID: "1260812690010"
      Events:
        PostRequest:
          Properties:
            ApiId: !Ref HttpApi
            Method: post
            Path: /v1/submit
          Type: HttpApi
      Handler: src/index.handler
      InlineCode: |
        const https = require('https');

        function createTicket(payload) {
            return new Promise((resolve, reject) => {
                const u = process.env.PRX_ZENDESK_API_USERNAME;
                const p = process.env.PRX_ZENDESK_API_TOKEN;
                const creds = `${u}:${p}`;

                const body = JSON.stringify(payload);

                const options = {
                    host: 'prx.zendesk.com',
                    path: `/api/v2/tickets`,
                    method: 'POST',
                    headers: {
                        'Authorization': `Basic ${new Buffer(creds).toString('base64')}`,
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(body),
                    },
                };

                const req = https.request(options, (res) => {
                    res.setEncoding('utf8');

                    let json = '';
                    res.on('data', (chunk) => {
                        json += chunk;
                    });
                    res.on('end', () => {
                        if (res.statusCode >= 200 && res.statusCode < 300) {
                            resolve();
                        }
                        else {
                            console.log(json);
                            reject(new Error(`Zendesk error! ${res.statusCode}`));
                        }
                    });
                });

                // Generic request error handling
                req.on('error', (e) => reject(e));

                req.write(body);
                req.end();
            });
        }

        exports.handler = async (event, context) => {
            console.log(JSON.stringify(event));

            // Handle form data from the request
            if (event.headers['content-type'].includes('application/x-www-form-urlencoded')) {
                // API Gateway may base64 encode the form body; decode it if
                // that's the case
                const payload = event.isBase64Encoded ?
                    Buffer.from(event.body, 'base64').toString('utf-8') :
                    event.body;

                // Parse the request body as URL-encoded parameters
                const params = new URLSearchParams(payload);

                // Pull out form fields that are *required* for creating a
                // ticket
                const email = params.get('inputEmail');
                const name = params.get('inputName') || 'Unknown';
                const organization = params.get('textOrganization') || 'Unknown';

                if (!email) {
                    return {
                        statusCode: 200,
                        body: 'Email is required',
                    };
                }

                // Concat all form fields from the request as the ticket
                // comment body
                let comment = '';
                for (const [key, value] of params) {
                    comment = comment.concat(`${key}: ${value}\n\n`);
                }

                await createTicket({
                    ticket: {
                        group_id: process.env.PRX_ZENDESK_DOVETAIL_GROUP_ID,
                        requester: {
                            email,
                            name,
                        },
                        subject: `Website form submission: ${organization}`,
                        comment: {
                            body: comment,
                        }
                    }
                });
            }

            return {
                statusCode: 301,
                headers: {
                    location: 'https://dovetail.prx.org/success',
                }
            };
        };
      MemorySize: 128
      Runtime: nodejs18.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Marketing Website
      Timeout: 8
  FormSubmissionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${FormSubmissionFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Marketing Website }
  FormSubmissionFunctionElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Marketing Website] Form submissions <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Marketing Website Lambda function is
        failing, so user submissions may not be making it into Zendesk.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FormSubmissionFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  FormSubmissionFunctionElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt FormSubmissionFunctionElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Marketing Website }

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: !Sub ${EnvironmentType} Dovetail Marketing Website form API
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Marketing Website
