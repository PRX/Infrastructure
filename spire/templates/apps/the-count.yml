# stacks/apps/the-count.yml
# 300A
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates an ECS service for The Count, along with target group and listener
  rule for the shared ALB. Also creates an EFS file system that logs are
  written to.

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Parameters:
  NestedChangeSetScrubbingResourcesState: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  VpcPublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  SharedEcsAsgInstanceSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CodeS3Bucket: { Type: String }
  CodeS3ObjectKey: { Type: AWS::SSM::Parameter::Value<String> }
  TheCountHostname: { Type: String }

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  LogsKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      RetentionPeriodHours: 48
      ShardCount: 1
      StreamModeDetails:
        StreamMode: PROVISIONED
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref TheCountHostname
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_the-count" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }
      ValidationMethod: DNS

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: !Sub ${EnvironmentType} The Count
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: The Count

  DomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref TheCountHostname
      DomainNameConfigurations:
        - CertificateArn: !Ref Certificate
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: The Count
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref HttpApi
      DomainName: !Ref DomainName
      Stage: !Ref HttpApiApiGatewayDefaultStage

  ActionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} The Count API endpoint handler
      Environment:
        Variables:
          ACTION_LOG_STREAM_NAME: !Ref LogsKinesisStream
          COOKIE_DOMAIN: !If [IsProduction, .prx.org, .prx.tech]
      Events:
        ApiRequest:
          Properties:
            ApiId: !Ref HttpApi
            Method: get
            Path: /action.gif
          Type: HttpApi
      Handler: action.handler
      MemorySize: 192
      Policies:
        - Statement:
            - Action:
                - kinesis:PutRecord
              Effect: Allow
              Resource: !GetAtt LogsKinesisStream.Arn
              Sid: AllowRecordWrite
          Version: "2012-10-17"
      Runtime: nodejs20.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: The Count
      Timeout: 16
  ActionFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [The Count] API Handler <${EnvironmentTypeAbbreviation}> ELEVATED FUNCTION ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} The Count API endpoint Lambda function is
        experiencing function errors, thrown by the code or runtime. The
        invocations likely origintated from API Gateway and will not be
        retried.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ActionFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
  ActionFunctionErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt ActionFunctionErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }
  ActionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ActionFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }

  LogsFileSystem:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      BackupPolicy:
        Status: DISABLED
      # FileSystemPolicy: Json
      FileSystemTags:
        - { Key: Name, Value: !Sub "${RootStackName}_the-count" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }
      # LifecyclePolicies:
      #   - LifecyclePolicy
  LogsMountPointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        The primary security group for ${EnvironmentType} EFS mount points for
        The Count logs.
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_the-count_efs-mount-points" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }
      VpcId: !Ref VpcId
  LogsMountPointSecurityGroupClientIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Sub >-
        Allows inbound NFS traffic from EFS client resources
      FromPort: 2049
      GroupId: !GetAtt LogsMountPointSecurityGroup.GroupId
      IpProtocol: tcp
      # TODO This should really be a Client-model source group, and the ASG
      # instances should belong to that group (see: shared Redis)
      SourceSecurityGroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
      ToPort: 2049
  LogsMountPointSubnet1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !GetAtt LogsFileSystem.FileSystemId
      SecurityGroups:
        - !GetAtt LogsMountPointSecurityGroup.GroupId
      SubnetId: !Ref VpcPublicSubnet1Id
  LogsMountPointSubnet2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !GetAtt LogsFileSystem.FileSystemId
      SecurityGroups:
        - !GetAtt LogsMountPointSecurityGroup.GroupId
      SubnetId: !Ref VpcPublicSubnet2Id
  LogsMountPointSubnet3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !GetAtt LogsFileSystem.FileSystemId
      SecurityGroups:
        - !GetAtt LogsMountPointSecurityGroup.GroupId
      SubnetId: !Ref VpcPublicSubnet3Id
  LogsAccessPoint:
    Type: AWS::EFS::AccessPoint
    DependsOn:
      - LogsMountPointSubnet1
      - LogsMountPointSubnet2
      - LogsMountPointSubnet3
    Properties:
      AccessPointTags:
        - { Key: Name, Value: !Sub "${RootStackName}_the-count" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }
      FileSystemId: !GetAtt LogsFileSystem.FileSystemId
      PosixUser:
        Gid: "1000"
        Uid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0777"
        Path: /app/count_files
  LogsHighStorageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [The Count] Log Files <${EnvironmentTypeAbbreviation}> HIGH STORAGE USAGE (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} The Count file system storage usage is unusually
        high. Ensure that logs are being processed and that processed logs are
        being deleted.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: StorageClass
          Value: Total
        - Name: FileSystemId
          Value: !GetAtt LogsFileSystem.FileSystemId
      EvaluationPeriods: 1
      MetricName: StorageBytes
      Namespace: AWS/EFS
      Period: 60
      Statistic: Maximum
      Threshold: 512000000 # 512 MB
      TreatMissingData: notBreaching

  StreamToFileFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        The security group for ${EnvironmentType} stream-to-file function for
        The Count.
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_the-count_function" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }
      VpcId: !Ref VpcId
  StreamToFileFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - LogsMountPointSubnet1
      - LogsMountPointSubnet2
      - LogsMountPointSubnet3
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} The Count function that writes logs from a Kinesis
        stream to a file in EFS
      Events:
        KinesisTrigger:
          Properties:
            BatchSize: 1000
            Enabled: true
            MaximumBatchingWindowInSeconds: 300
            StartingPosition: LATEST
            Stream: !GetAtt LogsKinesisStream.Arn
          Type: Kinesis
      FileSystemConfigs:
        - Arn: !GetAtt LogsAccessPoint.Arn
          LocalMountPath: /mnt/count_files
      Handler: writer.handler
      MemorySize: 8000
      Runtime: nodejs20.x
      Policies:
        - Statement:
            - Action:
                - elasticfilesystem:ClientMount
                - elasticfilesystem:ClientRootAccess
                - elasticfilesystem:ClientWrite
              Condition:
                StringEquals:
                  elasticfilesystem:AccessPointArn: !GetAtt LogsAccessPoint.Arn
              Effect: Allow
              Resource: !GetAtt LogsFileSystem.Arn
          Version: "2012-10-17"
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: The Count
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref SharedEcsAsgInstanceSecurityGroupId # TODO
          - !GetAtt StreamToFileFunctionSecurityGroup.GroupId
        SubnetIds:
          - !Ref VpcPublicSubnet1Id
          - !Ref VpcPublicSubnet2Id
          - !Ref VpcPublicSubnet3Id
  StreamToFileFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${StreamToFileFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }
  StreamToFileFunctionElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [The Count] Stream-to-File Function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} The Count stream-to-file function is failing, so
        some data may not be reaching The Castle as expected. The data should
        be safe in the Kinesis stream.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref StreamToFileFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
  StreamToFileFunctionElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt StreamToFileFunctionElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: The Count }

Outputs:
  LogsFileSystemId:
    Value: !GetAtt LogsFileSystem.FileSystemId
  ApiId:
    Value: !Ref HttpApi
