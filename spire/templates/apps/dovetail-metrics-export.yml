# stacks/apps/dovetail-metrics-export.yml
# 400A
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a Lambda function that exports Dovetail metrics data from BigQuery

Parameters:
  NestedChangeSetScrubbingResourcesState: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RegionMode: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CodeS3Bucket: { Type: String }
  CodeS3ObjectKey: { Type: AWS::SSM::Parameter::Value<String> }
  BigQueryLayerS3ObjectKey: { Type: AWS::SSM::Parameter::Value<String> }
  BigQueryClientConfig: { Type: AWS::SSM::Parameter::Value<String> }
  PorterJobExecutionSnsTopicArn: { Type: AWS::SSM::Parameter::Value<String> }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  IsStaging: !Equals [!Ref EnvironmentType, Staging]
  IsPrimaryRegion: !Equals [!Ref RegionMode, Primary]
  EnableProductionRules: !And [!Condition IsProduction, !Condition IsPrimaryRegion]
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  BigQueryLayer:
    Type: AWS::Lambda::LayerVersion
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      CompatibleRuntimes:
        - nodejs20.x
      Content:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref BigQueryLayerS3ObjectKey
      LicenseInfo: ISC

  ExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} Metrics data export from BigQuery
      Environment:
        Variables:
          GCP_EXPORT_BUCKET: !If [IsProduction, prx-metrics-export-prod, prx-metrics-export-stag]
          BIGQUERY_DATASET: !If [IsProduction, production, staging]
          BIGQUERY_CLIENT_CONFIG: !Ref BigQueryClientConfig
          PORTER_SNS_TOPIC: !Ref PorterJobExecutionSnsTopicArn
      Handler: src/index.handler
      Layers:
        - !Ref BigQueryLayer
      MemorySize: 128
      Policies:
        - Statement:
            - Action: sns:Publish
              Effect: Allow
              Resource: !Ref PorterJobExecutionSnsTopicArn
              Sid: AllowPorterJobPublish
      Runtime: nodejs20.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Metrics Export
      Timeout: 180

  ExportFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ExportFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Metrics Export }

  ExportFunctionElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Metrics Export] Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Metrics Export Lambda function is
        failing, so files may not be getting delivered to third-parties.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ExportFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  ExportFunctionElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt ExportFunctionElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Metrics Export }

  RulesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource: !GetAtt ExportFunction.Arn
                Sid: AllowLambdaInvoke
            Version: "2012-10-17"
          PolicyName: EventRuleTargets
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Metrics Export }

  StagingSampleExport:
    Type: AWS::Events::Rule
    Condition: IsStaging
    Properties:
      Description: Sample data export from staging metrics
      RoleArn: !GetAtt RulesRole.Arn
      ScheduleExpression: cron(15 0 * * ? *) # 00:15 UTC every day
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExportFunction.Arn
          Id: !Sub "${RootStackName}.Export.Temp"
          Input: |-
            {
              "PodcastIDs": [815],
              "ObjectPrefix": "staging-sample/",
              "Copies": [
                {
                  "Mode": "AWS/S3",
                  "BucketName": "prx-porter-sandbox"
                }
              ]
            }
  StagingSampleExportInvokePermission:
    Condition: IsStaging
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExportFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StagingSampleExport.Arn

  TedNetworkExport:
    Type: AWS::Events::Rule
    Condition: EnableProductionRules
    Properties:
      Description: TED network data export
      RoleArn: !GetAtt RulesRole.Arn
      ScheduleExpression: cron(15 0 * * ? *) # 00:15 UTC every day
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExportFunction.Arn
          Id: !Sub "${RootStackName}.Export.TEDNetwork"
          Input: |-
            {
              "PodcastIDs": [
                70,
                131,
                384,
                179,
                357,
                298,
                316,
                315,
                341,
                588,
                350,
                343,
                124,
                415,
                116,
                421,
                368,
                292,
                301,
                144,
                3228,
                3592,
                3591
              ],
              "ObjectPrefix": "TED/Network/",
              "Copies": [
                {
                  "Mode": "AWS/S3",
                  "BucketName": "ted-conferences-prx",
                  "DestinationFormat": "prod/TED/Network/%TYPE/%RANGE_START_ISO-%RANGE_END_ISO/%REQUEST_TIME/%REQUEST_ID-%FILE_SEQ_ID.ndjson.gz"
                }
              ]
            }
  TedNetworkExportInvokePermission:
    Condition: EnableProductionRules
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExportFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TedNetworkExport.Arn

  CneNetworkExport:
    Type: AWS::Events::Rule
    Condition: EnableProductionRules
    Properties:
      Description: CNE network data export
      RoleArn: !GetAtt RulesRole.Arn
      ScheduleExpression: cron(15 0 * * ? *) # 00:15 UTC every day
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExportFunction.Arn
          Id: !Sub "${RootStackName}.Export.CNENetwork"
          Input: |-
            {
              "PodcastIDs": [
                5571,
                5604,
                5637,
                5670,
                5703,
                5736,
                5769,
                5770,
                5802,
                5835,
                5868,
                5901,
                6165,
                6198,
                6231,
                6232
              ],
              "ObjectPrefix": "CNE/Network/",
              "Copies": [
                {
                  "Mode": "AWS/S3",
                  "BucketName": "cn-dse-prx-us-prod"
                }
              ]
            }
  CneNetworkExportInvokePermission:
    Condition: EnableProductionRules
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExportFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CneNetworkExport.Arn

  BoostrIntegration:
    Type: AWS::Events::Rule
    Condition: EnableProductionRules
    Properties:
      Description: Boostr integration impression export
      RoleArn: !GetAtt RulesRole.Arn
      ScheduleExpression: cron(15 0 * * ? *) # 00:15 UTC every day
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExportFunction.Arn
          Id: !Sub "${RootStackName}.Export.BoostrIntegration"
          Input: |-
            {
              "Extractions": ["boostr_impressions"],
              "IntegrationsIDs": [1],
              "CompressionType": "NONE",
              "DestinationFormat": "CSV",
              "Copies": [
                {
                  "Mode": "AWS/S3",
                  "BucketName": "prx-boostr-data-exports",
                  "DestinationFormat": "boostr_impressions_prx_%RANGE_START_DATE_ISO.%FILE_SEQ_ID.csv"
                }
              ]
            }
  BoostrIntegrationInvokePermission:
    Condition: EnableProductionRules
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExportFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BoostrIntegration.Arn
