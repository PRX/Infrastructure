# stacks/apps/s3-signing.yml
# 100A
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: A serverless API application to generate S3 request signatures

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Parameters:
  NestedChangeSetScrubbingResourcesState: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CodeS3Bucket: { Type: String }
  CodeS3ObjectKey: { Type: AWS::SSM::Parameter::Value<String> }
  MediajointS3BucketArn: { Type: AWS::SSM::Parameter::Value<String> }
  NetworksS3BucketArn: { Type: AWS::SSM::Parameter::Value<String> }
  WfmtServicesS3BucketArn: { Type: AWS::SSM::Parameter::Value<String> }

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  UploadHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
        AllowMethods:
          - GET
          - OPTIONS
        AllowOrigins:
          - "*"
      Description: !Sub ${EnvironmentType} S3 upload signing API
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: S3 Signing Service

  UploadHttpLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub ${EnvironmentType} S3 signing service Lambda function
      Environment:
        Variables:
          ACCESS_KEY: !GetAtt UploadHttpSigningAccessKey.SecretAccessKey
      Events:
        ApiRequest:
          Properties:
            ApiId: !Ref UploadHttpApi
            Method: get
            Path: /signature
          Type: HttpApi
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs20.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: S3 Signing Service
      Timeout: 5
  UploadHttpLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${UploadHttpLambdaFunction}
      RetentionInDays: 60
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: S3 Signing Service }

  UploadHttpSigningUser:
    Type: AWS::IAM::User
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: S3 Signing Service }
  UploadHttpSigningAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref UploadHttpSigningUser
  UploadHttpSigningS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:PutObject
            Effect: Allow
            Resource:
              - !Sub ${MediajointS3BucketArn}/public/uploads/*
              - !Sub ${NetworksS3BucketArn}/public/item_attachments/*
              - !Sub ${WfmtServicesS3BucketArn}/*
            Sid: AllowUploads
        Version: "2012-10-17"
      PolicyName: S3ObjectSigning
      Users:
        - !Ref UploadHttpSigningUser

  # Lambda Alarms
  UploadLambdaElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [S3 Signing] Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} S3 signing Lambda function is failing, which likely
        means uploads to Publish are also failing.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadHttpLambdaFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  UploadLambdaElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt UploadLambdaElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: S3 Signing Service }

  UploadLambdaDangerousErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [S3 Signing] Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} S3 signing Lambda function is failing a lot, which
        likely means uploads to Publish are also failing.
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 2
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadHttpLambdaFunction
      EvaluationPeriods: 10
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  UploadLambdaDangerousErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt UploadLambdaDangerousErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: S3 Signing Service }

  UploadLambdaElevatedThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [S3 Signing] Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS BEING THROTTLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} S3 signing Lambda function is being throttled. This
        likely means uploads to Publish are failing.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadHttpLambdaFunction
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  UploadLambdaElevatedThrottleAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt UploadLambdaElevatedThrottleAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: S3 Signing Service }

  UploadLambdaElevatedVolumeAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [S3 Signing] Lambda function <${EnvironmentTypeAbbreviation}> SUSPICIOUSLY HIGH INVOCATIONS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} S3 signing Lambda function is being invoked a
        suspiciously high amount. This could indicate a misbehaving client
        (e.g., Publish frontend), attack attempt, or could be legitimate.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadHttpLambdaFunction
      DatapointsToAlarm: 2
      EvaluationPeriods: 3
      MetricName: Invocations
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 500
      TreatMissingData: notBreaching
  UploadLambdaElevatedVolumeAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt UploadLambdaElevatedVolumeAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: S3 Signing Service }

  UploadLambdaDangerousErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [S3 Signing] Lambda function <${EnvironmentTypeAbbreviation}> DANGEROUS ERROR RATE (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} S3 signing Lambda function short-term error rate
        has reached a dangerous level, meaning a significant number of
        signatures may be failing, preventing files from being uploaded.
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 2
      EvaluationPeriods: 3
      Metrics:
        - Id: errors
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UploadHttpLambdaFunction
              MetricName: Errors
              Namespace: AWS/Lambda
            Period: 120
            Stat: Sum
          ReturnData: false
        - Id: invocations
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UploadHttpLambdaFunction
              MetricName: Invocations
              Namespace: AWS/Lambda
            Period: 120
            Stat: Sum
          ReturnData: false
        - Id: error_rate
          Expression: "errors / invocations"
          ReturnData: true
      Threshold: 0.3
      TreatMissingData: notBreaching
  UploadLambdaDangerousErrorRateAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt UploadLambdaDangerousErrorRateAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: S3 Signing Service }

  UploadLambdaCriticalErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [S3 Signing] Lambda function <${EnvironmentTypeAbbreviation}> CRITICAL ERROR RATE (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} S3 signing Lambda function short-term error rate
        has reached a crital level, meaning most signatures are likely failing,
        preventing files from being uploaded.
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Metrics:
        - Id: errors
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UploadHttpLambdaFunction
              MetricName: Errors
              Namespace: AWS/Lambda
            Period: 60
            Stat: Sum
          ReturnData: false
        - Id: invocations
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UploadHttpLambdaFunction
              MetricName: Invocations
              Namespace: AWS/Lambda
            Period: 60
            Stat: Sum
          ReturnData: false
        - Id: error_rate
          Expression: "errors / invocations"
          ReturnData: true
      Threshold: 0.6
      TreatMissingData: notBreaching
  UploadLambdaCriticalErrorRateAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt UploadLambdaCriticalErrorRateAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: S3 Signing Service }

Outputs:
  SigningAccessKeyId:
    Description: >-
      The IAM access key ID for the access key used to generate S3 API
      request signatures
    Value: !Ref UploadHttpSigningAccessKey
  SigningDomain:
    Description: The domain for the signing service
    Value: !Sub ${UploadHttpApi}.execute-api.${AWS::Region}.amazonaws.com
  SigningEndpointUrl:
    Description: The URL for the signing endpoint
    Value: !Sub https://${UploadHttpApi}.execute-api.${AWS::Region}.amazonaws.com/signature
  UploadSigningUserName:
    Description: The user name of the IAM user whose key is used for signing
    Value: !Ref UploadHttpSigningUser
  ApiId:
    Value: !Ref UploadHttpApi
