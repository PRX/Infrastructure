# stacks/apps/cms.yml
# 100A
#
# The names of the SQS queues created by this template are intended to
# implicitly match some configuration that exists within the CMS application.
# The only part of the queue names that is passed to the application is the
# prefix; if the stems change in other the template or the app config, things
# will not function as expected.
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates an ECS service for the public CMS web server, along with target
  group and listener rule for the shared ALB. Also creates an ECS service for
  the CMS workers, as well as an Elasticsearch domain used by CMS.

Parameters:
  kWebContainerName:
    Type: String
    Default: cms-web
  kWorkerContainerName:
    Type: String
    Default: cms-worker
  kApplicationPort:
    Type: Number
    Default: 3000
  kDatabasePoolSize:
    Type: String
    Default: "16"
  #######
  NestedChangeSetScrubbingResourcesState: { Type: String }
  AlbFullName: { Type: String }
  AlbHttpsListenerArn: { Type: String }
  EcsClusterArn: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  EnvironmentTypeLowercase: { Type: String }
  RegionMode: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  EcrImageTag: { Type: AWS::SSM::Parameter::Value<String> }
  AlbListenerRulePriorityPrefix: { Type: String }
  SharedMemcachedEndpointAddress: { Type: String }
  VpcPrivateSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPrivateSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  SharedEcsAsgInstanceSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedAuroraMysqlEndpoint: { Type: String }
  SharedAuroraMysqlPort: { Type: String }
  AnnounceResourcePrefix: { Type: String }
  PorterJobExecutionSnsTopicArn: { Type: String }
  FeedsS3BucketArn: { Type: AWS::SSM::Parameter::Value<String> }
  MediajointS3BucketArn: { Type: AWS::SSM::Parameter::Value<String> }
  CmsHostname: { Type: String }
  FeederHostname: { Type: String }
  IdHostname: { Type: String }
  MetaHostname: { Type: String }
  NewRelicApiKeyPrxLite: { Type: String }
  BetaHostname: { Type: String }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  IsPrimaryRegion: !Equals [!Ref RegionMode, Primary]
  HasAuroraEndpoint: !Not [!Equals [!Ref SharedAuroraMysqlEndpoint, ""]]
  EnableWorkers: !And [!Condition HasAuroraEndpoint, !Condition IsPrimaryRegion]
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  HostHeaderListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - cms.*
      ListenerArn: !Ref AlbHttpsListenerArn
      Priority: !Join ["", [!Ref AlbListenerRulePriorityPrefix, "01"]]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /api/v1
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_cms" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  TargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [CMS] Web server <${EnvironmentTypeAbbreviation}> RETURNING 5XX ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's Rails server is returning 5XX errors from
        the ECS service to the load balancer.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref AlbFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  TargetGroupHttp5xxAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt TargetGroupHttp5xxAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WebTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: !Ref PorterJobExecutionSnsTopicArn
                Sid: AllowPublish
            Version: "2012-10-17"
          PolicyName: Porter
        - PolicyDocument:
            Statement:
              - Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Effect: Allow
                Resource:
                  - !GetAtt AudioCallbackQueue.Arn
                  - !GetAtt ImageCallbackQueue.Arn
                  - !GetAtt PodcastImportQueue.Arn
                  - !GetAtt SearchIndexerQueue.Arn
                  - !GetAtt DefaultJobQueue.Arn
                Sid: AllowShoryuken
            Version: "2012-10-17"
          PolicyName: AppQueues
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AnnounceResourcePrefix}*
                Sid: AllowPublish
            Version: "2012-10-17"
          PolicyName: Announce
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                  - s3:ListAllMyBuckets
                Effect: Allow
                Resource: "*" # TODO Seems very permissive
            Version: "2012-10-17"
          PolicyName: S3ReadOnly
        - PolicyDocument:
            Statement:
              - Action: s3:ListAllMyBuckets
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:Get*
                  - s3:List*
                  - s3:Put*
                  - s3:RestoreObject
                Effect: Allow
                Resource:
                  - !Sub ${FeedsS3BucketArn}/*
                  - !Ref FeedsS3BucketArn
            Version: "2012-10-17"
          PolicyName: S3FeedBucket
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyDocument:
            Statement:
              - Action: ssm:GetParameters
                Effect: Allow
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prx/${EnvironmentTypeAbbreviation}/Spire/CMS/*
                Sid: AllowAppParameterRead
            Version: "2012-10-17"
          PolicyName: ContainerSecrets
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }

  WebEcsService:
    Type: AWS::ECS::Service
    Condition: HasAuroraEndpoint # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsPrimaryRegion, 2, 0]
      EnableECSManagedTags: true
      LoadBalancers:
        - ContainerName: !Ref kWebContainerName
          ContainerPort: !Ref kApplicationPort
          TargetGroupArn: !Ref TargetGroup
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TaskDefinition: !Ref WebTaskDefinition
  WorkerEcsService:
    Type: AWS::ECS::Service
    Condition: EnableWorkers # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TaskDefinition: !Ref WorkerTaskDefinition

  WebTaskLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: cms
            - Name: RAILS_ENV
              Value: !Ref EnvironmentTypeLowercase
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_BUCKET
              Value: !Select [5, !Split [":", !Ref MediajointS3BucketArn]]
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: MEMCACHE_SERVERS
              Value: !Ref SharedMemcachedEndpointAddress
            - Name: DB_PORT_3306_TCP_ADDR
              Value: !Ref SharedAuroraMysqlEndpoint
            - Name: DB_PORT_3306_TCP_PORT
              Value: !Ref SharedAuroraMysqlPort
            - Name: ANNOUNCE_RESOURCE_PREFIX
              Value: !Ref AnnounceResourcePrefix
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: DATABASE_POOL_SIZE
              Value: !Ref kDatabasePoolSize
            - Name: ELASTICSEARCH_URL
              Value: !Sub https://${ElasticsearchDomain.DomainEndpoint}
            - Name: FEEDER_HOST
              Value: !Ref FeederHostname
            - Name: ID_HOST
              Value: !Ref IdHostname
            - Name: META_HOST
              Value: !Ref MetaHostname
            - Name: NEW_RELIC_KEY
              Value: !Ref NewRelicApiKeyPrxLite
            - Name: NEW_RELIC_NAME
              Value: !If [IsProduction, CMS Production, CMS Staging]
            - Name: PORTER_SNS_TOPIC_ARN
              Value: !Ref PorterJobExecutionSnsTopicArn
            - Name: PRX_HOST
              Value: !Ref BetaHostname
            - Name: WORKER_COUNT
              Value: !If [IsProduction, "10", "6"]
            - Name: WORKER_DATABASE_POOL_SIZE
              Value: !If [IsProduction, "10", "6"]
            - Name: WORKER_PAUSE
              Value: "30"
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrImageTag}
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWebContainerName
          PortMappings:
            - ContainerPort: !Ref kApplicationPort
              HostPort: 0
          Secrets:
            - Name: DB_ENV_MYSQL_DATABASE
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/database-name
            - Name: DB_ENV_MYSQL_PASSWORD
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/database-password
            - Name: DB_ENV_MYSQL_USER
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/database-username
            - Name: PRX_CLIENT_ID
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/id-auth-client-id
            - Name: PRX_SECRET
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/id-auth-client-secret
            - Name: PUBLIC_ASSET_SECRET
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/public-asset-secret
            - Name: RAILS_SECRET_KEY
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/rails-secret-key
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TaskRoleArn: !GetAtt TaskRole.Arn

  WorkerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - worker
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: cms
            - Name: RAILS_ENV
              Value: !Ref EnvironmentTypeLowercase
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_BUCKET
              Value: !Select [5, !Split [":", !Ref MediajointS3BucketArn]]
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: MEMCACHE_SERVERS
              Value: !Ref SharedMemcachedEndpointAddress
            - Name: DB_PORT_3306_TCP_ADDR
              Value: !Ref SharedAuroraMysqlEndpoint
            - Name: DB_PORT_3306_TCP_PORT
              Value: !Ref SharedAuroraMysqlPort
            - Name: ANNOUNCE_RESOURCE_PREFIX
              Value: !Ref AnnounceResourcePrefix
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: DATABASE_POOL_SIZE
              Value: !Ref kDatabasePoolSize
            - Name: ELASTICSEARCH_URL
              Value: !Sub https://${ElasticsearchDomain.DomainEndpoint}
            - Name: FEEDER_HOST
              Value: !Ref FeederHostname
            - Name: ID_HOST
              Value: !Ref IdHostname
            - Name: META_HOST
              Value: !Ref MetaHostname
            - Name: NEW_RELIC_KEY
              Value: !Ref NewRelicApiKeyPrxLite
            - Name: NEW_RELIC_NAME
              Value: !If [IsProduction, CMS Production, CMS Staging]
            - Name: PORTER_SNS_TOPIC_ARN
              Value: !Ref PorterJobExecutionSnsTopicArn
            - Name: PRX_HOST
              Value: !Ref BetaHostname
            - Name: WORKER_COUNT
              Value: !If [IsProduction, "10", "6"]
            - Name: WORKER_DATABASE_POOL_SIZE
              Value: !If [IsProduction, "10", "6"]
            - Name: WORKER_PAUSE
              Value: "30"
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrImageTag}
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WorkerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWorkerContainerName
          PortMappings:
            - ContainerPort: !Ref kApplicationPort
              HostPort: 0
          Secrets:
            - Name: DB_ENV_MYSQL_DATABASE
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/database-name
            - Name: DB_ENV_MYSQL_PASSWORD
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/database-password
            - Name: DB_ENV_MYSQL_USER
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/database-username
            - Name: PRX_CLIENT_ID
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/id-auth-client-id
            - Name: PRX_SECRET
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/id-auth-client-secret
            - Name: PUBLIC_ASSET_SECRET
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/public-asset-secret
            - Name: RAILS_SECRET_KEY
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/CMS/rails-secret-key
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TaskRoleArn: !GetAtt TaskRole.Arn

  ElasticsearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub CMS ${EnvironmentType} Elasticsearch security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          SourceSecurityGroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
          ToPort: 443
        - IpProtocol: tcp
          FromPort: 9243
          SourceSecurityGroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
          ToPort: 9243
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_cms_elasticsearch" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AccessPolicies:
        Statement:
          - Action: es:*
            Effect: Allow
            Principal:
              AWS: "*"
            Resource: !Sub arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/*
        Version: "2012-10-17"
      AdvancedSecurityOptions:
        Enabled: false
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10 # GiB
        VolumeType: gp2
      ElasticsearchClusterConfig:
        InstanceCount: !If [IsProduction, 2, 1]
        InstanceType: t3.small.elasticsearch
        ZoneAwarenessEnabled: !If [IsProduction, true, false]
      ElasticsearchVersion: "6.4"
      EncryptionAtRestOptions:
        Enabled: false
      NodeToNodeEncryptionOptions:
        Enabled: false
      SnapshotOptions:
        AutomatedSnapshotStartHour: 8 # UTC
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VPCOptions:
        SecurityGroupIds:
          - !GetAtt ElasticsearchSecurityGroup.GroupId
        SubnetIds:
          - !Ref VpcPrivateSubnet1Id
          - !If [IsProduction, !Ref VpcPrivateSubnet2Id, !Ref "AWS::NoValue"]

  AudioCallbackQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_audio_callback
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AudioCallbackDeadletterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  AudioCallbackQueueSlowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [CMS] Audio queue <${EnvironmentTypeAbbreviation}> FALLING BEHIND (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's queue for the audio callbacks has unusually
        old messages, which could mean the callbacks are not being processed.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AudioCallbackQueue.QueueName
      EvaluationPeriods: 3
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 60
      TreatMissingData: notBreaching
  AudioCallbackQueueSlowAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AudioCallbackQueueSlowAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }
  AudioCallbackQueueVerySlowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub FATAL [CMS] Audio queue <${EnvironmentTypeAbbreviation}> STALLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's queue for the audio callbacks appears to be
        stalled, as some messages are very old. This likely means processing
        has stopped.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AudioCallbackQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 300
      TreatMissingData: notBreaching
  AudioCallbackQueueVerySlowAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AudioCallbackQueueVerySlowAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }
  AudioCallbackDeadletterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_audio_callback_failures
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  AudioCallbackDeadletterQueueMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [CMS] Audio dead-letter queue <${EnvironmentTypeAbbreviation}> NOT EMPTY (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's dead-letter queue for the audio callback
        queue is not empty, which means some job callbacks were not
        successfully processed.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AudioCallbackDeadletterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching
  AudioCallbackDeadletterQueueMessageAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AudioCallbackDeadletterQueueMessageAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }

  ImageCallbackQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_image_callback
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ImageCallbackDeadletterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  ImageCallbackQueueSlowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [CMS] Image queue <${EnvironmentTypeAbbreviation}> FALLING BEHIND (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's queue for the image callbacks has unusually
        old messages, which could mean the callbacks are not being processed.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ImageCallbackQueue.QueueName
      EvaluationPeriods: 3
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 60
      TreatMissingData: notBreaching
  ImageCallbackQueueSlowAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt ImageCallbackQueueSlowAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }
  ImageCallbackQueueVerySlowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub FATAL [CMS] Image queue <${EnvironmentTypeAbbreviation}> STALLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's queue for the image callbacks appears to be
        stalled, as some messages are very old. This likely means processing
        has stopped.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ImageCallbackQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 300
      TreatMissingData: notBreaching
  ImageCallbackQueueVerySlowAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt ImageCallbackQueueVerySlowAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }
  ImageCallbackDeadletterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_image_callback_failures
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  ImageCallbackDeadletterQueueMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [CMS] Image dead-letter queue <${EnvironmentTypeAbbreviation}> NOT EMPTY (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's dead-letter queue for the image callback
        queue is not empty, which means some job callbacks were not
        successfully processed.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ImageCallbackDeadletterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching
  ImageCallbackDeadletterQueueMessageAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt ImageCallbackDeadletterQueueMessageAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }

  PodcastImportQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_podcast_import
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PodcastImportDeadletterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  PodcastImportDeadletterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_podcast_import_failures
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  PodcastImportDeadletterQueueMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [CMS] Import dead-letter queue <${EnvironmentTypeAbbreviation}> NOT EMPTY (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's dead-letter queue for the podcast import
        callback queue is not empty, which means some imports were not
        successfully.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PodcastImportDeadletterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching
  PodcastImportDeadletterQueueMessageAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt PodcastImportDeadletterQueueMessageAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }

  SearchIndexerQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_search_indexer
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SearchIndexerDeadletterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  SearchIndexerDeadletterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_search_indexer_failures
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  SearchIndexerDeadletterQueueMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [CMS] Search index dead-letter queue <${EnvironmentTypeAbbreviation}> NOT EMPTY (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's dead-letter queue for the search index
        queue is not empty, which means some indexing jobs were not successful.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SearchIndexerDeadletterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching
  SearchIndexerDeadletterQueueMessageAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt SearchIndexerDeadletterQueueMessageAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }

  DefaultJobQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_default
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DefaultJobDeadletterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  DefaultJobDeadletterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_cms_default_failures
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VisibilityTimeout: 3600 # 1 hour
  DefaultJobDeadletterQueueMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [CMS] Default dead-letter queue <${EnvironmentTypeAbbreviation}> NOT EMPTY (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} CMS's dead-letter queue for the default
        queue is not empty, which means some jobs were not successful.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DefaultJobDeadletterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching
  DefaultJobDeadletterQueueMessageAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt DefaultJobDeadletterQueueMessageAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:application, Value: CMS }

Outputs:
  ElasticsearchDomainName:
    Value: !Ref ElasticsearchDomain

  TargetGroupFullName:
    Value: !GetAtt TargetGroup.TargetGroupFullName
