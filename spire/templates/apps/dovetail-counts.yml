# stacks/apps/dovetail-counts.yml
# 100A
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a Lambda function that processes Dovetail CDN log data from a Kinesis
  stream and sends the results (i.e., the counted traffic data) to another
  Kinesis stream. Also creates a number of CloudWatch log metric filters for
  monitoring the Lambda's operation.

Parameters:
  kMetricFilterNamespace:
    Type: String
    Default: PRX/Dovetail/Counts
  #######
  NestedChangeSetScrubbingResourcesState: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CodeS3Bucket: { Type: String }
  CodeS3ObjectKey: { Type: AWS::SSM::Parameter::Value<String> }
  VpcId: { Type: AWS::EC2::VPC::Id }
  VpcPrivateSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPrivateSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPrivateSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  KinesisStreamsEndpointAccessSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  StsEndpointAccessSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  ArrangementsDynamodbRegion: { Type: AWS::SSM::Parameter::Value<String> }
  ArrangementsDynamodbTableName: { Type: AWS::SSM::Parameter::Value<String> }
  ArrangementsDynamodbAccessRoleArn: { Type: AWS::SSM::Parameter::Value<String> }
  DovetailCdnLogsKinesisStreamArn: { Type: String }
  DovetailCountedKinesisStreamArn: { Type: String }
  SharedRedisReplicationGroupEndpointAddress: { Type: String }
  SharedRedisReplicationGroupEndpointPort: { Type: String }
  SharedRedisClientSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  CountsFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        The security group for ${EnvironmentType} Dovetail Counts Lambda
        function that allows all outbound traffic
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_dovetail-counts_function" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }
      VpcId: !Ref VpcId

  CountsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} Dovetail Counts processes Dovetail CDN log data from
        a Kinesis stream and sends the results to another Kinesis stream
      Environment:
        Variables:
          ARRANGEMENTS_DDB_ACCESS_ROLE: !Ref ArrangementsDynamodbAccessRoleArn
          ARRANGEMENTS_DDB_REGION: !Ref ArrangementsDynamodbRegion
          ARRANGEMENTS_DDB_TABLE: !Ref ArrangementsDynamodbTableName
          KINESIS_IMPRESSION_STREAM: !Ref DovetailCountedKinesisStreamArn
          REDIS_URL: !Sub cluster://${SharedRedisReplicationGroupEndpointAddress}:${SharedRedisReplicationGroupEndpointPort}
      Events:
        CountsBytesKinesisTrigger:
          Properties:
            BatchSize: 100
            BisectBatchOnFunctionError: true
            Enabled: true
            StartingPosition: LATEST
            Stream: !Ref DovetailCdnLogsKinesisStreamArn
          Type: Kinesis
      Handler: index.handler
      Layers:
        - Fn::If:
            - IsProduction
            - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38
            - !Ref AWS::NoValue
      MemorySize: 2000
      Runtime: nodejs16.x
      Policies:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Resource: !Split [",", !Ref ArrangementsDynamodbAccessRoleArn]
          Version: "2012-10-17"
        - Statement:
            - Action:
                - kinesis:DescribeStream
                - kinesis:PutRecord
                - kinesis:PutRecords
              Effect: Allow
              Resource: !Ref DovetailCountedKinesisStreamArn
          Version: "2012-10-17"
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Counts
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt CountsFunctionSecurityGroup.GroupId
          - !Ref KinesisStreamsEndpointAccessSecurityGroupId
          - !Ref StsEndpointAccessSecurityGroupId
          - !Ref SharedRedisClientSecurityGroupId
        SubnetIds:
          - !Ref VpcPrivateSubnet1Id
          - !Ref VpcPrivateSubnet2Id
          - !Ref VpcPrivateSubnet3Id
  CountsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${CountsFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }
  CountsFunctionElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Counts] Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Counts Lambda function is failing, which
        could delay metrics, pingbacks, etc.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CountsFunction
      EvaluationPeriods: 3
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  CountsFunctionElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt CountsFunctionElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }

  CountsFunctionKinesisIteratorBehindAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Counts] Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR FALLING BEHIND (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Counts Lambda function's Kinesis iterator
        age is higher than normal, which likely means some CDN logs are having
        trouble processing.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CountsFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 900000 # milliseconds
      TreatMissingData: notBreaching
  CountsFunctionKinesisIteratorBehindAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt CountsFunctionKinesisIteratorBehindAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }
  CountsFunctionKinesisIteratorStalledAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub FATAL [Dovetail-Counts] Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR STALLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Counts Lambda function's Kinesis iterator
        is significantly delayed, and is likely to continue to fall behind
        without intervention.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CountsFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 3600000 # milliseconds
      TreatMissingData: notBreaching
  CountsFunctionKinesisIteratorStalledAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt CountsFunctionKinesisIteratorStalledAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }

  CountsFunctionWarnLevelLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $._logLevel = "warn" }'
      LogGroupName: !Ref CountsFunctionLogGroup
      MetricTransformations:
        # TODO Add dimensions
        - MetricName: !Sub warns_${CountsFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"
  CountsFunctionLoggedWarnAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Counts] Lambda function <${EnvironmentTypeAbbreviation}> LOGGING WARNINGS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Counts Lambda function has logged some
        warnings, which could indicate invalid input data or less important
        operations that can't be retried.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      MetricName: !Sub warns_${CountsFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  CountsFunctionLoggedWarnAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt CountsFunctionLoggedWarnAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref CountsFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }

  CountsFunctionErrorLevelLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $._logLevel = "error" }'
      LogGroupName: !Ref CountsFunctionLogGroup
      MetricTransformations:
        # TODO Add dimensions
        - MetricName: !Sub errors_${CountsFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"
  CountsFunctionLoggedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Counts] Lambda function <${EnvironmentTypeAbbreviation}> LOGGED ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Counts Lambda function has logged some
        errors during execution, which likely indicate operations that failed
        and won't be retried.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      MetricName: !Sub errors_${CountsFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  CountsFunctionLoggedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt CountsFunctionLoggedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref CountsFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }

  CountsFunctionMissingArrangementLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.errorName = "ArrangementNotFoundError" }'
      LogGroupName: !Ref CountsFunctionLogGroup
      MetricTransformations:
        # TODO Add dimensions
        - MetricName: !Sub missing_arrangement_${CountsFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"
  CountsFunctionMissingArrangementAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Counts] Lambda function <${EnvironmentTypeAbbreviation}> MISSING ARRANGEMENTS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Counts Lambda function is trying to process
        data for downloads but cannot find the associated arrangement data.
        This is unusual.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: !Sub missing_arrangement_${CountsFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 300
      Statistic: Sum
      Threshold: 100
      TreatMissingData: notBreaching
  CountsFunctionMissingArrangementAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt CountsFunctionMissingArrangementAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref CountsFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }

  CountsFunctionKinesisFailureLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.errorName = "KinesisPutError" }'
      LogGroupName: !Ref CountsFunctionLogGroup
      MetricTransformations:
        # TODO Add dimensions
        - MetricName: !Sub kinesis_failure_${CountsFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "$.count"
  CountsFunctionKinesisFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Counts] Lambda function <${EnvironmentTypeAbbreviation}> KINESIS PUT FAILURES (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Counts Lambda function is experiencing
        a significant number of PUT failures when trying to send records to the
        counted bytes Kinesis stream. No data has been lost, and the PUTs will
        retry.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 5
      MetricName: !Sub kinesis_failure_${CountsFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 60
      Statistic: Sum
      Threshold: 100
      TreatMissingData: notBreaching
  CountsFunctionKinesisFailureAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt CountsFunctionKinesisFailureAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref CountsFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Counts }

  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub |-
        {
          "widgets": [
            {
              "height": 5,
              "width": 16,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${CountsFunction}", { "label": "Invocations" } ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${CountsFunction}", { "label": "[max: ${!MAX}] Invocation errors", "yAxis": "right" } ],
                  [ "${kMetricFilterNamespace}", "warns_${CountsFunction}", { "label": "[max: ${!MAX}] Logged warns", "yAxis": "right" } ],
                  [ "${kMetricFilterNamespace}", "errors_${CountsFunction}", { "label": "[max: ${!MAX}] Logged errors", "yAxis": "right" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Function Health",
                "period": 60,
                "liveData": true,
                "stat": "Sum"
              }
            },
            {
              "height": 5,
              "width": 8,
              "y": 0,
              "x": 16,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "IteratorAge", "FunctionName", "${CountsFunction}", { "label": "[max: ${!MAX}] Age" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Function Iterator Age",
                "period": 60,
                "liveData": true,
                "stat": "Maximum"
              }
            }
          ]
        }
      DashboardName: !Sub ${RootStackName}-${AWS::Region}-Dovetail-Counts
