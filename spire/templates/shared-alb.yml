# stacks/shared-alb.yml
AWSTemplateFormatVersion: "2010-09-09"

# TODO Launching this is blocked by needing to manually add DNS records for
# - !Sub "*.${EnvironmentTypeAbbreviation}-${VpcId}.prx.tech"
# - !Sub "*.cdn.${EnvironmentTypeAbbreviation}-${VpcId}.prx.tech"
# in the certificate. See if there's a way to eliminate that

Description: >-
  Creates application load balancers that can be reused for multiple
  applications, using host- and path-based routing rules.

Mappings:
  ElbService:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    us-east-1:
      AccountId: "127311923021"
    us-east-2:
      AccountId: "033677994240"
    us-west-1:
      AccountId: "027434742980"
    us-west-2:
      AccountId: "797873946194"
    af-south-1:
      AccountId: "098369216593"
    ca-central-1:
      AccountId: "985666609251"
    eu-central-1:
      AccountId: "054676820928"
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-south-1:
      AccountId: "635631232127"
    eu-west-3:
      AccountId: "009996457667"
    eu-north-1:
      AccountId: "897822967062"
    ap-east-1:
      AccountId: "754344448648"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-northeast-3:
      AccountId: "383597477331"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    me-south-1:
      AccountId: "076674570225"
    sa-east-1:
      AccountId: "507241528517"

Parameters:
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  NestedChangeSetScrubbingResourcesState: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  VpcPublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  SharedGlueDatabaseName: { Type: String }
  LatencyGroupDomain: { Type: String }
  MaintenanceMode: { Type: String, Default: "Off" }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  IsMaintenanceMode: !Equals [!Ref MaintenanceMode, "On"]
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If [IsProduction, "*.prx.org", "*.staging.prx.tech"]
      SubjectAlternativeNames:
        - !If [IsProduction, "*.dovetail.prx.org", "*.dovetail.staging.prx.tech"]
        - !If [IsProduction, "*.prxu.org", "*.staging.prxu.org"]
        - !If [IsProduction, "*.prx.tech", !Ref "AWS::NoValue"]
        - !If [IsProduction, "*.prx.mx", !Ref "AWS::NoValue"]
        - !If [IsProduction, "*.pri.org", !Ref "AWS::NoValue"]
        - !If [IsProduction, "*.theworld.org", !Ref "AWS::NoValue"]
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared_${Alb.LoadBalancerName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      ValidationMethod: DNS

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Security group for the ${EnvironmentType} shared ALB. Only the ALB
        should belong to it. Controls traffic into the ALB (i.e., internet) and
        from the ALB to targets (EC2 instances, etc), By default, allows all
        HTTP inbound traffic.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: ::/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIpv6: ::/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-alb_inbound_forwarding" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      VpcId: !Ref VpcId

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: !If [IsProduction, 14, 3]
            Status: Enabled
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
  AccessLogsBucketPolicy:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !GetAtt AccessLogsBucket.Arn
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
          - Action: s3:PutObject
            Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${ElbAccountId}:root
                - ElbAccountId: !FindInMap [ElbService, !Ref "AWS::Region", AccountId]
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
        Version: "2012-10-17"
  AccessLogsGlueTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref SharedGlueDatabaseName
      TableInput:
        Description: !Sub >-
          ${EnvironmentType} shared ALB logs
        Name: shared-alb
        Parameters:
          projection.enabled: "true"
          projection.date.type: date
          projection.date.range: 2021/01/01,NOW
          projection.date.format: yyyy/MM/dd
          projection.date.interval: "1"
          projection.date.interval.unit: DAYS
          storage.location.template: !Sub s3://${AccessLogsBucket}/AWSLogs/${AWS::AccountId}/elasticloadbalancing/${AWS::Region}/${!date}
        PartitionKeys:
          - Name: date
            Type: string
        StorageDescriptor:
          Columns:
            - Name: type
              Type: string
            - Name: time
              Type: string
            - Name: elb
              Type: string
            - Name: client_ip
              Type: string
            - Name: client_port
              Type: int
            - Name: target_ip
              Type: string
            - Name: target_port
              Type: int
            - Name: request_processing_time
              Type: double
            - Name: target_processing_time
              Type: double
            - Name: response_processing_time
              Type: double
            - Name: elb_status_code
              Type: string
            - Name: target_status_code
              Type: string
            - Name: received_bytes
              Type: bigint
            - Name: sent_bytes
              Type: bigint
            - Name: request_method
              Type: string
            - Name: request_uri
              Type: string
            - Name: request_http_version
              Type: string
            - Name: user_agent
              Type: string
            - Name: ssl_cipher
              Type: string
            - Name: ssl_protocol
              Type: string
            - Name: target_group_arn
              Type: string
            - Name: trace_id
              Type: string
            - Name: domain_name
              Type: string
            - Name: chosen_cert_arn
              Type: string
            - Name: matched_rule_priority
              Type: string
            - Name: request_creation_time
              Type: string
            - Name: actions_executed
              Type: string
            - Name: redirect_url
              Type: string
            - Name: lambda_error_reason
              Type: string
            - Name: target_port_list
              Type: string
            - Name: target_status_code_list
              Type: string
            - Name: classification
              Type: string
            - Name: classification_reason
              Type: string
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub s3://${AccessLogsBucket}/AWSLogs/${AWS::AccountId}/elasticloadbalancing/${AWS::Region}/
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            Parameters:
              input.regex: >-
                ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*):([0-9]*) ([^ ]*)[:-]([0-9]*) ([-.0-9]*) ([-.0-9]*) ([-.0-9]*) (|[-0-9]*) (-|[-0-9]*) ([-0-9]*) ([-0-9]*) \"([^ ]*) ([^ ]*) (- |[^ ]*)\" \"([^\"]*)\" ([A-Z0-9-]+) ([A-Za-z0-9.-]*) ([^ ]*) \"([^\"]*)\" \"([^\"]*)\" \"([^\"]*)\" ([-.0-9]*) ([^ ]*) \"([^\"]*)\" \"([^\"]*)\" \"([^ ]*)\" \"([^\s]+?)\" \"([^\s]+)\" \"([^ ]*)\" \"([^ ]*)\"
              serialization.format: "1"
            SerializationLibrary: org.apache.hadoop.hive.serde2.RegexSerDe
        TableType: EXTERNAL_TABLE
  AccessLogsRecentQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref SharedGlueDatabaseName
      Description: >-
        View recent ALB requests using the table's date partitions
      Name: !Sub ${EnvironmentType} Shared ALB Recent Requests
      QueryString: !Sub >-
        SELECT *
        FROM "${SharedGlueDatabaseName}"."${AccessLogsGlueTable}"
        WHERE "date" > date_format(current_date - interval '1' day, '%Y/%m/%d')
        ORDER BY time ASC

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - AccessLogsBucketPolicy # Don't try to create the ALB until the bucket grants logging permissions
    Properties:
      IpAddressType: dualstack
      LoadBalancerAttributes:
        # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes
        - Key: idle_timeout.timeout_seconds
          Value: "150"
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref VpcPublicSubnet1Id
        - !Ref VpcPublicSubnet2Id
        - !Ref VpcPublicSubnet3Id
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  HttpListener:
    # Generally all HTTP traffic is redirected to HTTPS
    # The Castle (legacy) does have an HTTP listener rule
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: HTTPS
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - FixedResponseConfig:
            StatusCode: "404"
          Type: fixed-response
      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

  MaintenanceModeListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: IsMaintenanceMode
    Properties:
      Actions:
        - RedirectConfig:
            Host: status.prx.org
            Port: "443"
            Path: "/"
            Protocol: HTTPS
            Query: ""
            StatusCode: HTTP_301
          Type: redirect
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn: !Ref HttpsListener
      Priority: 20

  AlbHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Shared] Load balancer <${EnvironmentTypeAbbreviation}> RETURNING 5XX ERRORS
      AlarmDescription: !Sub >-
        There has been an unexpected volume of HTTP 5XX error codes originating
        from the shared ${EnvironmentType} application load balancer. This does
        not include responses generated by ALB target groups (i.e.,
        applications), and could indicate an operational issue with the load
        balancer.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt Alb.LoadBalancerFullName
      EvaluationPeriods: 5
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 5
      TreatMissingData: notBreaching
  AlbHttp5xxAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AlbHttp5xxAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  LatencyGroupDomainRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub >-
        Latency record for the shared ${EnvironmentType} ALB
      HostedZoneName: prx.tech.
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
          Name: !Ref LatencyGroupDomain
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: AAAA
        - AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
          Name: !Ref LatencyGroupDomain
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: A

Outputs:
  AlbArn:
    Description: The Amazon Resource Name (ARN) of the load balancer
    Value: !Ref Alb
  AlbName:
    Description: >-
      The full name of the load balancer. For example, my-load-balancer
    Value: !GetAtt Alb.LoadBalancerName
  AlbFullName:
    Description: >-
      The full name of the load balancer. For example,
      app/my-load-balancer/50dc6c495c0c9188
    Value: !GetAtt Alb.LoadBalancerFullName
  AlbDnsName:
    Description: >-
      The DNS name for the load balancer. For example,
      my-load-balancer-424835706.us-west-2.elb.amazonaws.com
    Value: !GetAtt Alb.DNSName
  AlbDualstackDnsName:
    Description: >-
      The dualstack DNS name for the load balancer. For example,
      dualstack.my-load-balancer-424835706.us-west-2.elb.amazonaws.com
    Value: !Sub dualstack.${Alb.DNSName}
  AlbCanonicalHostedZoneId:
    Description: >-
      The ID of the Amazon Route 53 hosted zone associated with the load
      balancer. For example, Z2P70J7EXAMPLE
    Value: !GetAtt Alb.CanonicalHostedZoneID
  InsecureHttpListenerArn:
    Description: The Amazon Resource Name (ARN) of the listener
    Value: !Ref HttpListener
  HttpsListenerArn:
    Description: The Amazon Resource Name (ARN) of the listener
    Value: !Ref HttpsListener
  LoadBalancerSecurityGroupId:
    Description: >-
      The group ID of the ALB security group that allows inbound web traffic
      and outbound traffic to instances
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId
