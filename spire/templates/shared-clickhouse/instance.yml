# stacks/shared-clickhouse/intance.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates an EC2 server running Clickhouse database.

Parameters:
  AuthorizedKeys: { Type: CommaDelimitedList }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  GoogleStorageBucket: { Type: AWS::SSM::Parameter::Value<String> }
  GoogleStorageHmacKeyId: { Type: AWS::SSM::Parameter::Value<String>, NoEcho: true }
  GoogleStorageHmacKeySecret: { Type: AWS::SSM::Parameter::Value<String>, NoEcho: true }
  NestedChangeSetScrubbingResourcesState: { Type: String }
  RegionMode: { Type: String }
  AuguryDatabase: { Type: AWS::SSM::Parameter::Value<String> }
  AuguryPassword: { Type: AWS::SSM::Parameter::Value<String>, NoEcho: true }
  AuguryUsername: { Type: AWS::SSM::Parameter::Value<String> }
  MonitoringPassword: { Type: AWS::SSM::Parameter::Value<String>, NoEcho: true }
  MonitoringUsername: { Type: AWS::SSM::Parameter::Value<String> }
  RollupsDatabase: { Type: AWS::SSM::Parameter::Value<String> }
  RollupsPassword: { Type: AWS::SSM::Parameter::Value<String>, NoEcho: true }
  RollupsUsername: { Type: AWS::SSM::Parameter::Value<String> }
  RootStackId: { Type: String }
  RootStackName: { Type: String }
  VpcPublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  SharedClickhouseInstanceSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  CloudWatchLogsEndpointAccessSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }

Conditions:
  EnableNestedChangeSetScrubbingResources: !Equals [!Ref NestedChangeSetScrubbingResourcesState, Enabled]
  IsPrimaryRegion: !Equals [!Ref RegionMode, Primary]
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  NestedChangeSetScrubber: { Type: AWS::SNS::Topic, Condition: EnableNestedChangeSetScrubbingResources }

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: IsPrimaryRegion
    Properties:
      Roles:
        - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Condition: IsPrimaryRegion
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - cloudwatch:PutMetricData
                  - ec2:DescribeTags
                Effect: Allow
                Resource: "*"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:PutRetentionPolicy
                Effect: Allow
                Resource: !Sub arn:aws:logs:*:*:log-group:/prx/clickhouse/${EnvironmentTypeAbbreviation}/*
            Version: "2012-10-17"
          PolicyName: CloudWatchAgentPermissions
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Clickhouse }

  KeyPair:
    Type: AWS::EC2::KeyPair
    Condition: IsPrimaryRegion
    Properties:
      KeyName: !Sub ${RootStackName}-clickhouse-2024-04-16
      KeyType: ed25519
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Clickhouse }

  ClickhouseServer5:
    Type: AWS::EC2::Instance
    Condition: IsPrimaryRegion
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_authorized_keys:
              # For more information, see:
              # https://github.com/PRX/internal/wiki/AWS:-Developer-Access
              command: !Sub
                - |-
                  #!/bin/bash
                  echo "Adding developer public keys to authorized_keys"
                  truncate -s 0 /home/ec2-user/.ssh/authorized_keys
                  echo "${developer_keys}" >> /home/ec2-user/.ssh/authorized_keys
                - developer_keys: !Join ["\n", !Ref AuthorizedKeys]
            02_install_clickhouse:
              # https://clickhouse.com/docs/en/install#from-rpm-packages
              command: |
                #!/bin/bash
                if ! command -v clickhouse-server &> /dev/null; then
                  yum-config-manager --add-repo https://packages.clickhouse.com/rpm/clickhouse.repo
                  yum install -y clickhouse-server clickhouse-client
                  systemctl enable clickhouse-server
                  systemctl start clickhouse-server
                fi
            03_setup_schema:
              # https://github.com/PRX/castlehouse/tree/main
              command: !Sub |
                #!/bin/bash
                # Rollups
                export DBNAME=${RollupsDatabase}
                if test -z "$(clickhouse-client -d $DBNAME -q 'show tables')"; then
                  clickhouse-client -q "CREATE DATABASE $DBNAME"
                  clickhouse-client -d $DBNAME --queries-file <(curl -s https://raw.githubusercontent.com/PRX/castlehouse/main/schema/tables.sql)
                  clickhouse-client -d $DBNAME --queries-file <(curl -s https://raw.githubusercontent.com/PRX/castlehouse/main/schema/mv_backfill.sql)
                  clickhouse-client -d $DBNAME --queries-file <(curl -s https://raw.githubusercontent.com/PRX/castlehouse/main/schema/mv_increments.sql)
                fi
                # Augury
                export DBNAME=${AuguryDatabase}
                if test -z "$(clickhouse-client -d $DBNAME -q 'show tables')"; then
                  clickhouse-client -q "CREATE DATABASE $DBNAME"
                fi
            04_setup_users:
              command: !Sub |
                #!/bin/bash
                # Monitoring
                clickhouse-client -q "CREATE USER OR REPLACE ${MonitoringUsername} IDENTIFIED BY '${MonitoringPassword}' DEFAULT ROLE monitoring"
                # Readonly
                clickhouse-client -q "CREATE USER OR REPLACE ${RollupsUsername} IDENTIFIED BY '${RollupsPassword}' SETTINGS PROFILE 'readonly'"
                clickhouse-client -q "GRANT SHOW TABLES, SELECT ON ${RollupsDatabase}.* TO ${RollupsUsername}"
                clickhouse-client -q "GRANT SHOW TABLES, SELECT ON ${AuguryDatabase}.* TO ${RollupsUsername}"
                # Augury
                clickhouse-client -q "CREATE USER OR REPLACE ${AuguryUsername} IDENTIFIED BY '${AuguryPassword}'"
                clickhouse-client -q "GRANT ALL ON ${AuguryDatabase}.* TO ${AuguryUsername}"
          files:
            /etc/cfn/cfn-hup.conf:
              # Create a configuration file for cfn-hup
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-hup.html#cfn-hup-config-file
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=5
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              # Define the actions to run when the resource metadata (found at
              # the given path) changes during a stack update.
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-hup.html#cfn-hup-hook-file
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ClickhouseServer5.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ClickhouseServer5
                runas=root
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent": {
                    "metrics_collection_interval": 60
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "auto_removal": true,
                            "file_path": "/var/log/clickhouse-server/clickhouse-server.log",
                            "log_group_name": "/prx/clickhouse/${EnvironmentTypeAbbreviation}/server.log",
                            "log_stream_name": "{instance_id}",
                            "retention_in_days": 30
                          },
                          {
                            "auto_removal": true,
                            "file_path": "/var/log/clickhouse-server/clickhouse-server.err.log",
                            "log_group_name": "/prx/clickhouse/${EnvironmentTypeAbbreviation}/server.err.log",
                            "log_stream_name": "{instance_id}",
                            "retention_in_days": 30
                          }
                        ]
                      }
                    }
                  },
                  "metrics": {
                    "aggregation_dimensions": [["InstanceId", "Environment"]],
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "Environment": "${EnvironmentType}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "cpu": {
                        "measurement": ["cpu_usage_guest", "cpu_usage_nice"],
                        "metrics_collection_interval": 60,
                        "resources": ["*"]
                      },
                      "disk": {
                        "measurement": ["used_percent"],
                        "metrics_collection_interval": 60,
                        "resources": ["*"]
                      },
                      "mem": {
                        "measurement": ["mem_used_percent"],
                        "metrics_collection_interval": 60
                      }
                    },
                    "namespace": "PRX/Clickhouse"
                  }
                }
              owner: root
              group: root
            /etc/systemd/system/clickhouse-server.service.d/override.conf:
              content: !Sub |
                [Service]
                Environment="CLICKHOUSE_DB=${RollupsDatabase}"
                Environment="CLICKHOUSE_READONLY_PASS=${RollupsPassword}"
                Environment="GOOGLE_STORAGE_BUCKET_ENDPOINT=https://storage.googleapis.com/${GoogleStorageBucket}"
                Environment="GOOGLE_STORAGE_HMAC_KEY_ID=${GoogleStorageHmacKeyId}"
                Environment="GOOGLE_STORAGE_HMAC_KEY_SECRET=${GoogleStorageHmacKeySecret}"
            /etc/clickhouse-server/config.d/override-config.xml:
              source: https://raw.githubusercontent.com/PRX/castlehouse/main/override-config.xml
            /etc/clickhouse-server/users.d/override-users.xml:
              source: https://raw.githubusercontent.com/PRX/castlehouse/main/override-users.xml
          packages:
            yum:
              jq: []
              bind-utils: []
              amazon-cloudwatch-agent: []
          services:
            sysvinit:
              cfn-hup:
                # Starts the cfn-hup service, and restarts the service if
                # cfn-init modifies the specified configuration files
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              amazon-cloudwatch-agent:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 100
      CreditSpecification:
        CPUCredits: unlimited
      DisableApiTermination: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-05adadbbe8cf9fb48
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !If [IsProduction, t4g.large, t4g.medium]
      KeyName: !Ref KeyPair
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SharedClickhouseInstanceSecurityGroupId
            - !Ref CloudWatchLogsEndpointAccessSecurityGroupId
          SubnetId: !Ref VpcPublicSubnet1Id
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}-clickhouse_server" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Clickhouse }
      UserData:
        # User data runs commands on EC2 instances when they are launched. To
        # support configuration updates on running EC2 instance, the user
        # data should primarily be used to run cfn-init. Any further launch
        # scripts or tasks should be defined in the resource metadata that
        # cfn-init loads, and that cfn-hup watches for changes.
        # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#multi-part_user_data
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html#cfn-helper-scripts-reference-amazon-amis
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            # The logs for this are found in: /var/log/cloud-init-output.log
            # Except the cfn-signal seems to get logged to /var/log/cfn-init.log
            # along with the rest of the cfn-init logs
            #
            # Despite what the docs say, the CloudFormation helper scripts are not preinstalled, so we install them
            # with aws-cfn-bootstrap. aws-cli fails to install as part of the cfn-init packages, so it's installed
            # here, even though they both use yum. Other packages should be installed through cfn-init.
            yum install -y aws-cfn-bootstrap aws-cli

            # --resource is the logical ID of the resource in a CloudFormation stack (generally a stack launched from
            # this template) that includes AWS::CloudFormation::Init metadata. By convention, this is the same
            # resource where this user data script (what you're reading right now) is defined.
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ClickhouseServer5

Outputs:
  HttpPort:
    Description: Clickhouse HTTP Port
    Value: "8123"
  PrivateDnsName:
    Description: The Private DNS name of the clickhouse server
    Value: !If [IsPrimaryRegion, !GetAtt ClickhouseServer5.PrivateDnsName, ""]
  PrivateIp:
    Description: The Private IP address of the clickhouse server
    Value: !If [IsPrimaryRegion, !GetAtt ClickhouseServer5.PrivateIp, ""]
