# cd/cd.yml
# This creates a CodePipeline pipeline (and associates resources) for handling
# deployments and testing of the platform. It watches three sources for changes,
# which trigger the pipeline: the meta.prx.org repo (used for acceptance
# testing), the Infrastructure repo (for when apps are added or changed), and
# the S3 bucket that contains the template configuration for the root stack that
# the pipeline ultimately launches. The root stack uses a CloudFormation
# template that includes many nested stacks for the various apps and services
# that are a part of the platform.
# In order for the root stack to launch the nested stacks, the templates for
# those stacks must be available in S3. This pipeline copies the entire
# Infrastructure artifact to S3 (into a bucket defined by the
# InfrastructureSourceBucket parameter) for that purpose.
# This would be deployed in any region where you want to deploy the platform
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates CodePipeline to handle infrastructure testing and deploys
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
          - InfrastructureNotificationsStackName
          - SecretsStackName
          - CodeStarConnectionArn
      - Label:
          default: Infrastructure Config
        Parameters:
          - InfrastructureConfigStagingKey
          - InfrastructureConfigProductionKey
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      InfrastructureNotificationsStackName:
        default: Notifications stack name
      SecretsStackName:
        default: Secrets stack name
      InfrastructureConfigStagingKey:
        default: Staging S3 object key
      InfrastructureConfigProductionKey:
        default: Production S3 object key
      CodeStarConnectionArn:
        default: CodeStar Connection ARN
Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  InfrastructureNotificationsStackName:
    Default: infrastructure-notifications
    Description: The name of a previously launched notifications stack
    Type: String
  SecretsStackName:
    Default: infrastructure-secrets
    Description: The name of a previously launched secrets stack
    Type: String
  InfrastructureConfigStagingKey:
    Default: template-config-staging.zip
    Description: >-
      The S3 object key for the staging template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  InfrastructureConfigProductionKey:
    Default: template-config-production.zip
    Description: >-
      The S3 object key for the production template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  CodeStarConnectionArn:
    Type: String
    Description: >-
      The Arn of a previously-created and configured CodeStar Connection, which
      has access to the any Git repositories used as sources in the template
Resources:
  # Common IAM policies
  SlackRelaySnsPublishOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              - Fn::ImportValue: !Sub "${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn"
        Version: "2012-10-17"
  CodePipelineJobResultWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
  CodePipelineStateReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codepipeline:GetPipelineState
              - codepipeline:GetPipelineExecution
              - codepipeline:ListActionExecutions
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
        Version: "2012-10-17"
  CloudFormationReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudformation:DescribeChangeSet
              - cloudformation:DescribeStacks
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
  CloudWatchMetricWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
  StagingConfigObjectReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
        Version: "2012-10-17"
  ProductionConfigObjectReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigProductionKey]]
        Version: "2012-10-17"
  ProductionConfigObjectReadWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigProductionKey]]
        Version: "2012-10-17"
  SnapshotsBucketWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSnapshotsBucket", "/*"]]
        Version: "2012-10-17"
  SourceBucketWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/*"]]
        Version: "2012-10-17"
  ArtifactBucketReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub ${ArtifactStore.Arn}/*
        Version: "2012-10-17"
  ArtifactBucketReadWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource: !Sub ${ArtifactStore.Arn}/*
        Version: "2012-10-17"
  # CodePipeline Approvals
  # Production changeset deploys are behind a manual approval action. That
  # action publishes a message to this SNS topic, of which this Lambda function
  # is a subscriber. The function generates an interactive Slack message to
  # facilitate the approval.
  CodePipelineApprovalsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  PipelineApprovalNotificationHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/pipeline-approval-notification-handler/
      Description: >-
        Receives notifications from CodePipeline when approval is required, and
        builds a messages to alert externally
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      Events:
        SnsMessages:
          Properties:
            Topic: !Ref CodePipelineApprovalsSnsTopic
          Type: SNS
      Handler: index.handler
      MemorySize: 256
      Policies:
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
        - Statement:
            - Action:
                - cloudformation:DescribeChangeSet
                - cloudformation:DescribeStacks
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 5
  PipelineApprovalNotificationHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PipelineApprovalNotificationHandlerFunction}
      RetentionInDays: 14
  PipelineApprovalNotificationHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Pipeline Approval Notification"
      AlarmActions:
        - Fn::ImportValue: !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue: !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue: !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >-
        The error rate on the approval notification handler lambda has exceeded
        0 in the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref PipelineApprovalNotificationHandlerFunction
  # Pipeline
  ArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  CdPipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # CodePipeline seems to need access to special buckets
        - PolicyDocument:
            Statement:
              - Action: s3:PutObject
                Effect: Allow
                Resource: arn:aws:s3:::codepipeline*
            Version: "2012-10-17"
          PolicyName: GenericCodePipelineS3PutPolicy
        # Let CodePipeline read and write artifacts
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactStore}
                  - !Sub arn:aws:s3:::${ArtifactStore}/*
            Version: "2012-10-17"
          PolicyName: ArtifactStoreFullAccess
        # CodePipeline needs access to objects that are used in source actions
        - PolicyDocument:
            Statement:
              - Action: s3:GetBucketVersioning
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket"]]
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
            Version: "2012-10-17"
          PolicyName: S3SourceActionAccessPolicy
        # For Approval actions
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: !Ref CodePipelineApprovalsSnsTopic
            Version: "2012-10-17"
          PolicyName: SnsApprovalsPolicy
        # To allow the pipeline to use a CodeStar Connection
        - PolicyDocument:
            Statement:
              - Action: codestar-connections:*
                Condition:
                  ForAllValues:StringEquals:
                    codestar-connections:PassedToService: codepipeline.amazonaws.com
                Effect: Allow
                Resource: !Ref CodeStarConnectionArn
            Version: "2012-10-17"
          PolicyName: CodeStarConnectionPolicy
        # Allow CodePipeline to manipulate CloudFormation root stacks
        - PolicyDocument:
            Statement:
              - Action: iam:PassRole
                Effect: Allow
                Resource: !GetAtt CloudFormationIamRole.Arn
              # Full access for staging stacks
              - Action: cloudformation:*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging/*
              # Production stacks shouldn't get deleted
              - Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:UpdateStack
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production/*
            Version: "2012-10-17"
          PolicyName: RootStackCloudFormationAccess
        # Allows CodePipeline to invoke Lambda function actions
        - PolicyDocument:
            Statement:
              - Action: lambda:ListFunctions
                Effect: Allow
                Resource: "*"
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource:
                  - !GetAtt InfrastructureRepoSourceS3SyncFunction.Arn
                  - !GetAtt EnvironmentStateCaptureFunction.Arn
                  - !GetAtt ProductionConfigPseudoSourceFunction.Arn
                  - !GetAtt DeploymentNotificationFunction.Arn
                  - !GetAtt ChangeSetDeltaNotificationFunction.Arn
            Version: "2012-10-17"
          PolicyName: LambdaRolePolicy
        # Lets CodePipeline start CodeBuild (for acceptance tests, etc)
        - PolicyDocument:
            Statement:
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource:
                  - !GetAtt AcceptanceTestsCodeBuildProject.Arn
                  - !Sub ${AcceptanceTestsCodeBuildProject.Arn}/*
            Version: "2012-10-17"
          PolicyName: CodeBuildPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !GetAtt CdPipelineIamRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: PRX/Infrastructure
                BranchName: master
                OutputArtifactFormat: CODE_ZIP
              Namespace: infrastructure_repo
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: MetaRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: PRX/meta.prx.org
                BranchName: master
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: MetaRepoSourceArtifact
              RunOrder: 1
            - Name: StagingConfig
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                PollForSourceChanges: false
                S3Bucket:
                  Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
                S3ObjectKey: !Ref InfrastructureConfigStagingKey
              OutputArtifacts:
                - Name: TemplateConfigStagingZipArtifact
              RunOrder: 1
        - Name: Housekeeping
          Actions:
            - Name: InfrastructureSync
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref InfrastructureRepoSourceS3SyncFunction
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: DeploymentNotification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref DeploymentNotificationFunction
                UserParameters: |
                  {
                    "stage": "Housekeeping",
                    "info": "start"
                  }
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
                - Name: TemplateConfigStagingZipArtifact
              RunOrder: 1
        - Name: Staging
          Actions:
            - Name: CreateStagingChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub ${AWS::StackName}RootStagingChangeSet
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: !Sub ${AWS::StackName}-root-staging
                ParameterOverrides: !Sub |
                  {
                    "InfrastructureStorageStackName": "${InfrastructureStorageStackName}",
                    "NotificationsStackName": "${InfrastructureNotificationsStackName}",
                    "SecretsStackName": "${SecretsStackName}",
                    "InfrastructureGitCommit": "#{infrastructure_repo.CommitId}",
                    "PipelineExecutionNonce": "#{codepipeline.PipelineExecutionId}"
                  }
                TemplateConfiguration: TemplateConfigStagingZipArtifact::staging.json
                TemplatePath: InfrastructureRepoSourceArtifact::stacks/root.yml
              InputArtifacts:
                - Name: TemplateConfigStagingZipArtifact
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: StagingDeltaNotification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref ChangeSetDeltaNotificationFunction
                UserParameters: !Sub |
                  {
                    "StackName": "${AWS::StackName}-root-staging",
                    "ChangeSetName": "${AWS::StackName}RootStagingChangeSet",
                    "Stage": "Staging"
                  }
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
                - Name: TemplateConfigStagingZipArtifact
              RunOrder: 2
            - Name: ExecuteStagingChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}RootStagingChangeSet
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: !Sub ${AWS::StackName}-root-staging
              RunOrder: 3
            - Name: CaptureStagingState
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref EnvironmentStateCaptureFunction
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
                - Name: TemplateConfigStagingZipArtifact
              RunOrder: 4
            - Name: DeploymentNotification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref DeploymentNotificationFunction
                UserParameters: |
                  {
                    "stage": "Staging",
                    "info": "complete"
                  }
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
                - Name: TemplateConfigStagingZipArtifact
              RunOrder: 4
        - Name: Testing
          Actions:
            - Name: Acceptance
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref AcceptanceTestsCodeBuildProject
              InputArtifacts:
                - Name: MetaRepoSourceArtifact
              OutputArtifacts:
                - Name: AcceptanceTestArtifact
              RunOrder: 1
        - Name: Production
          Actions:
            - Name: GetProductionConfig
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref ProductionConfigPseudoSourceFunction
              InputArtifacts:
                - Name: TemplateConfigStagingZipArtifact
              OutputArtifacts:
                - Name: TemplateConfigProductionZipArtifact
              RunOrder: 1
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub ${AWS::StackName}RootProductionChangeSet
                ParameterOverrides: !Sub |
                  {
                    "InfrastructureStorageStackName": "${InfrastructureStorageStackName}",
                    "NotificationsStackName": "${InfrastructureNotificationsStackName}",
                    "SecretsStackName": "${SecretsStackName}",
                    "InfrastructureGitCommit": "#{infrastructure_repo.CommitId}",
                    "PipelineExecutionNonce": "#{codepipeline.PipelineExecutionId}"
                  }
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: !Sub ${AWS::StackName}-root-production
                TemplateConfiguration: TemplateConfigProductionZipArtifact::production.json
                TemplatePath: InfrastructureRepoSourceArtifact::stacks/root.yml
              InputArtifacts:
                - Name: TemplateConfigProductionZipArtifact
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 2
            # TODO Production delta seem to work better as part of the approval
            # notification, just so the changes are always locked up to the
            # button. Still need the custom function for staging, though, but
            # for now they're duplicative.
            # - Name: ProductionDeltaNotification
            #   ActionTypeId:
            #     Category: Invoke
            #     Owner: AWS
            #     Provider: Lambda
            #     Version: 1
            #   Configuration:
            #     FunctionName: !Ref ChangeSetDeltaNotificationFunction
            #     UserParameters: !Sub |
            #       {
            #         "StackName": "${AWS::StackName}-root-production",
            #         "ChangeSetName": "${AWS::StackName}RootProductionChangeSet",
            #         "Stage": "Production"
            #       }
            #   InputArtifacts:
            #     - Name: InfrastructureRepoSourceArtifact
            #     - Name: TemplateConfigStagingZipArtifact
            #   RunOrder: 3
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              Configuration:
                NotificationArn: !Ref CodePipelineApprovalsSnsTopic
                CustomData: !Sub |
                  {
                    "StackName": "${AWS::StackName}-root-production",
                    "ChangeSetName": "${AWS::StackName}RootProductionChangeSet",
                    "AccountId": "${AWS::AccountId}"
                  }
              RunOrder: 3
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}RootProductionChangeSet
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: !Sub ${AWS::StackName}-root-production
              RunOrder: 4
            - Name: CaptureProductionState
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref EnvironmentStateCaptureFunction
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 5
            - Name: DeploymentNotification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref DeploymentNotificationFunction
                UserParameters: |
                  {
                    "stage": "Production",
                    "info": "complete"
                  }
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
                - Name: TemplateConfigStagingZipArtifact
              RunOrder: 5
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  # Pipeline Events
  CdPipelineEventsTargetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/pipeline-events-handler/
      Description: Copies Infrastructure repo artifact to S3
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      Events:
        PipelineEvents:
          Properties:
            Pattern:
              detail-type:
                - CodePipeline Pipeline Execution State Change
              resources:
                - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
              source:
                - aws.codepipeline
          Type: EventBridgeRule
        StageEvents:
          Properties:
            Pattern:
              detail-type:
                - CodePipeline Stage Execution State Change
              resources:
                - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
              source:
                - aws.codepipeline
          Type: EventBridgeRule
        ActionsEvents:
          Properties:
            Pattern:
              detail-type:
                - CodePipeline Action Execution State Change
              resources:
                - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
              source:
                - aws.codepipeline
          Type: EventBridgeRule
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Policies:
        - !Ref CodePipelineStateReadOnlyAccessPolicy
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
      Runtime: python3.8
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 8
  CdPipelineEventsTargetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CdPipelineEventsTargetFunction}
      RetentionInDays: 14
  CdPipelineEventsTargetErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Pipeline Events Handler"
      AlarmActions:
        - Fn::ImportValue: !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue: !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue: !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >-
        The error rate on the pipeline events handler lambda has exceeded
        0 in the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CdPipelineEventsTargetFunction
  # Pipeline S3 Trigger
  CdPipelineS3TriggerTrailStore:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  CdPipelineS3TriggerTrailStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CdPipelineS3TriggerTrailStore
      PolicyDocument:
        Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Resource: !Sub arn:aws:s3:::${CdPipelineS3TriggerTrailStore}
            Sid: AWSCloudTrailAclCheck
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Resource: !Sub arn:aws:s3:::${CdPipelineS3TriggerTrailStore}/AWSLogs/${AWS::AccountId}/*
            Sid: AWSCloudTrailWrite
        Version: "2012-10-17"
  CdPipelineS3TriggerTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - CdPipelineS3TriggerTrailStoreBucketPolicy
    Properties:
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - Fn::Sub:
                    - arn:aws:s3:::${BucketName}/
                    - BucketName:
                        Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          IncludeManagementEvents: false
          ReadWriteType: WriteOnly
      IsLogging: true
      IsMultiRegionTrail: false
      S3BucketName: !Ref CdPipelineS3TriggerTrailStore
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  CdPipelineS3TriggerIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: codepipeline:StartPipelineExecution
                Effect: Allow
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
            Version: "2012-10-17"
          PolicyName: LambdaPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  CdPipelineS3TriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        Triggers CD CodePipeline when CloudTrail sees changes in S3 on the
        staging template config
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
            - CopyObject
          userIdentity:
            sessionContext:
              sessionIssuer:
                arn:
                  # CodePipeline does a CopyObject when it pulls in an S3
                  # object as part of a Source action, using the pipeline's
                  # role. To prevent an infinite loop, those events need to be
                  # filtered out
                  - anything-but: !GetAtt CdPipelineIamRole.Arn
          resources:
            ARN:
              - Fn::Sub:
                  - arn:aws:s3:::${BucketName}/${ObjectId}
                  - ObjectId: !Ref InfrastructureConfigStagingKey
                    BucketName:
                      Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
      State: ENABLED
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          Id: !Sub ${AWS::StackName}.CdPipelineS3Trigger
          RoleArn: !GetAtt CdPipelineS3TriggerIamRole.Arn
  # Acceptance Test Pipeline Action
  AcceptanceTestsCodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # Allow CodeBuild to log to CloudWatch
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  # NOTE These need to stay in sync with the CodeBuild Project
                  # name from below
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AcceptanceTests
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AcceptanceTests:*
            Version: "2012-10-17"
          PolicyName: CodeBuildLogs
        # CodeBuild sources from CodePipeline artifacts, so it needs access
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource: !Sub arn:aws:s3:::${ArtifactStore}/*
            Version: "2012-10-17"
          PolicyName: ArtifactStoreBasicAccess
        - PolicyDocument:
            Statement:
              - Action: ssm:GetParameters
                Effect: Allow
                Resource: "*" # TODO
            Version: "2012-10-17"
          PolicyName: ParameterStorePolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - states:StartExecution
                  - states:DescribeExecution
                Effect: Allow
                Resource: "*" # TODO
            Version: "2012-10-17"
          PolicyName: PorterPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  AcceptanceTestsCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Runs acceptance tests for PRX platform
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 561178107736.dkr.ecr.us-east-1.amazonaws.com/meta.prx.org:latest
        Type: LINUX_CONTAINER
      # If this Name changes, the CodeBuild role policy needs to change too
      Name: !Sub ${AWS::StackName}-AcceptanceTests
      ServiceRole: !GetAtt AcceptanceTestsCodeBuildIamRole.Arn
      Source:
        BuildSpec: buildspec-pipeline.yml
        Type: CODEPIPELINE
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
      TimeoutInMinutes: 5
  # CloudFormation Pipeline Actions
  CloudFormationIamRole:
    # This role gets passed to CloudFormation, and is used by CloudFormation to
    # to perform actions against other AWS resources.
    #
    # This is the role used to launch the root stack, and thus all nested app
    # and service stacks. It needs permissions to create any of the resources
    # that those stacks require. Eg, if a stack nested in the root stack
    # includes an S3 bucket resource, this role needs a policy that allows it
    # to create S3 buckets.
    # NOTE This role should not be given to anything other than the CodePipeline
    # CloudFormation actions! It's very powerful!
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # Lambda functions used by CI/CD; archives are accessed through S3
        - PolicyDocument:
            Statement:
              - Action: s3:GetObject
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSupportBucket", "/*"]]
            Version: "2012-10-17"
          PolicyName: SupportBucketAccess
        # Lambda application code is accessed through S3
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket", "/*"]]
            Version: "2012-10-17"
          PolicyName: CodeBucketAccess
        # Nested stack templates are accessed through S3
        - PolicyDocument:
            Statement:
              - Action: s3:GetObject
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/*"]]
            Version: "2012-10-17"
          PolicyName: TemplateBucketAccess
        # Need read access to SSM system parameters
        - PolicyDocument:
            Statement:
              - Action: ssm:GetParameters
                Effect: Allow
                Resource: "*" # This is sort of safe
            Version: "2012-10-17"
          PolicyName: SsmAccess
        # Give CloudFormation full access except deleting stacks
        - PolicyDocument:
            Statement:
              - Action: cloudformation:*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging/*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production/*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:changeSet/*
                  - arn:aws:cloudformation:us-east-1:aws:transform/Serverless-2016-10-31
              - Action: cloudformation:DeleteStack
                Effect: Deny
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: StackManipulationPolicy
        # Need to CRUD all resources included in root and nested stacks
        # NOTE: THIS IS VERY POWERFUL
        - PolicyDocument:
            Statement:
              # Never let CloudFormation delete object/buckets from S3
              - Action:
                  - s3:DeleteBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Effect: Deny
                Resource: "*"
              - Action: s3:*
                Effect: Allow
                Resource: "*"
              # Only include services that root stack or its nested stacks
              # actually use
              - Action:
                  - acm:*
                  - apigateway:*
                  - application-autoscaling:*
                  - athena:*
                  - autoscaling:*
                  - cloudfront:*
                  - cloudwatch:*
                  - dynamodb:*
                  - ec2:*
                  - ecs:*
                  - elasticache:*
                  - elasticloadbalancing:*
                  - es:*
                  - events:*
                  - glue:*
                  - iam:*
                  - lambda:*
                  - logs:*
                  - ram:*
                  - rds:*
                  - resource-groups:*
                  - route53:*
                  - sns:*
                  - sqs:*
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: ResourceManipulationPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  # Custom Lambda Actions
  ChangeSetDeltaNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/change-set-delta-notification/
      Description: >-
        Sends a message about stack changes in a CloudFormation change set
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
          CD_STACK_NAME: !Ref AWS::StackName
      Handler: index.handler
      MemorySize: 128
      Policies:
        - !Ref CloudFormationReadOnlyAccessPolicy
        - !Ref CodePipelineJobResultWriteAccessPolicy
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 10
  ChangeSetDeltaNotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ChangeSetDeltaNotificationFunction}
      RetentionInDays: 14
  ChangeSetDeltaNotificationNotificationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Change Set Diff Notification"
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the diff notification lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ChangeSetDeltaNotificationFunction
  DeploymentNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/deployment-notification/
      Description: >-
        Sends a message when deployments finish
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
          CD_STACK_NAME: !Ref AWS::StackName
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_PRODUCTION_KEY: !Ref InfrastructureConfigProductionKey
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Policies:
        - !Ref CloudWatchMetricWriteAccessPolicy
        - !Ref CodePipelineJobResultWriteAccessPolicy
        - !Ref ProductionConfigObjectReadOnlyAccessPolicy
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
        - !Ref StagingConfigObjectReadOnlyAccessPolicy
      Runtime: python3.8
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 3
  DeploymentNotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeploymentNotificationFunction}
      RetentionInDays: 14
  DeploymentNotificationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Deploy Notification"
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the deploy notification lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref DeploymentNotificationFunction
  EnvironmentStateCaptureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/environment-state-capture/
      Description: >-
        Capture template and config version data for deployed environments
      Environment:
        Variables:
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_PRODUCTION_KEY: !Ref InfrastructureConfigProductionKey
          INFRASTRUCTURE_SNAPSHOTS_BUCKET:
            Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureSnapshotsBucket
      Handler: index.handler
      MemorySize: 256
      Policies:
        - !Ref CodePipelineJobResultWriteAccessPolicy
        - !Ref ProductionConfigObjectReadOnlyAccessPolicy
        - !Ref SnapshotsBucketWriteAccessPolicy
      Runtime: nodejs12.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 5
  EnvironmentStateCaptureLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${EnvironmentStateCaptureFunction}
      RetentionInDays: 14
  EnvironmentStateCaptureErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Environment State Capture"
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the state capture lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref EnvironmentStateCaptureFunction
  ProductionConfigPseudoSourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/production-config-pseudo-source/
      Description: >-
        Generates output artifact of the production template config
      Environment:
        Variables:
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_PRODUCTION_KEY: !Ref InfrastructureConfigProductionKey
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Policies:
        - !Ref ArtifactBucketReadWriteAccessPolicy
        - !Ref CodePipelineJobResultWriteAccessPolicy
        - !Ref ProductionConfigObjectReadWriteAccessPolicy
        - !Ref StagingConfigObjectReadOnlyAccessPolicy
      Runtime: python3.8
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 8
  ProductionConfigPseudoSourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProductionConfigPseudoSourceFunction}
      RetentionInDays: 14
  ProductionConfigPseudoSourceErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Pseudo Source"
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the pseudo source lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProductionConfigPseudoSourceFunction
  InfrastructureRepoSourceS3SyncFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/infrastructure-s3-sync/
      Description: Copies Infrastructure repo artifact to S3
      Environment:
        Variables:
          INFRASTRUCTURE_SOURCE_BUCKET:
            Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureSourceBucket
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Policies:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - !Ref CodePipelineJobResultWriteAccessPolicy
        - !Ref SourceBucketWriteAccessPolicy
      Runtime: python3.8
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 8
  InfrastructureRepoSourceS3SyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${InfrastructureRepoSourceS3SyncFunction}
      RetentionInDays: 14
  InfrastructureRepoSourceS3SyncErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] S3 Sync"
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the S3 Sync lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref InfrastructureRepoSourceS3SyncFunction
