# This creates a CodePipeline pipeline (and associates resources) for handling
# deployments and testing of the platform. It watches three sources for changes,
# which trigger the pipeline: the meta.prx.org repo (used for acceptance
# testing), the Infrastructure repo (for when apps are added or changed), and
# the S3 bucket that contains the template configuration for the root stack that
# the pipeline ultimately launches. The root stack uses a CloudFormation
# template that includes many nested stacks for the various apps and services
# that are a part of the platform.
# In order for the root stack to launch the nested stacks, the templates for
# those stacks must be available in S3. This pipeline copies the entire
# Infrastructure artifact to S3 (into a bucket defined by the
# InfrastructureSourceBucket parameter) for that purpose.
# This would be deployed in any region where you want to deploy the platform
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates CodePipeline to handle infrastructure testing and deploys
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
          - InfrastructureNotificationsStackName
          - SecretsStackName
      - Label:
          default: GitHub API
        Parameters:
          - GitHubToken
      - Label:
          default: Infrastructure Config
        Parameters:
          - InfrastructureConfigStagingKey
          - InfrastructureConfigProductionKey
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      InfrastructureNotificationsStackName:
        default: Notifications stack name
      SecretsStackName:
        default: Secrets stack name
      GitHubToken:
        default: Access token
      InfrastructureConfigStagingKey:
        default: Staging S3 object key
      InfrastructureConfigProductionKey:
        default: Production S3 object key
Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  InfrastructureNotificationsStackName:
    Default: infrastructure-notifications
    Description: The name of a previously launched notifications stack
    Type: String
  SecretsStackName:
    Default: infrastructure-secrets
    Description: The name of a previously launched secrets stack
    Type: String
  GitHubToken:
    Description: >
      A GitHub access token with permissions to update statuses, request
      content, etc
    Type: String
  InfrastructureConfigStagingKey:
    Default: template-config-staging.zip
    Description: >
      The S3 object key for the staging template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  InfrastructureConfigProductionKey:
    Default: template-config-production.zip
    Description: >
      The S3 object key for the production template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
Resources:
  # CodePipeline Failure Notifications
  # CodePipeline doesn't have very good native support for generating
  # notifications when a pipeline execution fails. A CloudWatch Event triggers
  # a Lambda that polls the pipeline every minute looking for recent failures in
  # order to get around the limitation.
  CodePipelineFailurePollerFunctionIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: "/"
      Policies:
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - Fn::ImportValue:
                      !Sub "${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn"
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:GetPipelineState"
                Resource: "*"
  CodePipelineFailurePollerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: cd/pipeline-fail-notification.zip
      Description: >
        Sends a message when pipeline run fails
      Environment:
        Variables:
          PIPELINE_NAME: !Ref Pipeline
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue:
                !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt CodePipelineFailurePollerFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 3
  CodePipelineFailurePollerEventIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "lambda:InvokeFunction"
                Effect: Allow
                Resource:
                  - !GetAtt CodePipelineFailurePollerFunction.Arn
  CodePipelineFailurePollerEventTrigger:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        Runs the failure notification poller Lambda function periodically
      RoleArn: !GetAtt CodePipelineFailurePollerEventIamRole.Arn
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt CodePipelineFailurePollerFunction.Arn
          Id: !Sub "${AWS::StackName}.FailureNotification-Poller"
  CodePipelineFailurePollerTriggerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CodePipelineFailurePollerFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodePipelineFailurePollerEventTrigger.Arn
  CodePipelineFailurePollerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Pipeline Failure Notification"
      AlarmActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >
        The error rate on the failure notification lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CodePipelineFailurePollerFunction
  # CodePipeline Approvals
  # Production changeset deploys are behind a manual approval action. That
  # action publishes a message to this SNS topic, of which this Lambda function
  # is a subscriber. The function generates an interactive Slack message to
  # facilitate the approval.
  CodePipelineApprovalsSnsTopic:
    Type: "AWS::SNS::Topic"
  CodePipelineApprovalsTopicHandlerFunctionSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt PipelineApprovalNotificationHandlerFunction.Arn
      Protocol: lambda
      TopicArn: !Ref CodePipelineApprovalsSnsTopic
  CodePipelineApprovalsTopicInvokeHandlerFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref PipelineApprovalNotificationHandlerFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref CodePipelineApprovalsSnsTopic
  PipelineApprovalNotificationHandlerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: cd/pipeline-approval-notification-handler.zip
      Description: >
        Receives notifications from CodePipeline when approval is required, and
        builds a messages to alert externally
      Environment:
        Variables:
          IKE_DEPLOYS_SLACK_WEBHOOK_URL:
            Fn::ImportValue:
                !Sub "${InfrastructureNotificationsStackName}-IkeDeploysSlackSlackWebhookUrl"
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue:
                !Sub "${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn"
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionIAMRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 5
  PipelineApprovalNotificationHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Pipeline Approval Notification"
      AlarmActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >
        The error rate on the approval notification handler lambda has exceeded
        0 in the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref PipelineApprovalNotificationHandlerFunction
  # Pipeline
  ArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  CdPipelineIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        # CodePipeline seems to need access to special buckets
        - PolicyName: GenericCodePipelineS3PutPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource:
                  - "arn:aws:s3:::codepipeline*"
        # Let CodePipeline read and write artifacts
        - PolicyName: ArtifactStoreFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:Put*"
                  - "s3:List*"
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactStore}
                  - !Sub arn:aws:s3:::${ArtifactStore}/*
        # CodePipeline needs access to objects that are used in source actions
        - PolicyName: S3SourceActionAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketVersioning"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket"]]
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
        # For Approval actions
        - PolicyName: SnsApprovalsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref CodePipelineApprovalsSnsTopic
        # Allow CodePipeline to manipulate CloudFormation root stacks
        - PolicyName: RootStackCloudFormationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - !GetAtt CloudFormationIAMRole.Arn
              # Full access for staging stacks
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging/*
              # Production stacks shouldn't get deleted
              - Effect: Allow
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:CreateStack"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:DeleteChangeSet"
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production/*
        # Allows CodePipeline to invoke Lambda function actions
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:ListFunctions"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt InfrastructureRepoSourceS3SyncFunction.Arn
                  - !GetAtt InfrastructureCommitProxyFunction.Arn
                  - !GetAtt EnvironmentStateCaptureFunction.Arn
                  - !GetAtt ProductionConfigPseudoSourceFunction.Arn
                  - !GetAtt DeploymentNotificationFunction.Arn
        # Lets CodePipeline start CodeBuild (for acceptance tests, etc)
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource:
                  - !GetAtt AcceptanceTestsCodeBuildProject.Arn
                  - !Sub "${AcceptanceTestsCodeBuildProject.Arn}/*"
                Resource: "*"
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !GetAtt CdPipelineIamRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: PRX
                Repo: Infrastructure
                Branch: master
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: MetaRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: PRX
                Repo: meta.prx.org
                Branch: master
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: MetaRepoSourceArtifact
              RunOrder: 1
            - Name: StagingConfig
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket:
                  Fn::ImportValue:
                    !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
                S3ObjectKey: !Ref InfrastructureConfigStagingKey
              OutputArtifacts:
                - Name: TemplateConfigStagingZipArtifact
              RunOrder: 1
        - Name: Housekeeping
          Actions:
            - Name: InfrastructureSync
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref InfrastructureRepoSourceS3SyncFunction
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: InfrastructureCommit
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref InfrastructureCommitProxyFunction
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              OutputArtifacts:
                - Name: RepoStateArtifact
              RunOrder: 1
            - Name: DeploymentNotification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref DeploymentNotificationFunction
                UserParameters: Start
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
        - Name: Staging
          Actions:
            - Name: CreateStagingChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}RootStagingChangeSet
                ParameterOverrides: !Sub |
                  {
                    "InfrastructureStorageStackName": "${InfrastructureStorageStackName}",
                    "NotificationsStackName": "${InfrastructureNotificationsStackName}",
                    "SecretsStackName": "${SecretsStackName}",
                    "InfrastructureGitCommit": { "Fn::GetParam" : ["RepoStateArtifact", "state.json", "commit"]},
                    "PipelineExecutionNonce": { "Fn::GetArtifactAtt" : ["InfrastructureRepoSourceArtifact", "ObjectKey"]}
                  }
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${AWS::StackName}-root-staging
                TemplateConfiguration: TemplateConfigStagingZipArtifact::staging.json
                TemplatePath: InfrastructureRepoSourceArtifact::stacks/root.yml
              InputArtifacts:
                - Name: TemplateConfigStagingZipArtifact
                - Name: InfrastructureRepoSourceArtifact
                - Name: RepoStateArtifact
              RunOrder: 2
            - Name: StagingDeltaNotification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref ChangeSetDeltaNotificationFunction
                UserParameters: !Sub |
                  {
                    "StackName": "${AWS::StackName}-root-staging",
                    "ChangeSetName": "${AWS::StackName}RootStagingChangeSet"
                  }
              RunOrder: 3
            - Name: ExecuteStagingChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}RootStagingChangeSet
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${AWS::StackName}-root-staging
              RunOrder: 4
        - Name: Testing
          Actions:
            - Name: Acceptance
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref AcceptanceTestsCodeBuildProject
              InputArtifacts:
                - Name: MetaRepoSourceArtifact
              OutputArtifacts:
                - Name: AcceptanceTestArtifact
              RunOrder: 1
        - Name: Production
          Actions:
            - Name: GetProductionConfig
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref ProductionConfigPseudoSourceFunction
              InputArtifacts:
                - Name: TemplateConfigStagingZipArtifact
              OutputArtifacts:
                - Name: TemplateConfigProductionZipArtifact
              RunOrder: 1
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}RootProductionChangeSet
                ParameterOverrides: !Sub |
                  {
                    "InfrastructureStorageStackName": "${InfrastructureStorageStackName}",
                    "NotificationsStackName": "${InfrastructureNotificationsStackName}",
                    "SecretsStackName": "${SecretsStackName}",
                    "InfrastructureGitCommit": { "Fn::GetParam" : ["RepoStateArtifact", "state.json", "commit"]},
                    "PipelineExecutionNonce": { "Fn::GetArtifactAtt" : ["InfrastructureRepoSourceArtifact", "ObjectKey"]}
                  }
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${AWS::StackName}-root-production
                TemplateConfiguration: TemplateConfigProductionZipArtifact::production.json
                TemplatePath: InfrastructureRepoSourceArtifact::stacks/root.yml
              InputArtifacts:
                - Name: TemplateConfigProductionZipArtifact
                - Name: InfrastructureRepoSourceArtifact
                - Name: RepoStateArtifact
              RunOrder: 2
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                NotificationArn: !Ref CodePipelineApprovalsSnsTopic
                CustomData: !Sub |
                  {
                    "StackName": "${AWS::StackName}-root-production",
                    "ChangeSetName": "${AWS::StackName}RootProductionChangeSet"
                  }
              RunOrder: 3
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}RootProductionChangeSet
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${AWS::StackName}-root-production
              RunOrder: 4
            - Name: CaptureProductionState
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref EnvironmentStateCaptureFunction
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 5
            - Name: DeploymentNotification
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref DeploymentNotificationFunction
                UserParameters: Production
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 5
  # Acceptance Test Pipeline Action
  AcceptanceTestsCodeBuildIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Path: "/"
      Policies:
        # Allow CodeBuild to log to CloudWatch
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource:
                  # NOTE These need to stay in sync with the CodeBuild Project
                  # name from below
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AcceptanceTests
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AcceptanceTests:*
        # CodeBuild sources from CodePipeline artifacts, so it needs access
        - PolicyName: ArtifactStoreBasicAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Effect: Allow
                Resource: !Sub arn:aws:s3:::${ArtifactStore}/*
        - PolicyName: ParameterStorePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                Resource:
                  - "*" # TODO
  AcceptanceTestsCodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Runs acceptance tests for PRX platform
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        # EnvironmentVariables:
        #   - Name: DOVETAIL_HOST
        #     Value: dovetail.staging.prxu.org
        #   - Name: DOVETAIL_PROD_HOST
        #     Value: dovetail.prxu.org
        #   - Name: FEEDER_HOST
        #     Value: feeder.staging.prx.tech
        #   - Name: METRICS_HOST
        #     Value: metrics.staging.prx.tech
        #   - Name: PUBLISH_HOST
        #     Value: publish.staging.prx.tech
        #   - Name: PUBLISH_USER
        #     Value: test@test.com
        #   - Name: PUBLISH_PASS
        #     Value: test1234
        #   - Name: UPLOAD_HOST
        #     Value: upload-5e12hsv5dh-us-east-1.staging.prx.tech
        Image: 561178107736.dkr.ecr.us-east-1.amazonaws.com/meta.prx.org:latest
        Type: LINUX_CONTAINER
      # If this Name changes, the CodeBuild role policy needs to change too
      Name: !Sub ${AWS::StackName}-AcceptanceTests
      ServiceRole: !GetAtt AcceptanceTestsCodeBuildIamRole.Arn
      Source:
        BuildSpec: "buildspec-pipeline.yml"
        Type: CODEPIPELINE
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TimeoutInMinutes: 5
  # CloudFormation Pipeline Actions
  CloudFormationIAMRole:
    # This role gets passed to CloudFormation, and is used by CloudFormation to
    # to perform actions against other AWS resources.
    #
    # This is the role used to launch the root stack, and thus all nested app
    # and service stacks. It needs permissions to create any of the resources
    # that those stacks require. Eg, if a stack nested in the root stack
    # includes an S3 bucket resource, this role needs a policy that allows it
    # to create S3 buckets.
    # NOTE This role should not be given to anything other than the CodePipeline
    # CloudFormation actions! It's very powerful!
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        # Lambda functions used by CI/CD; archives are accessed through S3
        - PolicyName: SupportBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSupportBucket", "/*"]]
        # Lambda application code is accessed through S3
        - PolicyName: CodeBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket", "/*"]]
        # Nested stack templates are accessed through S3
        - PolicyName: TemplateBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/*"]]
        # Give CloudFormation full access except deleting stacks
        - PolicyName: StackManipulationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              #
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:changeSet/*"
              - Effect: Deny
                Action:
                  - "cloudformation:DeleteStack"
                Resource: "*"
        # Need to CRUD all resources included in root and nested stacks
        # NOTE: THIS IS VERY POWERFUL
        - PolicyName: ResourceManipulationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Be very explicit with S3 policies; CloudFormation never deletes
              # S3 buckets anyway
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:PutLifecycleConfiguration
                Resource: "*"
              # Only include services that root stack or its nested stacks
              # actually use
              - Effect: Allow
                Action:
                  - "acm:*"
                  - "apigateway:*"
                  - "application-autoscaling:*"
                  - "autoscaling:*"
                  - "cloudfront:*"
                  - "cloudwatch:*"
                  - "ec2:*"
                  - "ecs:*"
                  - "elasticloadbalancing:*"
                  - "events:*"
                  - "iam:*"
                  - "lambda:*"
                  - "logs:*"
                  - "route53:*"
                  - "sns:*"
                Resource: "*"
  # Custom Lambda Actions
  LambdaExecutionIAMRole:
    # TODO This should probably be split up
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource:
                  - "*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSnapshotsBucket", "/*"]]
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/*"]]
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactStore}/*
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigProductionKey]]
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - Fn::ImportValue:
                      !Sub "${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn"
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:PutJobFailureResult"
                  - "codepipeline:GetPipelineState"
                Resource: "*"
        - PolicyName: CloudWatchMetricsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"
        - PolicyName: CloudFormationReadPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:DescribeStacks"
                Resource: "*"
  ChangeSetDeltaNotificationFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: cd/change-set-delta-notification.zip
      Description: >
        Sends a message about stack changes in a CodePipeline change set
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue:
                !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
          CD_STACK_NAME: !Ref AWS::StackName
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionIAMRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 3
  ChangeSetDeltaNotificationNotificationErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Change Set Diff Notification"
      AlarmActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >
        The error rate on the diff notification lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ChangeSetDeltaNotificationFunction
  DeploymentNotificationFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: cd/deployment-notification.zip
      Description: >
        Sends a message when deployments finish
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue:
                !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
          CD_STACK_NAME: !Ref AWS::StackName
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_PRODUCTION_KEY: !Ref InfrastructureConfigProductionKey
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionIAMRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 3
  DeploymentNotificationErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Deploy Notification"
      AlarmActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >
        The error rate on the deploy notification lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref DeploymentNotificationFunction
  EnvironmentStateCaptureFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: cd/environment-state-capture.zip
      Description: >
        Capture template and config version data for deployed environments
      Environment:
        Variables:
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_PRODUCTION_KEY: !Ref InfrastructureConfigProductionKey
          INFRASTRUCTURE_SNAPSHOTS_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureSnapshotsBucket
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionIAMRole.Arn
      Runtime: nodejs6.10
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 5
  EnvironmentStateCaptureErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Environment State Capture"
      AlarmActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >
        The error rate on the state capture lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref EnvironmentStateCaptureFunction
  ProductionConfigPseudoSourceFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: cd/production-config-pseudo-source.zip
      Description: >
        Generates output artifact of the production template config
      Environment:
        Variables:
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_PRODUCTION_KEY: !Ref InfrastructureConfigProductionKey
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionIAMRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 8
  ProductionConfigPseudoSourceErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Pseudo Source"
      AlarmActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >
        The error rate on the pseudo source lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProductionConfigPseudoSourceFunction
  InfrastructureCommitProxyFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: cd/infrastructure-commit-proxy.zip
      Description: Copies Infrastructure repo artifact to S3
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionIAMRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 3
  InfrastructureCommitProxyErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] Commit Proxy"
      AlarmActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >
        The error rate on the S3 commit proxy lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref InfrastructureCommitProxyFunction
  InfrastructureRepoSourceS3SyncFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: cd/infrastructure-s3-sync.zip
      Description: Copies Infrastructure repo artifact to S3
      Environment:
        Variables:
          INFRASTRUCTURE_SOURCE_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureSourceBucket
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionIAMRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 8
  InfrastructureRepoSourceS3SyncErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CD][Lambda][Error] S3 Sync"
      AlarmActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      OKActions:
        - Fn::ImportValue:
            !Sub "${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn"
      AlarmDescription: >
        The error rate on the S3 Sync lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref InfrastructureRepoSourceS3SyncFunction
