# cd/template.yml
# This template is deployed continuously via GitHub Actions. The IAM role used
# by GitHub actions is not permitted to manage all aspects of the template.
# It's mainly intended for minor updates to the pipeline and other existing
# resources. For creating and deleting resources, use `sam deploy`
#
# This creates a CodePipeline pipeline (and associates resources) for handling
# deployments and testing of the platform. It watches three sources for changes,
# which trigger the pipeline: the meta.prx.org repo (used for acceptance
# testing), the Infrastructure repo (for when apps are added or changed), and
# Parameter Store parameters related to the hierarchy of stacks that
# the pipeline ultimately launches. The root stack uses a CloudFormation
# template that includes many nested stacks for the various apps and services
# that are a part of the platform.
# In order for the root stack to launch the nested stacks, the templates for
# those stacks must be available in S3. This pipeline copies parts of the
# Infrastructure artifact to S3 for that purpose.
#
# This would be deployed in any region where you want to deploy the platform.
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates CodePipeline to handle Spire testing and deploys

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
          - CodeStarConnectionArn
      - Label:
          default: Infrastructure Config
        Parameters:
          - InfrastructureConfigStagingKey
          - InfrastructureConfigProductionKey
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      InfrastructureConfigStagingKey:
        default: Staging S3 object key
      InfrastructureConfigProductionKey:
        default: Production S3 object key
      CodeStarConnectionArn:
        default: CodeStar Connection ARN

Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  InfrastructureConfigStagingKey:
    Default: template-config-staging.zip
    Description: >-
      The S3 object key for the staging template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  InfrastructureConfigProductionKey:
    Default: template-config-production.zip
    Description: >-
      The S3 object key for the production template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  CodeStarConnectionArn:
    Type: String
    Description: >-
      The Arn of a previously-created and configured CodeStar Connection, which
      has access to the any Git repositories used as sources in the template
  SlackMessageRelaySnsTopicArn:
    Type: String

Resources:
  # Common IAM policies
  SlackRelaySnsPublishOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource: !Ref SlackMessageRelaySnsTopicArn
        Version: "2012-10-17"
  CodePipelineJobResultWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
  CodePipelineStateReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codepipeline:GetPipelineState
              - codepipeline:GetPipelineExecution
              - codepipeline:ListActionExecutions
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
        Version: "2012-10-17"
  CloudFormationReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudformation:DescribeChangeSet
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackResource
              - cloudformation:ListStackResources
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
  CloudFormationCreateChangeSetPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
  CloudWatchMetricWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
  StagingConfigObjectReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
        Version: "2012-10-17"
  ProductionConfigObjectReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigProductionKey]]
        Version: "2012-10-17"
  ProductionConfigObjectReadWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigProductionKey]]
        Version: "2012-10-17"
  SnapshotsBucketWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSnapshotsBucket", "/*"]]
        Version: "2012-10-17"
  SourceBucketWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/*"]]
        Version: "2012-10-17"
  ArtifactBucketReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub ${ArtifactStore.Arn}/*
        Version: "2012-10-17"
  ArtifactBucketReadWriteAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource: !Sub ${ArtifactStore.Arn}/*
        Version: "2012-10-17"

  # This role gets passed to CloudFormation, and is used by CloudFormation to
  # to perform actions against other AWS resources.
  #
  # This is the role used to launch the root stack, and thus all nested app
  # and service stacks. It needs permissions to create any of the resources
  # that those stacks require. Eg, if a stack nested in the root stack
  # includes an S3 bucket resource, this role needs a policy that allows it
  # to create S3 buckets.
  # NOTE This role should not be given to anything other than the CodePipeline
  # CloudFormation actions! It's very powerful!
  CloudFormationIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # Lambda functions used by CI/CD; archives are accessed through S3
        # TODO Is this still necessary?
        - PolicyDocument:
            Statement:
              - Action: s3:GetObject
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSupportBucket", "/*"]]
            Version: "2012-10-17"
          PolicyName: SupportBucketAccess
        # Lambda application code is accessed through S3
        # TODO Is this still necessary?
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket", "/*"]]
            Version: "2012-10-17"
          PolicyName: CodeBucketAccess
        # Nested stack templates are accessed through S3
        - PolicyDocument:
            Statement:
              - Action: s3:GetObject
                Effect: Allow
                Resource:
                  # TODO Remove the ImportValue one
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/*"]]
                  - !Sub ${TemplateCopyBucket.Arn}/*
            Version: "2012-10-17"
          PolicyName: TemplateBucketAccess
        # Need read access to SSM system parameters
        - PolicyDocument:
            Statement:
              - Action: ssm:Get*
                Effect: Allow
                Resource: "*" # This is sort of safe
            Version: "2012-10-17"
          PolicyName: SsmAccess
        # Give CloudFormation full access except deleting stacks
        - PolicyDocument:
            Statement:
              - Action: cloudformation:*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging/*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production/*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:changeSet/*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              - Action: cloudformation:DeleteStack
                Effect: Deny
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: StackManipulationPolicy
        # Need to CRUD all resources included in root and nested stacks
        # NOTE: THIS IS VERY POWERFUL
        - PolicyDocument:
            Statement:
              # Never let CloudFormation delete object/buckets from S3
              - Action:
                  - s3:DeleteBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Effect: Deny
                Resource: "*"
              - Action: s3:*
                Effect: Allow
                Resource: "*"
              # When generating EC2 key pairs via CloudFormation, the private
              # key is saved to Parameter Store. Parameters are read-only
              # otherwise within CloudFormation.
              - Action: ssm:*
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ec2/keypair/*
              # Only include services that root stack or its nested stacks
              # actually use
              - Action:
                  - acm:*
                  - apigateway:*
                  - application-autoscaling:*
                  - athena:*
                  - autoscaling:*
                  - cloudfront:*
                  - cloudwatch:*
                  - dynamodb:*
                  - ec2:*
                  - ecs:*
                  - elasticache:*
                  - elasticfilesystem:*
                  - elasticloadbalancing:*
                  - es:*
                  - events:*
                  - glue:*
                  - iam:*
                  - kinesis:*
                  - lambda:*
                  - logs:*
                  - ram:*
                  - rds:*
                  - resource-groups:*
                  - route53:*
                  - sns:*
                  - sqs:*
                  - transfer:*
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: ResourceManipulationPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }

  # Parameter Store Events
  ParameterStoreEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/parameter-store-events-handler/
      Description: >-
        Watches for changes in Parameter Store and starts pipeline executions
        when necessary.
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopicArn
          PIPELINE_NAME: !Ref Pipeline
      Events:
        ParamChanges:
          Properties:
            Pattern:
              detail:
                name:
                  - prefix: /prx/stag/Spire
                  - prefix: /prx/global/Spire
              detail-type:
                - Parameter Store Change
              source:
                - aws.ssm
          Type: EventBridgeRule
      Handler: index.handler
      MemorySize: 128
      Policies:
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
        - Statement:
            - Action:
                - codepipeline:StartPipelineExecution
              Effect: Allow
              Resource: !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          Version: "2012-10-17"
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 8
  ParameterStoreEventsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ParameterStoreEventsFunction}
      RetentionInDays: 14
  ParameterStoreEventsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CD] Parameter Store events <prod> INVOCATIONS ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The Lambda function that watches for changes in Parameter Store and
        starts pipeline executions is failing, so the pipeline may not be
        starting automatically. This function is not part the pipeline, so
        running the pipeline manually should not be impacted.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ParameterStoreEventsFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  # Pipelines
  ArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  TemplateCopyBucket:
    # Some or all of the Infrastructure repository is copied to this bucket as
    # part of each pipeline execution so that the files are available in S3
    # later in the pipeline, which is necessary for nested CloudFormation
    # stacks.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  CdPipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # CodePipeline seems to need access to special buckets
        - PolicyDocument:
            Statement:
              - Action: s3:PutObject
                Effect: Allow
                Resource: arn:aws:s3:::codepipeline*
            Version: "2012-10-17"
          PolicyName: GenericCodePipelineS3PutPolicy
        # Let CodePipeline read and write artifacts
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                Effect: Allow
                Resource:
                  - !GetAtt ArtifactStore.Arn
                  - !Sub ${ArtifactStore.Arn}/*
            Version: "2012-10-17"
          PolicyName: ArtifactStoreFullAccess
        # CodePipeline needs access to objects that are used in source actions
        - PolicyDocument:
            Statement:
              - Action: s3:GetBucketVersioning
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket"]]
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
            Version: "2012-10-17"
          PolicyName: S3SourceActionAccessPolicy
        # For Approval actions
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource:
                  - !Ref StagingApprovalsSnsTopic
                  - !Ref ProductionApprovalsSnsTopic
            Version: "2012-10-17"
          PolicyName: SnsApprovalsPolicy
        # To allow the pipeline to use a CodeStar Connection
        - PolicyDocument:
            Statement:
              - Action: codestar-connections:*
                Condition:
                  ForAllValues:StringEquals:
                    codestar-connections:PassedToService: codepipeline.amazonaws.com
                Effect: Allow
                Resource: !Ref CodeStarConnectionArn
            Version: "2012-10-17"
          PolicyName: CodeStarConnectionPolicy
        # Allow CodePipeline to manipulate CloudFormation root stacks
        - PolicyDocument:
            Statement:
              - Action: iam:PassRole
                Effect: Allow
                Resource: !GetAtt CloudFormationIamRole.Arn
              # Full access for staging stacks
              - Action: cloudformation:*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-staging/*
              # Production stacks shouldn't get deleted
              - Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:UpdateStack
                Effect: Allow
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-root-production/*
            Version: "2012-10-17"
          PolicyName: RootStackCloudFormationAccess
        # Allows CodePipeline to invoke Lambda function actions
        - PolicyDocument:
            Statement:
              - Action: lambda:ListFunctions
                Effect: Allow
                Resource: "*"
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource:
                  - !GetAtt InfrastructureRepoSourceS3SyncFunction.Arn
                  - !GetAtt ParameterCaptureFunction.Arn
                  - !GetAtt StagingDeltasFunction.Arn
                  - !GetAtt ChangeSetCreateFunction.Arn
                  - !GetAtt ProductionParameterPromotionFunction.Arn
                  - !GetAtt EchoFunction.Arn
            Version: "2012-10-17"
          PolicyName: LambdaRolePolicy
        # Lets CodePipeline start CodeBuild (for acceptance tests, etc)
        - PolicyDocument:
            Statement:
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource:
                  - !GetAtt AcceptanceTestsCodeBuildProject.Arn
                  - !Sub ${AcceptanceTestsCodeBuildProject.Arn}/*
            Version: "2012-10-17"
          PolicyName: CodeBuildPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !GetAtt CdPipelineIamRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: PRX/Infrastructure
                BranchName: main
                OutputArtifactFormat: CODE_ZIP
                DetectChanges: false
              Namespace: src_infra
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: MetaRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: PRX/meta.prx.org
                BranchName: master
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: MetaRepoSourceArtifact
              RunOrder: 1
        - Name: Pre-Deploy
          Actions:
            - Name: S3-Template-Copy
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref InfrastructureRepoSourceS3SyncFunction
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              Namespace: s3_cpy
              RunOrder: 1
            - Name: Stag-Stack-Name
              # Creates a pipeline variable of the staging stack name, for
              # convenience and consistency
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref EchoFunction
                UserParameters: !Sub ${AWS::StackName}-root-staging
              Namespace: staging_stack_name
              RunOrder: 1
            - Name: Prod-Stack-Name
              # Creates a pipeline variable of the production stack name, for
              # convenience and consistency
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref EchoFunction
                UserParameters: !Sub ${AWS::StackName}-root-production
              Namespace: production_stack_name
              RunOrder: 1
            - Name: ChangeSet-Name
              # Creates a pipeline variable for the name used for change sets
              # created and executed by the pipeline's action, for
              # convenience and consistency
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref EchoFunction
                UserParameters: cs-#{codepipeline.PipelineExecutionId}
              Namespace: change_set_name
              RunOrder: 1
        - Name: Staging
          Actions:
            - Name: Create-ChangeSet
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref ChangeSetCreateFunction
                UserParameters: !Sub >-
                  {
                    "Stack": "#{staging_stack_name.value}",
                    "ChangeSet": "#{change_set_name.value}",
                    "RoleArn": "${CloudFormationIamRole.Arn}",
                    "Parameters": {
                      "StorageStackName": "${InfrastructureStorageStackName}",
                      "InfrastructureGitCommit": "#{src_infra.CommitId}",
                      "Nonce": "#{codepipeline.PipelineExecutionId}",
                      "TemplateUrlBase": "#{s3_cpy.TemplateUrlBase}",
                      "EnvironmentType": "Staging",
                      "EnvironmentTypeAbbreviation": "stag",
                      "PorterStateMachineArn": "/prx/stag/Spire/${AWS::Region}/porter-state-machine-arn",
                      "PorterJobExecutionTopicArn": "/prx/stag/Spire/${AWS::Region}/porter-job-execution-topic-arn",
                      "SharedAuroraMysqlEndpoint": "/prx/stag/Spire/${AWS::Region}/shared-mysql-database/endpoint",
                      "SharedAuroraPostgresqlEndpoint": "/prx/stag/Spire/${AWS::Region}/shared-postgresql-database/endpoint"
                    }
                  }
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: Auto-Approval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              Configuration:
                NotificationArn: !Ref StagingApprovalsSnsTopic
                CustomData: !Sub >-
                  {
                    "PipelineExecutionId": "#{codepipeline.PipelineExecutionId}",
                    "StackName": "#{staging_stack_name.value}",
                    "ChangeSetName": "#{change_set_name.value}",
                    "AccountId": "${AWS::AccountId}"
                  }
              RunOrder: 2
            - Name: Deploy-ChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                ChangeSetName: "#{change_set_name.value}"
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: "#{staging_stack_name.value}"
              Namespace: staging_deploy
              RunOrder: 3
            - Name: Capture-Params
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref ParameterCaptureFunction
                UserParameters: "#{staging_stack_name.value}"
              RunOrder: 4
        - Name: Testing
          Actions:
            - Name: Acceptance-Tests
              ActionTypeId:
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                EnvironmentVariables: |-
                  [
                    {
                      "name": "DOVETAIL_HOST",
                      "value": "#{staging_deploy.DovetailRouterHostname}"
                    }, {
                      "name": "FEEDER_HOST",
                      "value": "#{staging_deploy.FeederHostname}"
                    }, {
                      "name": "METRICS_HOST",
                      "value": "#{staging_deploy.MetricsHostname}"
                    }, {
                      "name": "PUBLISH_HOST",
                      "value": "#{staging_deploy.PublishHostname}"
                    }, {
                      "name": "UPLOAD_HOST",
                      "value": "#{staging_deploy.S3SigningHostname}"
                    }, {
                      "name": "STAGING_REGION_MODE",
                      "value": "#{staging_deploy.RegionMode}"
                    }, {
                      "name": "STAGING_APPLICATIONS_STACK_STATE",
                      "value": "#{staging_deploy.ApplicationStacksState}"
                    }
                  ]
                ProjectName: !Ref AcceptanceTestsCodeBuildProject
              InputArtifacts:
                - Name: MetaRepoSourceArtifact
              OutputArtifacts:
                - Name: AcceptanceTestArtifact
              RunOrder: 1
        - Name: Production
          Actions:
            - Name: Promote-Parameters
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref ProductionParameterPromotionFunction
              RunOrder: 1
            - Name: Create-ChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: "#{change_set_name.value}"
                ParameterOverrides: !Sub |
                  {
                    "StorageStackName": "${InfrastructureStorageStackName}",
                    "InfrastructureGitCommit": "#{src_infra.CommitId}",
                    "Nonce": "#{codepipeline.PipelineExecutionId}",
                    "TemplateUrlBase": "#{s3_cpy.TemplateUrlBase}",
                    "EnvironmentType": "Production",
                    "EnvironmentTypeAbbreviation": "prod",
                    "PorterStateMachineArn": "/prx/prod/Spire/${AWS::Region}/porter-state-machine-arn",
                    "PorterJobExecutionTopicArn": "/prx/prod/Spire/${AWS::Region}/porter-job-execution-topic-arn",
                    "SharedAuroraMysqlEndpoint": "/prx/prod/Spire/${AWS::Region}/shared-mysql-database/endpoint",
                    "SharedAuroraPostgresqlEndpoint": "/prx/prod/Spire/${AWS::Region}/shared-postgresql-database/endpoint"
                  }
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: "#{production_stack_name.value}"
                TemplateConfiguration: TemplateConfigProductionZipArtifact::production.json
                TemplatePath: InfrastructureRepoSourceArtifact::stacks/root.yml
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 2
            - Name: Wait-For-Approval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              Configuration:
                NotificationArn: !Ref ProductionApprovalsSnsTopic
                CustomData: !Sub |
                  {
                    "PipelineExecutionId": "#{codepipeline.PipelineExecutionId}",
                    "StackName": "#{production_stack_name.value}",
                    "ChangeSetName": "#{change_set_name.value}",
                    "AccountId": "${AWS::AccountId}"
                  }
              RunOrder: 3
            - Name: Deploy-ChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                ChangeSetName: "#{change_set_name.value}"
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: "#{production_stack_name.value}"
              RunOrder: 4
            - Name: Capture-Params
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref ParameterCaptureFunction
                UserParameters: "#{production_stack_name.value}"
              RunOrder: 5
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  EmergencyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !GetAtt CdPipelineIamRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: PRX/Infrastructure
                BranchName: main
                OutputArtifactFormat: CODE_ZIP
                DetectChanges: false
              Namespace: src_infra
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
        - Name: Pre-Deploy
          Actions:
            - Name: S3-Template-Copy
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref InfrastructureRepoSourceS3SyncFunction
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              Namespace: s3_cpy
              RunOrder: 1
            - Name: Prod-Stack-Name
              # Creates a pipeline variable of the production stack name, for
              # convenience and consistency
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref EchoFunction
                UserParameters: !Sub ${AWS::StackName}-root-production
              Namespace: production_stack_name
              RunOrder: 1
            - Name: ChangeSet-Name
              # Creates a pipeline variable for the name used for change sets
              # created and executed by the pipeline's action, for
              # convenience and consistency
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref EchoFunction
                UserParameters: cd-change-set
              Namespace: change_set_name
              RunOrder: 1
        - Name: Production
          Actions:
            - Name: Capture-Params
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref ParameterCaptureFunction
                UserParameters: "#{production_stack_name.value}"
              RunOrder: 5
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }

  # The staging deploy stage of the pipeline includes an approval action
  # between the change set and deploy actions. This is not meant to actually
  # require manual approval. The approval action is used because it passes
  # useful data to the Lambda, which the basic custom Lambda action type does
  # not. The main point of this action is to send a Slack message that lists
  # the changes included in the deployment. It automatically approves itself.
  StagingApprovalsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  StagingDeltasFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pipeline-events-handler/
      Description: >-
        Sends a message about stack changes in a CloudFormation change set, and
        also automatically approves the invoking approval action in the
        pipeline
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopicArn
      Events:
        SnsMessages:
          Properties:
            Topic: !Ref StagingApprovalsSnsTopic
          Type: SNS
      Handler: staging-deltas.handler
      MemorySize: 128
      Policies:
        - !Ref CloudFormationReadOnlyAccessPolicy
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
        - Statement:
            - Action: codepipeline:PutApprovalResult
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 120
  StagingDeltasLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${StagingDeltasFunction}
      RetentionInDays: 14
  StagingDeltasNotificationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CD] Staging deltas <prod> INVOCATIONS ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The error rate on the diff notification lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref StagingDeltasFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  # The production deploy stage of the pipeline includes a manual approval
  # action. This is meant to actually require human approval for all production
  # change sets. The Lambda function sends a message to Slack with a list of
  # changes, and a button that will approve the deploy.
  ProductionApprovalsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  ProductionApprovalsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pipeline-events-handler/
      Description: >-
        Receives notifications from CodePipeline when approval is required, and
        builds a messages to alert externally
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopicArn
      Events:
        SnsMessages:
          Properties:
            Topic: !Ref ProductionApprovalsSnsTopic
          Type: SNS
      Handler: production-approval.handler
      MemorySize: 256
      Policies:
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
        - !Ref CloudFormationReadOnlyAccessPolicy
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 120
  ProductionApprovalsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProductionApprovalsFunction}
      RetentionInDays: 14
  ProductionApprovalsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CD] Production approvals <prod> INVOCATIONS ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The error rate on the approval notification handler lambda has exceeded
        0 in the last minute.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProductionApprovalsFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  # Watches for certain events in EventBridge related to the pipelines in this
  # stack.
  CdPipelineEventsTargetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pipeline-events-handler/
      Description: Responds to pipeline execution state change events
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopicArn
      Events:
        StateChange:
          Properties:
            Pattern:
              detail-type:
                - CodePipeline Action Execution State Change
                - CodePipeline Stage Execution State Change
                - CodePipeline Pipeline Execution State Change
              resources:
                - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
                - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${EmergencyPipeline}
              source:
                - aws.codepipeline
          Type: EventBridgeRule
      Handler: events.handler
      MemorySize: 128
      Policies:
        - !Ref CodePipelineStateReadOnlyAccessPolicy
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 8
  CdPipelineEventsTargetLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${CdPipelineEventsTargetFunction}
      RetentionInDays: 14
  CdPipelineEventsTargetErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CD] Pipeline events <prod> INVOCATIONS ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The error rate on the pipeline events handler lambda has exceeded
        0 in the last minute.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CdPipelineEventsTargetFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  # Acceptance Test Pipeline Action
  AcceptanceTestsCodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # Allow CodeBuild to log to CloudWatch
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  # NOTE These need to stay in sync with the CodeBuild Project
                  # name from below
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AcceptanceTests
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AcceptanceTests:*
            Version: "2012-10-17"
          PolicyName: CodeBuildLogs
        # CodeBuild sources from CodePipeline artifacts, so it needs access
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource: !Sub arn:aws:s3:::${ArtifactStore}/*
            Version: "2012-10-17"
          PolicyName: ArtifactStoreBasicAccess
        - PolicyDocument:
            Statement:
              - Action: ssm:GetParameters
                Effect: Allow
                Resource: "*" # TODO
            Version: "2012-10-17"
          PolicyName: ParameterStorePolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - states:StartExecution
                  - states:DescribeExecution
                Effect: Allow
                Resource: "*" # TODO
            Version: "2012-10-17"
          PolicyName: PorterPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  AcceptanceTestsCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Runs acceptance tests for PRX platform
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Sub 561178107736.dkr.ecr.${AWS::Region}.amazonaws.com/meta.prx.org:latest
        Type: LINUX_CONTAINER
      # If this Name changes, the CodeBuild role policy needs to change too
      Name: !Sub ${AWS::StackName}-AcceptanceTests
      ServiceRole: !GetAtt AcceptanceTestsCodeBuildIamRole.Arn
      Source:
        BuildSpec: buildspec-pipeline.yml
        Type: CODEPIPELINE
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
      TimeoutInMinutes: 5

  # Pipeline Custom Lambda Actions
  InfrastructureRepoSourceS3SyncFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/infrastructure-s3-sync/
      Description: Copies Infrastructure repo artifact to S3
      Environment:
        Variables:
          TEMPLATE_COPY_BUCKET_NAME: !Ref TemplateCopyBucket
          INFRASTRUCTURE_SOURCE_BUCKET:
            Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureSourceBucket
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Policies:
        - !Ref ArtifactBucketReadOnlyAccessPolicy
        - !Ref CodePipelineJobResultWriteAccessPolicy
        - !Ref SourceBucketWriteAccessPolicy
        - Statement:
            - Action: s3:PutObject
              Effect: Allow
              Resource:
                - !Sub ${TemplateCopyBucket.Arn}/*
          Version: "2012-10-17"
      Runtime: python3.9
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 8
  InfrastructureRepoSourceS3SyncLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${InfrastructureRepoSourceS3SyncFunction}
      RetentionInDays: 14
  InfrastructureRepoSourceS3SyncErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CD] Repo S3 sync <prod> INVOCATIONS ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The error rate on the S3 Sync lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref InfrastructureRepoSourceS3SyncFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  EchoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/echo/
      Description: tktktk # TODO
      Handler: index.handler
      MemorySize: 128
      Policies:
        - !Ref CodePipelineJobResultWriteAccessPolicy
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 8
  EchoLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${EchoFunction}
      RetentionInDays: 7

  ChangeSetCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/change-set-create/
      Description: >-
        Creates change sets
      Handler: index.handler
      MemorySize: 256
      Policies:
        - !Ref CloudFormationCreateChangeSetPolicy
        - !Ref CodePipelineJobResultWriteAccessPolicy
        - !Ref ArtifactBucketReadWriteAccessPolicy
        - Statement:
            - Action: iam:PassRole
              Effect: Allow
              Resource: !GetAtt CloudFormationIamRole.Arn
              Sid: AllowPassingCfnRole
          Version: "2012-10-17"
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 600 # 10 minutes
  ChangeSetCreateLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ChangeSetCreateFunction}
      RetentionInDays: 14
  ChangeSetCreateNotificationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CD] Changeset create <prod> INVOCATIONS ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The error rate on the change set create lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ChangeSetCreateFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ProductionParameterPromotionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/production-parameter-promotion/
      Description: >-
        Promotes staging Parameter Store values to their production equivalents
      Handler: index.handler
      MemorySize: 256
      Policies:
        - !Ref CodePipelineJobResultWriteAccessPolicy
        - Statement:
            - Action: ssm:GetParametersByPath
              Effect: Allow
              Resource:
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prx/stag/Spire*
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prx/prod/Spire*
            - Action: ssm:PutParameter
              Effect: Allow
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prx/prod/Spire/*
          Version: "2012-10-17"
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 8
  ProductionParameterPromotionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProductionParameterPromotionFunction}
      RetentionInDays: 14
  ProductionParameterPromotionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CD] Parameter promotion <prod> INVOCATIONS ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The error rate on the parameter promotion lambda has exceeded 0 in
        the last minute.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProductionParameterPromotionFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  ParameterCaptureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/parameter-capture/
      Description: TKTKTK
      Handler: index.handler
      Environment:
        Variables:
          INFRASTRUCTURE_SNAPSHOTS_BUCKET:
            Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureSnapshotsBucket
      MemorySize: 256
      Policies:
        - !Ref CloudFormationReadOnlyAccessPolicy
        - !Ref SnapshotsBucketWriteAccessPolicy
        - !Ref CodePipelineJobResultWriteAccessPolicy
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CD
      Timeout: 120
  ParameterCaptureLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ParameterCaptureFunction}
      RetentionInDays: 14
  ParameterCaptureErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CD] Parameter capture <prod> INVOCATIONS ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The Lambda function that captures Parameter Store values from
        successful deployments is failing, which could prevent rollbacks from
        behaving as expected.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ParameterCaptureFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  # Pipeline S3 Trigger
  # TODO Remove all this once we're off template config files
  CdPipelineS3TriggerTrailStore:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  CdPipelineS3TriggerTrailStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CdPipelineS3TriggerTrailStore
      PolicyDocument:
        Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Resource: !Sub arn:aws:s3:::${CdPipelineS3TriggerTrailStore}
            Sid: AWSCloudTrailAclCheck
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Resource: !Sub arn:aws:s3:::${CdPipelineS3TriggerTrailStore}/AWSLogs/${AWS::AccountId}/*
            Sid: AWSCloudTrailWrite
        Version: "2012-10-17"
  CdPipelineS3TriggerTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - CdPipelineS3TriggerTrailStoreBucketPolicy
    Properties:
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - Fn::Sub:
                    - arn:aws:s3:::${BucketName}/
                    - BucketName:
                        Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          IncludeManagementEvents: false
          ReadWriteType: WriteOnly
      IsLogging: true
      IsMultiRegionTrail: false
      S3BucketName: !Ref CdPipelineS3TriggerTrailStore
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  CdPipelineS3TriggerIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: codepipeline:StartPipelineExecution
                Effect: Allow
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
            Version: "2012-10-17"
          PolicyName: LambdaPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CD }
  CdPipelineS3TriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        Triggers CD CodePipeline when CloudTrail sees changes in S3 on the
        staging template config
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
            - CopyObject
          userIdentity:
            sessionContext:
              sessionIssuer:
                arn:
                  # CodePipeline does a CopyObject when it pulls in an S3
                  # object as part of a Source action, using the pipeline's
                  # role. To prevent an infinite loop, those events need to be
                  # filtered out
                  - anything-but: !GetAtt CdPipelineIamRole.Arn
          resources:
            ARN:
              - Fn::Sub:
                  - arn:aws:s3:::${BucketName}/${ObjectId}
                  - ObjectId: !Ref InfrastructureConfigStagingKey
                    BucketName:
                      Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
      State: ENABLED
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          Id: !Sub ${AWS::StackName}.CdPipelineS3Trigger
          RoleArn: !GetAtt CdPipelineS3TriggerIamRole.Arn
