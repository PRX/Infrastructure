# SOURCE ACTION GitHub
#
# CodeBuild
#   Run tests
#   Zip the code; name zip with something unique
#   Push zip to SOMEWHERE
#   Update template config with unique name of zip

AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates a CodePipeline that is used to handle CI/CD for the cms-audio lambda
Parameters:
  OpsDebugMessagesSNSTopicArn:
    Type: String
  GitHubOAuthToken:
    Type: String
  RootStackTemplateConfigBucket:
    Type: String
  RootStackTemplateConfigArchive:
    Type: String
Resources:
  ArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - Key: Project
          Value: Infrastructure
  CodePipelineIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: ArtifactStoreFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactStore}
                  - !Sub arn:aws:s3:::${ArtifactStore}/*
        - PolicyName: SqsTestQueuePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:sendMessage"
                Resource:
                  - "arn:aws:sqs:us-east-1:561178107736:test_cms_audio_callback"
        - PolicyName: S3TestBucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - "arn:aws:s3:::test.mediajoint.prx.org"
        - PolicyName: CodePipelineRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:*" # TODO Really?
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                Resource: "*" # TODO Really?
  CodeBuildIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  # NOTE When this policy is created by the AWS console during
                  # CodeBuild project creation, the log resources are tightly
                  # scoped to the project (eg log-group:/aws/codebuild/projName)
                  # but right now the name of that project isn't available until
                  # the project resource is created, and it relies on this IAM
                  # role. Need some way of that not being circular
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
        - PolicyName: ArtifactStoreBasicAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: !Sub arn:aws:s3:::${ArtifactStore}/*
        - PolicyName: TemplateConfigStoreBasicAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: !Sub arn:aws:s3:::${RootStackTemplateConfigBucket}/*
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: PRX
                Repo: cms-audio-lambda
                Branch: master
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: GitHubSourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref TestBuildProject
              InputArtifacts:
                - Name: GitHubSourceArtifact
              OutputArtifacts:
                - Name: TestBuildArtifact
              RunOrder: 1
  TestBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Tests lambda function and pushes the code to an S3 bucket
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: TEMPLATE_CONFIG_BUCKET
            Value: !Ref RootStackTemplateConfigBucket
          - Name: TEMPLATE_CONFIG_ARTIFACT
            Value: !Ref RootStackTemplateConfigArchive
        Image: aws/codebuild/nodejs:4.3.2
        Type: LINUX_CONTAINER
      Name: !Sub cms-audio-lambda-build-${AWS::Region} # TODO better name
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Source:
        Type: CODEPIPELINE
      Tags:
        - Key: Project
          Value: Infrastructure
      TimeoutInMinutes: 15
