# etc/cross-account-vpc-peering-requester.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Create a VPC Peering connection between two VPCs in different AWS accounts,
  using an existing trusted assumable role. It will optionally add a route to
  the peering connection to a given route table. This stack is for the requester
  side of the connection; the accepter side should approve the connection
  automatically since an appropriately-permissioned IAM user on that side is
  used to create the connection.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Peering Connection
        Parameters:
          - VpcPeeringConnectionName
      - Label:
          default: Requester VPC
        Parameters:
          - VpcId
          - RouteTableId
          - DestinationCidrBlock
      - Label:
          default: Accepter VPC
        Parameters:
          - PeerVpcId
          - PeerOwnerId
          - PeerRoleArn
          - PeerRegion
      - Label:
          default: Peering Connection Options
        Parameters:
          - AllowDnsResolutionFromRemoteVpc
    ParameterLabels:
      VpcPeeringConnectionName:
        default: Name
      VpcId:
        default: VPC ID
      RouteTableId:
        default: Route table ID
      PeerOwnerId:
        default: Accepter VPC owner account ID
      PeerRegion:
        default: Accepter VPC region
      PeerVpcId:
        default: Accepter VPC ID
      PeerRoleArn:
        default: Peering IAM role ARN
      DestinationCidrBlock:
        default: CIDR block
      AllowDnsResolutionFromRemoteVpc:
        default: DNS resolution from remote VPC

Parameters:
  VpcPeeringConnectionName:
    Type: String
    Description: >-
      A name tag to give to the VPC peering connection
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: >-
      The ID of the requester VPC. This will always be a VPC in the account
      this stack is being launched in.
  RouteTableId:
    Type: String
    Description: >-
      (Optional) A route table associated with the requester VPC. If provided,
      a route will be added to the table pointing to the accepter VPC.
  DestinationCidrBlock:
    Type: String
    Description: >-
      (Optional) The IPv4 CIDR address block used for the destination match.
      Generally this is the CIDR block of the accepter VPC. This value is
      required if a route table ID is provided.
  PeerOwnerId:
    Type: String
    Description: >-
      (Optional) The account ID that the accepter VPC belongs to. Used only for
      inter-account peering. When the requester and accepter VPCs are in the
      same account, leave blank.
  PeerVpcId:
    Type: String
    Description: >-
      The ID of the VPC to peer with in the accepter account, where there
      peering role exists
  PeerRegion:
    Type: String
    Description: >-
      (Optional) The region that the accepter VPC belongs to. Used only for
      inter-region peering. When the requester and accepter VPCs are in the
      same region, leave blank.
  PeerRoleArn:
    Type: String
    Description: >-
      (Optional) The ARN for a IAM role in the accepter VPC's account that has
      permission to accept VPC peering connections, and has a trust
      relationship with this account. Used only for inter-region peering. When
      the request and accepter VPCs are in the same account, leave blank.
  AllowDnsResolutionFromRemoteVpc:
    Type: String
    Description: >-
      Indicates whether DNS queries from the remote (accepter) VPC for public
      hostnames resolve to private IP addresses in the local (requester) VPC
    AllowedValues:
      - Enabled
      - Disabled

Conditions:
  HasRouteTableId: !Not [!Equals [!Ref RouteTableId, ""]]
  HasPeerOwnerId: !Not [!Equals [!Ref PeerOwnerId, ""]]
  HasPeerRegion: !Not [!Equals [!Ref PeerRegion, ""]]

Resources:
  VpcPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VpcId
      PeerVpcId: !Ref PeerVpcId
      PeerOwnerId: !If
        - HasPeerOwnerId
        - !Ref PeerOwnerId
        - !Ref AWS::NoValue
      PeerRegion: !If
        - HasPeerRegion
        - !Ref PeerRegion
        - !Ref AWS::NoValue
      PeerRoleArn: !Ref PeerRoleArn
      Tags:
        - Key: Name
          Value: !Ref VpcPeeringConnectionName
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  Route:
    Type: AWS::EC2::Route
    Condition: HasRouteTableId
    Properties:
      RouteTableId: !Ref RouteTableId
      VpcPeeringConnectionId: !Ref VpcPeeringConnection
      DestinationCidrBlock: !Ref DestinationCidrBlock

  VpcPeeringConnectionOptionsCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ModifyVpcPeeringConnectionOptionsFunction.Arn
      AllowDnsResolutionFromRemoteVpc: !Ref AllowDnsResolutionFromRemoteVpc
      VpcPeeringConnectionId: !Ref VpcPeeringConnection

  ModifyVpcPeeringConnectionOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >-
        Handles CloudFormation custom resource requests for modifying VPC
        peering connection options from the requester side. Deleting a custom
        resource that uses this service will leave the peering connection in
        its current state.
      Handler: index.handler
      InlineCode: |
        const AWS = require("aws-sdk");
        const cfnResponse = require("cfn-response");

        const ec2 = new AWS.EC2({ apiVersion: "2016-11-15" });

        exports.handler = async (event, context) => {
          try {
            console.log(JSON.stringify(event));
            const props = event.ResourceProperties;

            if (["Create", "Update"].includes(event.RequestType)) {
              const flag = props.AllowDnsResolutionFromRemoteVpc === "Enabled";

              const res = await ec2
                .modifyVpcPeeringConnectionOptions({
                  VpcPeeringConnectionId: props.VpcPeeringConnectionId,
                  RequesterPeeringConnectionOptions: {
                    AllowDnsResolutionFromRemoteVpc: flag,
                  },
                })
                .promise();
            }

            await cfnResponse.send(event, context, cfnResponse.SUCCESS, {});
          } catch (error) {
            console.log("Sending FAILED response");
            console.log(error);
            await cfnResponse.send(event, context, cfnResponse.FAILED, {});
          }
        };
      MemorySize: 128
      Policies:
        - Statement:
            - Action: ec2:ModifyVpcPeeringConnectionOptions
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs12.x
      Tags:
        Project: Admin
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 30
  ModifyVpcPeeringConnectionOptionsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ModifyVpcPeeringConnectionOptionsFunction}
      RetentionInDays: 7
