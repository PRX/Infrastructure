# devops/tooling-cd-pipeline.yml
# This template is deployed continuously via GitHub Actions.
#
# For each SAM application being deployed:
# 1. Add a parameter constant with the stack name of the new application
#    e.g. kMyAppStackName.
# 2. Add that stack to the CloudFormationAccess policy of the PipelineRole.
# 3. Update the build phase of the CodeBuild project to `sam build` and
#    `sam package` the application, The output-template-file should match the
#    stack name.
# 4. Add the output file of the `sam package` command to the artifacts files
#    list of the CodeBuild project (which is the stack name).
# 5. Add an action to the Deploy stage of the CodePipeline pipeline that
#    deploys the template from the CodeBuild artifacts that you added in step 4.
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a deployment pipeline in CodePipeline, along with CodeBuild projects
  and other resources needed to support the pipeline, for DevOps resources.

Parameters:
  kAllRegions:
    Type: CommaDelimitedList
    # Excludes: af-south-1, eu-south-1, me-south-1, ap-east-1
    Default: us-east-1,us-east-2,us-west-1,us-west-2,ap-south-1,ap-northeast-3,ap-northeast-2,ap-southeast-1,ap-southeast-2,ap-northeast-1,ca-central-1,eu-central-1,eu-west-1,eu-west-2,eu-west-3,eu-north-1,sa-east-1
  kCloudFormationNotificationsStackName:
    Type: String
    Default: prx-devops-cloudformation-notifications
  kCloudFormationCustomResourceLambdasStacksetName:
    Type: String
    Default: cfn-custom-resources-all-regions
  kCloudFormationMacroFunctionsStackName:
    Type: String
    Default: prx-devops-cloudformation-macro-functions
  kCloudWatchAlarmsStackName:
    Type: String
    Default: prx-devops-cloudwatch-alarms-to-slack
  kCloudWatchAlarmRemindersStackName:
    Type: String
    Default: prx-devops-cloudwatch-alarm-reminders
  kSlackAppStackName:
    Type: String
    Default: prx-devops-slack-app
  kStatuspageStackName:
    Type: String
    Default: prx-devops-statuspage
  kHealthEventsStackName:
    Type: String
    Default: prx-devops-health-events
  ######
  GitHubCodeStarConnectionArn: { Type: String }
  OrganizationId:
    Type: String
    AllowedPattern: ^$|^(o-[a-z0-9]{4,32})$
  CrossAccountCloudWatchAlarmIamRoleName: { Type: String }
  AwsOrganizationCrossAccountSharingRoleArn: { Type: String }
  DevOpsCrossAccountAccessRoleName: { Type: String }
  DevOpsSlackUserIds: { Type: String }
  LegacySlackMessageRelayTopicArn: { Type: String }
  PrxLegacyAccountId: { Type: String }
  SlackAccessToken: { Type: String }
  SlackSigningSecet: { Type: String }
  StatuspageApiKey: { Type: String }
  FatalSmsContactListSnsTopicArn: { Type: String }
  CloudWatchAlarmReminderRegions: { Type: CommaDelimitedList }
  CloudWatchAlarmReminderAccountIds: { Type: CommaDelimitedList }

Resources:
  # These roles are being created here as a matter of convenience. They could
  # (and, perhaps, should) be moved into discrete templates and deployed as
  # part of the pipeline. They are not strictly related to the tooling
  # pipeline, but currently that's all they're used for.
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html
  StackSetExecutionRole:
    # This role is used to perform operations on stack instances within
    # StackSets. It must have any permissions required to perform those
    # operations. For example, if a stack instance creates an SNS topic, this
    # role must be able to create SNS topics.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - cloudformation:*
                  - cloudwatch:*
                  - lambda:*
                  - logs:*
                  - sns:*
                  - sts:AssumeRole
                Effect: Allow
                Resource: "*"
                Sid: AllowGlobalResourceUpdates
              - Action:
                  - iam:*
                Effect: Allow
                Resource:
                  # We need to grant this role permissions to manage IAM roles
                  # found in the stacks that it will be managing, but don't
                  # want to grant wildcard access to all IAM resources. This is
                  # a best-effort attempt to achieve least-privilege.
                  #
                  # Stacks managed by StackSets are always named like:
                  # StackSet-my_stack. Roles created by those stacks will have
                  # names that begin with the first several (~20-30) characters of
                  # the stack. Therefore we know that for any given stack, a
                  # role will be named like "StackSet-my_stack-MyRole-123ABC".
                  #
                  # We do define the stack name (e.g., my_stack) in this
                  # template, so we can scope this permission down to only
                  # those that appear to originate from these sort of StackSet-
                  # managed stacks with names we know.
                  #
                  # Add a resource below for each stack that includes IAM roles
                  # being managed in this way. Each ARN should end with a
                  # wildcard ("*").
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/StackSet-cfn-custom*
                Sid: AllowStackSpecificUpdates
            Version: "2012-10-17"
          PolicyName: CfnResourceManipulation
      RoleName: AWSCloudFormationStackSetExecutionRole
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  StackSetAdministrationRole:
    # This role is used by StackSets. It assumes an execution role to perform
    # operations on stack instances. It is only intended to assume the
    # execution role in this account, thus StackSets can only deploy within
    # this account.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sts:AssumeRole
                Effect: Allow
                Resource: !GetAtt StackSetExecutionRole.Arn
                Sid: AllowExecutionRoleAssumption
            Version: "2012-10-17"
          PolicyName: StackSetAdministration
      RoleName: AWSCloudFormationStackSetAdministrationRole
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }

  # Runs `sam build` and `sam package`, and outputs the resulting
  # CloudFormation template as an artifact.
  SamCodeBuildProjectLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  SamCodeBuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  SamCodeBuildProjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: Allow
            Resource: !Sub ${PipelineArtifactStore.Arn}/*
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !GetAtt SamCodeBuildProjectLogGroup.Arn
        Version: "2012-10-17"
      PolicyName: PorterSamCodeBuildProjectPolicy
      Roles:
        - !Ref SamCodeBuildProjectRole
  SamCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Builds and packages chat ops via SAM for future deployment
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref SamCodeBuildProjectLogGroup
          Status: ENABLED
      ServiceRole: !GetAtt SamCodeBuildProjectRole.Arn
      Source:
        BuildSpec: !Sub |-
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: latest
            build:
              commands:
                - sam build --parallel --template-file ./devops/tooling/cfn-macro-functions/template.yml
                - sam package --s3-bucket ${PipelineArtifactStore} --output-template-file ./${kCloudFormationMacroFunctionsStackName}

                - sam build --parallel --template-file ./devops/tooling/chat-ops/cloudformation-notifications/template.yml
                - sam package --s3-bucket ${PipelineArtifactStore} --output-template-file ./${kCloudFormationNotificationsStackName}

                - sam build --parallel --template-file ./devops/tooling/chat-ops/cloudwatch-alarms/template.yml
                - sam package --s3-bucket ${PipelineArtifactStore} --output-template-file ./${kCloudWatchAlarmsStackName}

                - sam build --parallel --template-file ./devops/tooling/chat-ops/cloudwatch-alarm-reminders/template.yml
                - sam package --s3-bucket ${PipelineArtifactStore} --output-template-file ./${kCloudWatchAlarmRemindersStackName}

                - sam build --parallel --template-file ./devops/tooling/chat-ops/slack-app/template.yml
                - sam package --s3-bucket ${PipelineArtifactStore} --output-template-file ./${kSlackAppStackName}

                - sam build --parallel --template-file ./devops/tooling/statuspage/template.yml
                - sam package --s3-bucket ${PipelineArtifactStore} --output-template-file ./${kStatuspageStackName}

                - sam build --parallel --template-file ./devops/tooling/chat-ops/health-events/template.yml
                - sam package --s3-bucket ${PipelineArtifactStore} --output-template-file ./${kHealthEventsStackName}
          artifacts:
            files:
              - ${kCloudFormationMacroFunctionsStackName}
              - ${kCloudFormationNotificationsStackName}
              - ${kCloudWatchAlarmsStackName}
              - ${kCloudWatchAlarmRemindersStackName}
              - ${kSlackAppStackName}
              - ${kStatuspageStackName}
              - ${kHealthEventsStackName}
            name: SamBuildArtifact
        Type: CODEPIPELINE
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
      TimeoutInMinutes: 15

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:DeleteBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Effect: Deny
                Resource: "*"
              - Action: cloudformation:*
                Effect: Allow
                Resource: "*"
              - Action:
                  - cloudwatch:*
                  - events:*
                  - iam:*
                  - lambda:*
                  - logs:*
                  - s3:*
                  - sns:*
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: ResourceManipulationPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }

  PipelineArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # CodePipeline seems to need access to special buckets
        - PolicyDocument:
            Statement:
              - Action: s3:PutObject
                Effect: Allow
                Resource: arn:aws:s3:::codepipeline*
            Version: "2012-10-17"
          PolicyName: GenericCodePipelineS3PutPolicy
        # Let CodePipeline read and write artifacts
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                Effect: Allow
                Resource:
                  - !GetAtt PipelineArtifactStore.Arn
                  - !Sub ${PipelineArtifactStore.Arn}/*
            Version: "2012-10-17"
          PolicyName: ArtifactStoreFullAccess
        # To allow the pipeline to use a CodeStar Connection
        - PolicyDocument:
            Statement:
              - Action: codestar-connections:*
                Condition:
                  ForAllValues:StringEquals:
                    codestar-connections:PassedToService: codepipeline.amazonaws.com
                Effect: Allow
                Resource: !Ref GitHubCodeStarConnectionArn
            Version: "2012-10-17"
          PolicyName: CodeStarConnectionPolicy
        # Allow interaction with CodeBuild actions
        - PolicyDocument:
            Statement:
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource: !GetAtt SamCodeBuildProject.Arn
            Version: "2012-10-17"
          PolicyName: CodeBuildActionPolicy
        # Let CodePipeline describe CloudFormation stacks
        - PolicyDocument:
            Statement:
              - Action: cloudformation:*
                Effect: Allow
                Resource:
                  # Stacks
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${kCloudWatchAlarmsStackName}/*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${kCloudWatchAlarmRemindersStackName}/*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${kSlackAppStackName}/*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${kCloudFormationMacroFunctionsStackName}/*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${kCloudFormationNotificationsStackName}/*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${kStatuspageStackName}/*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${kHealthEventsStackName}/*
                  # StackSets
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/${kCloudFormationCustomResourceLambdasStacksetName}:*
            Version: "2012-10-17"
          PolicyName: CloudFormationAccess
        # Allow PassRole to the CloudFormation role
        - PolicyDocument:
            Statement:
              - Action: iam:PassRole
                Effect: Allow
                Resource: !GetAtt CloudFormationRole.Arn
            Version: "2012-10-17"
          PolicyName: IamPassRole
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactStore
        Type: S3
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref GitHubCodeStarConnectionArn
                FullRepositoryId: PRX/Infrastructure
                BranchName: main
                OutputArtifactFormat: CODE_ZIP
                DetectChanges: false
              OutputArtifacts:
                - Name: InfraRepoSourceArtifact
              RunOrder: 1

        - Name: Build
          Actions:
            # The output artifact is the CloudFormation template that's a
            # result of `sam build && sam package`
            - Name: SAM_Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref SamCodeBuildProject
              InputArtifacts:
                - Name: InfraRepoSourceArtifact
              OutputArtifacts:
                - Name: SamBuildArtifact
              RunOrder: 1

        # Everything in this stage is a standard, single CloudFormation stack
        # deploy and is intended to have one instance globally
        - Name: Deploy_Once
          Actions:
            - Name: CloudFormation_Macro_Functions
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ParameterOverrides: !Sub |
                  {
                    "OrganizationId": "${OrganizationId}"
                  }
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref kCloudFormationMacroFunctionsStackName
                TemplatePath: !Sub SamBuildArtifact::${kCloudFormationMacroFunctionsStackName}
              InputArtifacts:
                - Name: SamBuildArtifact
              RunOrder: 1
            - Name: Slack_App
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ParameterOverrides: !Sub |
                  {
                    "AwsOrganizationCrossAccountSharingRoleArn": "${AwsOrganizationCrossAccountSharingRoleArn}",
                    "DevOpsCrossAccountAccessRoleName": "${DevOpsCrossAccountAccessRoleName}",
                    "DevOpsSlackUserIds": "${DevOpsSlackUserIds}",
                    "LegacySlackMessageRelayTopicArn": "${LegacySlackMessageRelayTopicArn}",
                    "PrxLegacyAccountId": "${PrxLegacyAccountId}",
                    "SlackAccessToken": "${SlackAccessToken}",
                    "SlackSigningSecet": "${SlackSigningSecet}",
                    "OrganizationId": "${OrganizationId}"
                  }
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref kSlackAppStackName
                TemplatePath: !Sub SamBuildArtifact::${kSlackAppStackName}
              InputArtifacts:
                - Name: SamBuildArtifact
              Namespace: slack_app_deploy
              RunOrder: 1
            - Name: Statuspage
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ParameterOverrides: !Sub |
                  {
                    "StatuspageApiKey": "${StatuspageApiKey}"
                  }
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref kStatuspageStackName
                TemplatePath: !Sub SamBuildArtifact::${kStatuspageStackName}
              InputArtifacts:
                - Name: SamBuildArtifact
              Namespace: statuspage_deploy
              RunOrder: 1
            - Name: HealthEvents
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref kHealthEventsStackName
                TemplatePath: !Sub SamBuildArtifact::${kHealthEventsStackName}
              InputArtifacts:
                - Name: SamBuildArtifact
              Namespace: healthevents_deploy
              RunOrder: 2
            - Name: CloudWatch_Alarms
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ParameterOverrides: !Sub |
                  {
                    "OrganizationId": "${OrganizationId}",
                    "FatalSmsContactListSnsTopicArn": "${FatalSmsContactListSnsTopicArn}",
                    "CrossAccountCloudWatchAlarmIamRoleName": "${CrossAccountCloudWatchAlarmIamRoleName}"
                  }
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref kCloudWatchAlarmsStackName
                TemplatePath: !Sub SamBuildArtifact::${kCloudWatchAlarmsStackName}
              InputArtifacts:
                - Name: SamBuildArtifact
              RunOrder: 2
            - Name: CloudWatch_Alarm_Reminders
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ParameterOverrides: !Sub
                  - |-
                    {
                      "CrossAccountCloudWatchAlarmIamRoleName": "${CrossAccountCloudWatchAlarmIamRoleName}",
                      "Regions": "${regions}",
                      "AccountIds": "${accounts}"
                    }
                  - regions: !Join [",", !Ref CloudWatchAlarmReminderRegions]
                    accounts: !Join [",", !Ref CloudWatchAlarmReminderAccountIds]
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref kCloudWatchAlarmRemindersStackName
                TemplatePath: !Sub SamBuildArtifact::${kCloudWatchAlarmRemindersStackName}
              InputArtifacts:
                - Name: SamBuildArtifact
              RunOrder: 2
            - Name: CloudFormation_Notifications
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                ParameterOverrides: !Sub |
                  {
                    "OrganizationId": "${OrganizationId}"
                  }
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref kCloudFormationNotificationsStackName
                TemplatePath: !Sub SamBuildArtifact::${kCloudFormationNotificationsStackName}
              InputArtifacts:
                - Name: SamBuildArtifact
              RunOrder: 2

        # Everything in this stage is deployed to all regions of the DevOps
        # account, making those resources available within all regions, even
        # from other accounts (using cross-account access). This is done using
        # stacksets.
        - Name: Deploy_All_Regions
          Actions:
            - Name: CloudFormation_CustomResource_Functions
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: !Ref kCloudFormationCustomResourceLambdasStacksetName
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                Description: >-
                  Launches a stack in each region in the DevOps account
                  to create Lambda functions that back CloudFormation custom
                  resource types that are available organization-wide.
                TemplatePath: InfraRepoSourceArtifact::devops/tooling/cfn-custom-resources/template.yml
                Parameters: !Sub |-
                  ParameterKey=OrganizationId,ParameterValue=${OrganizationId}
                PermissionModel: SELF_MANAGED
                DeploymentTargets: !Ref AWS::AccountId
                Regions: !Join [",", !Ref kAllRegions]
                FailureTolerancePercentage: 0
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfraRepoSourceArtifact
              RunOrder: 1

      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }

  PipelineStateChangeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Sends messages when DevOps pipeline state changes
      Events:
        PipelineState:
          Properties:
            Pattern:
              detail-type:
                - CodePipeline Pipeline Execution State Change
              resources:
                - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
              source:
                - aws.codepipeline
          Type: EventBridgeRule
      Handler: index.handler
      InlineCode: |
        const { EventBridgeClient, PutEventsCommand } = require('@aws-sdk/client-eventbridge');

        const eventbridge = new EventBridgeClient({ apiVersion: '2015-10-07' });

        exports.handler = async (event) => {
          console.log(JSON.stringify(event));

          let msg;

          // https://docs.aws.amazon.com/codepipeline/latest/userguide/detect-state-changes-cloudwatch-events.html#detect-state-events-types
          if (event['detail-type'] === 'CodePipeline Pipeline Execution State Change') {
            if (event.detail.state === 'SUCCEEDED') {
                msg = `DevOps deploy pipeline in ${event.region} succeeded`;
            } else if (event.detail.state === 'FAILED') {
                msg = `:x: DevOps deploy pipeline in ${event.region} failed`;
            } else if (event.detail.state === 'STARTED') {
              msg = `:hourglass_flowing_sand: DevOps deploy pipeline in ${event.region} started`;
            }
          }

          if (msg) {
            await eventbridge.send (
              new PutEventsCommand({
                Entries: [{
                  Source: 'org.prx.tooling-cd-pipeline',
                  DetailType: 'Slack Message Relay Message Payload',
                  Detail: JSON.stringify({
                    channel: '#ops-deploys',
                    username: 'AWS CodePipeline',
                    icon_emoji: ':ops-codepipeline:',
                    text: msg,
                  }),
                }]
              }));
          }
        };
      MemorySize: 128
      Policies:
        - Statement:
            - Action: events:PutEvents
              Effect: Allow
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
          Version: "2012-10-17"
      Runtime: nodejs20.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: DevOps
      Timeout: 3
  PipelineStateChangeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${PipelineStateChangeFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
