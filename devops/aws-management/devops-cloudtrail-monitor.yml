# devops/aws-management/devops-cloudtrail-monitor.yml
# This stack creates EventBridge rules.
#
# The rules are expected to exist on *all* default event buses within the AWS
# Organization. Event buses are regional, thus this stack is intended to be
# launched once for every region in every account within the organization.
#
# Rules are created to watch for specific activity patterns that appear on the
# event bus from CloudTrail. CloudTrail trails should likewise exist in all
# accounts and all regions, so this should provide full coverage of the
# organization for the given activity patterns.
#
# When such activity is detected, a Lambda function is triggered (generally to
# send alerts). These functions are created alongside the rules (in each
# account and each region); the detected events are **not** forwarded to other
# event buses.
#
# Sample CloudWatch Events event (from CloudTrail)
# {
#    "version": "0",
#    "id": "a76750eb-b69f-ae47-b183-4d3cb0700618",
#    "detail-type": "AWS API Call via CloudTrail",
#    "source": "aws.s3",
#    "account": "048723829744",
#    "time": "2018-05-22T12:44:24Z",
#    "region": "us-east-1",
#    "resources": [],
#    "detail": {
#       "eventVersion": "1.05",
#       "userIdentity": {},
#       "eventTime": "2018-05-22T12:44:24Z",
#       "eventSource": "s3.amazonaws.com",
#       "eventName": "DeleteBucket",
#       "awsRegion": "us-east-1",
#       "sourceIPAddress": "209.6.231.175",
#       "userAgent": "[S3Console/0.4, aws-internal/3]",
#       "requestParameters": {},
#       "responseElements": null,
#       "additionalEventData": {
#          "vpcEndpointId": "vpce-6d72a204"
#       },
#       "requestID": "51A7870C114C931C",
#       "eventID": "d687e2af-5a29-4acb-bc41-6892b36420bf",
#       "eventType": "AwsApiCall",
#       "vpcEndpointId": "vpce-6d72a204"
#    }
# }

AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates EventBridge rules that watch CloudTrail for specific types of
  activity, which trigger a Lambda function (used for generating notifications,
  etc). This stack is intended to be launched in all regions and all accounts.

Parameters:
  SlackMessageRelayTopicArn:
    Type: String

Resources:
  MonitorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: !Ref SlackMessageRelayTopicArn
            Version: "2012-10-17"
          PolicyName: SnsPolicy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: prx:meta:tagging-version
          Value: "2021-04-07"
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
        - Key: prx:ops:environment
          Value: Production
        - Key: prx:dev:application
          Value: Security
  MonitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const { SNS } = require('@aws-sdk/client-sns');

          const sns = new SNS({
            apiVersion: '2010-03-31',
            region: process.env.SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN.split(':')[3],
          });

          exports.handler = async (event) => {
            console.log(JSON.stringify(event));

            await sns.publish({
              TargetArn: process.env.SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN,
              Message: JSON.stringify({
                channel: 'G2QH13X62', // #ops-fatal
                username: 'AWS CloudTrail',
                icon_emoji: ':ops-cloudtrail:',
                text: `Root account event detected - ${event.account} ${event['detail-type']} ${event.region} ${event.detail.eventName}`,
              }),
            });
          };
      Description: >-
        Receives CloudWatch Events rule events related to CloudTrail activity
        and sends alerting messages to the Slack relay
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN: !Ref SlackMessageRelayTopicArn
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt MonitorFunctionRole.Arn
      Runtime: nodejs18.x
      Tags:
        - Key: prx:meta:tagging-version
          Value: "2021-04-07"
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
        - Key: prx:ops:environment
          Value: Production
        - Key: prx:dev:application
          Value: Security
      Timeout: 8
  MonitorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${MonitorFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Security }

  EventsRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource: !GetAtt MonitorFunction.Arn
            Version: "2012-10-17"
          PolicyName: LambdaPolicy
      Tags:
        - Key: prx:meta:tagging-version
          Value: "2021-04-07"
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
        - Key: prx:ops:environment
          Value: Production
        - Key: prx:dev:application
          Value: Security

  CloudTrailRootActivityEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Invokes the monitor function when root activity is detected
      EventPattern:
        detail:
          userIdentity:
            type:
              - Root
        detail-type:
          - AWS API Call via CloudTrail
          - AWS Console Sign In via CloudTrail
      RoleArn: !GetAtt EventsRuleRole.Arn
      State: ENABLED
      Targets:
        - Arn: !GetAtt MonitorFunction.Arn
          Id: CloudTrail-RootActivity
  CloudTrailRootActivityEventsRuleInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MonitorFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudTrailRootActivityEventsRule.Arn
