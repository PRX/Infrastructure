AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Creates a CodePipeline for use in the management account of an AWS
  Organization to create and maintain a set of resources used for security,
  compliance, permissions, etc.

Parameters:
  CodeStarConnectionArn:
    Type: String
  OrganizationId:
    Type: String
    Description: e.g. o-a1s2d3f4f5g
    AllowedPattern: ^(o-[a-z0-9]{4,32})$
  OrganizationRootId:
    Type: String
    AllowedPattern: ^(ou-[a-z0-9]{4,32}-[a-z0-9]{8,32}|r-[a-z0-9]{4,32})$
  Region:
    Type: String
    AllowedValues:
      - us-east-1
      - us-east-2
    Default: us-east-2
  SlackMessageRelayTopicArn:
    Type: String

Resources:
  PipelineArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  PipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # CodePipeline seems to need access to special buckets
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - arn:aws:s3:::codepipeline*
            Version: "2012-10-17"
          PolicyName: GenericCodePipelineS3PutPolicy
        # Let CodePipeline read and write artifacts
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                Resource:
                  - !GetAtt PipelineArtifactStore.Arn
                  - !Sub ${PipelineArtifactStore.Arn}/*
          PolicyName: ArtifactStoreFullAccess
        # To allow the pipeline to use a CodeStar Connection
        - PolicyDocument:
            Statement:
              - Action:
                  - codestar-connections:*
                Condition:
                  "ForAllValues:StringEquals":
                    "codestar-connections:PassedToService": codepipeline.amazonaws.com
                Effect: Allow
                Resource:
                  - !Ref CodeStarConnectionArn
            Version: "2012-10-17"
          PolicyName: CodeStarConnectionPolicy
        # Let CodePipeline describe CloudFormation stacks
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource:
                  - "*" # TODO
                  # - arn:aws:cloudformation:*::type/resource/AWS-IAM-ManagedPolicy
                  # # Add each StackSetName from the pipeline's actions. There
                  # # will be both a root and wildcard resource for each.
                  # - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/org-devops-cross-account-access-role
                  # - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/org-devops-cross-account-access-role:*
        # Allow PassRole to the CloudFormation role
        # - PolicyDocument:
        #     Statement:
        #       - Action:
        #           - iam:PassRole
        #         Effect: Allow
        #         Resource:
        #           - !GetAtt CloudFormationIamRole.Arn
        #     Version: "2012-10-17"
        #   PolicyName: IamPassRole
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactStore
        Type: S3
      RoleArn: !GetAtt PipelineIamRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: PRX/Infrastructure
                BranchName: master
                OutputArtifactFormat: CODE_ZIP
              Namespace: infrastructure_repo
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            # DevOps cross-account access role
            - Name: DevopsCrossAccountAccessRoleStackSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-devops-cross-account-access-role
                Capabilities: CAPABILITY_NAMED_IAM
                Description: >-
                  Launches a stack in one region in each account in an AWS Organization
                  to add the CloudWatch-CrossAccountSharingRole IAM role to each account,
                  which provides read-only access to that account's CloudWatch data.
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/devops-cross-account-access-role.yml
                Parameters: !Sub ParameterKey=OrganizationId,ParameterValue=${OrganizationId}
                PermissionModel: SERVICE_MANAGED
                OrganizationsAutoDeployment: EnabledWithStackRetention
                DeploymentTargets: !Ref OrganizationRootId
                Regions: !Ref Region
                FailureTolerancePercentage: 0
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # CloudWatch cross-account data sharing role
            - Name: CloudWatchDataSharingRoleStackSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-cloudwatch-data-sharing-role
                Capabilities: CAPABILITY_NAMED_IAM
                Description: >-
                  Launches a stack in one region in each account in an AWS Organization
                  to add the CloudWatch-CrossAccountSharingRole IAM role to each account,
                  which provides read-only access to that account's CloudWatch data.
                TemplatePath: InfrastructureRepoSourceArtifact::etc/cloudwatch-data-sharing-role.yml
                Parameters: !Sub ParameterKey=OrganizationId,ParameterValue=${OrganizationId}
                PermissionModel: SERVICE_MANAGED
                OrganizationsAutoDeployment: EnabledWithStackRetention
                DeploymentTargets: !Ref OrganizationRootId
                Regions: !Ref Region
                FailureTolerancePercentage: 0
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1






            # Root account activity monitor
            # - Name: RootAccountActivityMonitorStackSet
            #   ActionTypeId:
            #     Category: Deploy
            #     Owner: AWS
            #     Provider: CloudFormationStackSet
            #     Version: "1"
            #   Configuration:
            #     StackSetName: org-root-account-activity-monitor2
            #     Capabilities: CAPABILITY_IAM
            #     Description: >-
            #       Launches a root account activity monitor in one region in each account
            #       in an AWS Organization. An activity monitor can monitor activity in all
            #       regions in the account it belongs to.
            #     TemplatePath: InfrastructureRepoSourceArtifact::etc/root-account-activity-monitor.yml
            #     Parameters: !Sub ParameterKey=SlackMessageRelayTopicArn,ParameterValue=${SlackMessageRelayTopicArn}
            #     PermissionModel: SERVICE_MANAGED
            #     OrganizationsAutoDeployment: EnabledWithStackRetention
            #     # DeploymentTargets:
            #     Regions: !Ref Region
            #     FailureTolerancePercentage: 0
            #     MaxConcurrentPercentage: 100
            #   InputArtifacts:
            #     - Name: InfrastructureRepoSourceArtifact
            #   RunOrder: 1

      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
