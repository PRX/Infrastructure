# devops/aws-management/devops-iam-key-monitor.yml
# The Lambda function deployed by this stack uses the
# DevOps-CrossAccountAccessRole role to fetch necessary information from the
# accounts that are being monitored.
#
# Ensure that the DevOps-CrossAccountAccessRole exists in each account prior
# to launching this stack. See devops-cross-account-access-role.yml for more
# details. This function expects List* and Read* permissions for several
# different IAM resources (groups, keys, etc) to be present on
# DevOps-CrossAccountAccessRole.
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Regularly scans IAM keys in various accounts looking for ones that are old
  and should be rotated. Sends a Slack message. This stack should only be
  launched once within the AWS Organization.

Parameters:
  SlackMessageRelayTopicArn:
    Type: String

Resources:
  MonitorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >-
        Scans for stale IAM keys
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN: !Ref SlackMessageRelayTopicArn
      Events:
        Poller:
          Properties:
            Description: Runs the IAM key scan
            Enabled: true
            Schedule: rate(1 day)
          Type: Schedule
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');
        const { SNS } = require('@aws-sdk/client-sns');
        const { STS } = require('@aws-sdk/client-sts');
        const { IAM } = require('@aws-sdk/client-iam');

        const sns = new SNS({ apiVersion: '2010-03-31' });
        const sts = new STS({ apiVersion: '2011-06-15' });

        const lookup = {
          '048723829744': ['Organization-Owners'],
          '561178107736': ['Admins'],
          '976680550710': ['Owners'],
        };

        const names = {
          '048723829744': 'prx-main',
          '561178107736': 'prx-legacy',
          '976680550710': 'The World',
        };

        const ignore_users = ['chef'];

        const THRESHOLD_DAYS = 5;
        const THRESHOLD = THRESHOLD_DAYS * 86400 * 1000;

        exports.handler = async (event) => {
          const now = +new Date();
          const lines = [];

          for (const accountId of Object.keys(lookup)) {
            const roleArn = `arn:aws:iam::${accountId}:role/DevOps-CrossAccountAccessRole`;

            const role = await sts
              .assumeRole({
                RoleArn: roleArn,
                RoleSessionName: 'iam_key_monitor',
              });

            const iam = new IAM({
              apiVersion: '2010-05-08',
              accessKeyId: role.Credentials.AccessKeyId,
              secretAccessKey: role.Credentials.SecretAccessKey,
              sessionToken: role.Credentials.SessionToken,
            });

            for (const groupName of lookup[accountId]) {
              const group = await iam.getGroup({
                GroupName: groupName,
              });

              for (const groupUser of group.Users) {
                if (ignore_users.includes(groupUser.UserName)) { continue; }

                const keys = await iam.listAccessKeys({
                  UserName: groupUser.UserName,
                });

                const activeKeys = keys.AccessKeyMetadata.filter(k => k.Status === 'Active');
                const staleKeys = activeKeys.filter(k => now - +k.CreateDate > THRESHOLD);

                for (const staleKey of staleKeys) {
                  const ageMs = now - +staleKey.CreateDate;
                  const ageDays = Math.round(ageMs / 86400000);

                  let line = `\`${groupUser.UserName}\` @ \`${names[accountId]}\` â€“ Key age: *${ageDays}* days`;

                  const usage = await iam.getAccessKeyLastUsed({
                    AccessKeyId: staleKey.AccessKeyId,
                  });

                  if (usage?.AccessKeyLastUsed?.LastUsedDate) {
                    const lastUsedMs = now - +usage.AccessKeyLastUsed.LastUsedDate;
                    const lastUsedDays = Math.round(lastUsedMs / 86400000);

                    if (lastUsedDays > 7) {
                      line = `${line}; last activity: *${lastUsedDays}* days.`;
                    } else {
                      line = `${line}; used recently.`;
                    }

                  } else {
                    line = `${line}; no activity.`;
                  }

                  let icon = ':warning:';
                  if (ageDays > 180) {
                    icon = ':bangbang:';
                  }
                  line = `${icon} ${line}`;

                  lines.push(line);
                }
              }
            }
          }

          if (lines.length) {
            await sns.publish({
              TargetArn: process.env.SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN,
              Message: JSON.stringify({
                channel: 'G2QH13X62', // #ops-fatal
                username: 'AWS IAM',
                icon_emoji: ':ops-iam:',
                text: lines.join("\n"),
              }),
            });
          }
        };

      MemorySize: 128
      Policies:
        - Statement:
            - Action: sns:Publish
              Effect: Allow
              Resource: !Ref SlackMessageRelayTopicArn
          Version: "2012-10-17"
        - Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Resource: arn:aws:iam::*:role/DevOps-CrossAccountAccessRole
          Version: "2012-10-17"
      Runtime: nodejs18.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: Security
      Timeout: 8
  MonitorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${MonitorFunction}
      RetentionInDays: 30
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Security }
