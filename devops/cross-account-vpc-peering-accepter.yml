# etc/cross-account-vpc-peering-accepter.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates resources to support the accepter side of an already-created VPC
  peering connection.

Parameters:
  DestinationCidrBlock:
    Type: String
    Description: >-
      The IPv4 CIDR address block used for the destination match.
  VpcPeeringConnectionId:
    Type: String
    Description: >-
      The VPC peering connection that will be added to the route table
  PublicRouteTableId:
    Type: String
    Description: >-
      A route will be added to the table for the VPR peering connection
  PrivateRouteTableId:
    Type: String
    Description: >-
      A route will be added to the table for the VPR peering connection
  AllowDnsResolutionFromRemoteVpc:
    Type: String
    Description: >-
      Indicates whether DNS queries from the remote (requester) VPC for public
      hostnames resolve to private IP addresses in the local (accepter) VPC
    AllowedValues:
      - Enabled
      - Disabled

Conditions:
  HasPublicRouteTableId: !Not [!Equals [!Ref PrivateRouteTableId, ""]]
  HasPrivateRouteTableId: !Not [!Equals [!Ref PrivateRouteTableId, ""]]

Resources:
  PublicRoute:
    Type: AWS::EC2::Route
    Condition: HasPublicRouteTableId
    Properties:
      RouteTableId: !Ref PublicRouteTableId
      VpcPeeringConnectionId: !Ref VpcPeeringConnectionId
      DestinationCidrBlock: !Ref DestinationCidrBlock
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: HasPrivateRouteTableId
    Properties:
      RouteTableId: !Ref PrivateRouteTableId
      VpcPeeringConnectionId: !Ref VpcPeeringConnectionId
      DestinationCidrBlock: !Ref DestinationCidrBlock

  VpcPeeringConnectionOptionsCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ModifyVpcPeeringConnectionOptionsFunction.Arn
      AllowDnsResolutionFromRemoteVpc: !Ref AllowDnsResolutionFromRemoteVpc
      VpcPeeringConnectionId: !Ref VpcPeeringConnectionId

  ModifyVpcPeeringConnectionOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >-
        Handles CloudFormation custom resource requests for modifying VPC
        peering connection options from the accepter side
      Handler: index.handler
      InlineCode: |
        const AWS = require("aws-sdk");
        const cfnResponse = require("cfn-response");

        const ec2 = new AWS.EC2({ apiVersion: "2016-11-15" });

        exports.handler = async (event, context) => {
          try {
            console.log(JSON.stringify(event));
            const props = event.ResourceProperties;

            if (["Create", "Update"].includes(event.RequestType)) {
              const flag = props.AllowDnsResolutionFromRemoteVpc === "Enabled";

              const res = await ec2
                .modifyVpcPeeringConnectionOptions({
                  VpcPeeringConnectionId: props.VpcPeeringConnectionId,
                  AccepterPeeringConnectionOptions: {
                    AllowDnsResolutionFromRemoteVpc: flag,
                  },
                })
                .promise();
            }

            await cfnResponse.send(event, context, cfnResponse.SUCCESS, {});
          } catch (error) {
            console.log("Sending FAILED response");
            console.log(error);
            await cfnResponse.send(event, context, cfnResponse.FAILED, {});
          }
        };
      MemorySize: 128
      Policies:
        - Statement:
            - Action: ec2:ModifyVpcPeeringConnectionOptions
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs12.x
      Tags:
        Project: Admin
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 30
  ModifyVpcPeeringConnectionOptionsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ModifyVpcPeeringConnectionOptionsFunction}
      RetentionInDays: 7
