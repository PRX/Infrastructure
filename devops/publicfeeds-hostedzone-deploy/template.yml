# devops/publicfeeds-hostedzone-deploy/template.yml
# Creates a CodePipeline that continuously deploys the
# dns/publicfeeds.net-hosted_zone.yml template.
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Builds a release pipeline via CodePipeline to deploy the publicfeeds.net
  hosted zone stack.
Parameters:
  HostedZoneStackName:
    Type: String
  GitHubToken:
    Description: >-
      A GitHub access token with permissions to update statuses, request
      content, etc
    Type: String
  GitHubWebhookSecret:
    Description: >-
      A secret used to sign requests made by GitHub to webhook endpoints.
      This secret is shared by all webhooks created by this template.
    Type: String
Resources:
  PipelineArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  PipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # CodePipeline seems to need access to special buckets
        - PolicyName: GenericCodePipelineS3PutPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::codepipeline*
        # Let CodePipeline read and write artifacts
        - PolicyName: ArtifactStoreFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                Resource:
                  - !Sub arn:aws:s3:::${PipelineArtifactStore}
                  - !Sub arn:aws:s3:::${PipelineArtifactStore}/*
        # Let CodePipeline describe CloudFormation stacks
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${HostedZoneStackName}
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${HostedZoneStackName}/*
        # Allow PassRole to the CloudFormation role
        - PolicyName: IamPassRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - !GetAtt CloudFormationIamRole.Arn
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactStore
        Type: S3
      RoleArn: !GetAtt PipelineIamRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: PRX
                Repo: Infrastructure
                Branch: master
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}ProductionChangeSet
                # These are the parameters of dns/publicfeeds.net-hosted_zone.yml
                # ParameterOverrides: !Sub |
                #   {
                #     "Domain": "publicfeeds.net"
                #   }
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: !Ref HostedZoneStackName
                TemplatePath: InfrastructureRepoSourceArtifact::dns/publicfeeds.net-hosted_zone.yml
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${AWS::StackName}ProductionChangeSet
                RoleArn: !GetAtt CloudFormationIamRole.Arn
                StackName: !Ref HostedZoneStackName
              RunOrder: 2
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  PipelineInfrastructureRepoGitHubWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubWebhookSecret
      Filters:
        - JsonPath: "$.ref"
          # Properties from the target action configuration can be included as
          # placeholders in this value by surrounding the action configuration
          # key with curly braces. For example, if the value supplied here is
          # "refs/heads/{Branch}" and the target action has an action
          # configuration property called "Branch" with a value of "master",
          # the MatchEquals value will be evaluated as "refs/heads/master".
          MatchEquals: "refs/heads/{Branch}"
      RegisterWithThirdParty: true
      TargetAction: InfrastructureRepo
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: !GetAtt Pipeline.Version
  # CloudFormation Pipeline
  CloudFormationIamRole:
    # This role gets passed to CloudFormation, and is used by CloudFormation to
    # to perform actions against other AWS resources.
    #
    # This is the role used to launch the root stack, and thus all nested app
    # and service stacks. It needs permissions to create any of the resources
    # that those stacks require. Eg, if a stack nested in the root stack
    # includes an S3 bucket resource, this role needs a policy that allows it
    # to create S3 buckets.
    # NOTE This role should not be given to anything other than the CodePipeline
    # CloudFormation actions! It's very powerful!
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        # Wildcard access to CloudFormation stack and changesets. Explicitly
        # denies stack deletion.
        - PolicyName: StackManipulationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              #
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${HostedZoneStackName}/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:changeSet/*"
              - Effect: Deny
                Action:
                  - "cloudformation:DeleteStack"
                Resource: "*"
        # These are permissions for the services that are needed to create
        # resources defined in the resources that cdn/dovetail-cdn.yml
        # Currently:
        # - CloudFront distribution
        # - CloudWatch alarms
        - PolicyName: Route53Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudfront:ListDistributions"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "route53:*"
                Resource: "*"
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  # Notifications
  PipelineNotifications:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
      DetailType: FULL
      EventTypeIds:
        - codepipeline-pipeline-pipeline-execution-failed
        - codepipeline-pipeline-pipeline-execution-succeeded
      Name: publicfeeds-hostedzone-pipeline-notifications
      Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
      Targets:
        - TargetType: AWSChatbotSlack
          TargetAddress: !Ref SlackChannelConfiguration
  SlackChannelConfigurationIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - chatbot.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Policies:
        - PolicyName: ChatbotNotificationsOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:Describe*
                  - cloudwatch:Get*
                  - cloudwatch:List*
                Resource:
                  - "*"
  SlackChannelConfiguration:
    Type: AWS::Chatbot::SlackChannelConfiguration
    Properties:
      ConfigurationName: publicfeeds-hostedzone-deploys
      IamRoleArn: !GetAtt SlackChannelConfigurationIamRole.Arn
      SlackChannelId: G56AY609G
      SlackWorkspaceId: T0256R4CK
