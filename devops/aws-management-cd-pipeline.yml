# devops/aws-management-cd-pipeline.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates a CodePipeline for use in the management account of an AWS
  Organization to create and maintain a set of resources used for security,
  compliance, permissions, etc.

Parameters:
  kAllRegions:
    Type: CommaDelimitedList
    # Excludes: af-south-1, eu-south-1, me-south-1, ap-east-1
    Default: us-east-1,us-east-2,us-west-1,us-west-2,ap-south-1,ap-northeast-3,ap-northeast-2,ap-southeast-1,ap-southeast-2,ap-northeast-1,ca-central-1,eu-central-1,eu-west-1,eu-west-2,eu-west-3,eu-north-1,sa-east-1
  ######
  CodeStarConnectionArn:
    Type: String
  OrganizationId:
    Type: String
    Description: e.g. o-a1s2d3f4f5g
    AllowedPattern: ^(o-[a-z0-9]{4,32})$
  OrganizationRootId:
    Type: String
    AllowedPattern: ^(ou-[a-z0-9]{4,32}-[a-z0-9]{8,32}|r-[a-z0-9]{4,32})$
  SingleRegion:
    Type: String
    Description: >-
      For stack sets that deploy to a single region in all accounts, this
      is that region
    AllowedValues:
      - us-east-1
      - us-east-2
    Default: us-east-2
  SlackMessageRelayTopicArn:
    Type: String
  CloudWatchMonitoringAccountIds:
    Description: >-
      Allows one or more monitoring accounts to view AWS Organization account
      list. Enter AWS account ids, 12 numeric digits in comma-separated list
    Type: String
  DevOpsCloudWatchAlarmsBusArn:
    Type: String
  CloudTrailProjectionRegions:
    Description: >-
      A list of regions that will be included in Glue table partitions for
      a table created for the organization trail logs
    Type: CommaDelimitedList
  CloudTrailProjectionAccounts:
    Description: >-
      A list of accounts that will be included in Glue table partitions for
      a table created for the organization trail logs
    Type: CommaDelimitedList

Resources:
  PipelineArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }

  PipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: "2012-10-17"
      Policies:
        # CodePipeline seems to need access to special buckets
        - PolicyDocument:
            Statement:
              - Action: s3:PutObject
                Effect: Allow
                Resource: arn:aws:s3:::codepipeline*
            Version: "2012-10-17"
          PolicyName: GenericCodePipelineS3PutPolicy
        # Let CodePipeline read and write artifacts
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                Resource:
                  - !GetAtt PipelineArtifactStore.Arn
                  - !Sub ${PipelineArtifactStore.Arn}/*
          PolicyName: ArtifactStoreFullAccess
        # To allow the pipeline to use a CodeStar Connection
        - PolicyDocument:
            Statement:
              - Action: codestar-connections:*
                Condition:
                  ForAllValues:StringEquals:
                    codestar-connections:PassedToService: codepipeline.amazonaws.com
                Effect: Allow
                Resource: !Ref CodeStarConnectionArn
            Version: "2012-10-17"
          PolicyName: CodeStarConnectionPolicy
        # Let CodePipeline describe CloudFormation stacks
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: cloudformation:*
                Resource:
                  - "*" # TODO
                  # - arn:aws:cloudformation:*::type/resource/AWS-IAM-ManagedPolicy
                  # # Add each StackSetName from the pipeline's actions. There
                  # # will be both a root and wildcard resource for each.
                  # - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/org-devops-cross-account-access-role
                  # - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/org-devops-cross-account-access-role:*
            Version: "2012-10-17"
        # Allow PassRole to the CloudFormation role
        - PolicyDocument:
            Statement:
              - Action: iam:PassRole
                Effect: Allow
                Resource:
                  - !GetAtt DevopsCrossAccountAccessRoleStackCloudFormationRole.Arn
                  - !GetAtt CloudWatchDataSharingRoleStackCloudFormationRole.Arn
                  - !GetAtt CloudWatchSharingListAccountsRoleStackCloudFormationRole.Arn
                  - !GetAtt OrganizationDataSharingRoleStackCloudFormationRole.Arn
                  - !GetAtt OrganizationCloudTrailStackCloudFormationRole.Arn
                  - !GetAtt GitHubOidcRoleStackCloudFormationRole.Arn
            Version: "2012-10-17"
          PolicyName: IamPassRole
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactStore
        Type: S3
      RoleArn: !GetAtt PipelineIamRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: PRX/Infrastructure
                BranchName: master
                OutputArtifactFormat: CODE_ZIP
                DetectChanges: false
              Namespace: infrastructure_repo
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1

        - Name: Management_Account-One_Region
          # These actions all deploy a single CloudFormation stack to the same
          # region and account as this pipeline
          Actions:
            # DevOps-CrossAccountAccessRole IAM role
            - Name: DevopsCrossAcctRole
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub ${AWS::StackName}DevopsCrossAcctRole
                ParameterOverrides: !Sub |
                  {
                    "OrganizationId": "${OrganizationId}"
                  }
                RoleArn: !GetAtt DevopsCrossAccountAccessRoleStackCloudFormationRole.Arn
                StackName: !Sub ${AWS::StackName}-devops-cross-account-access-role
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/devops-cross-account-access-role.yml
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # CloudWatch-CrossAccountSharingRole IAM role
            - Name: CloudWatchCrossAcctRole
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub ${AWS::StackName}CloudWatchCrossAcctRole
                ParameterOverrides: !Sub |
                  {
                    "OrganizationId": "${OrganizationId}"
                  }
                RoleArn: !GetAtt CloudWatchDataSharingRoleStackCloudFormationRole.Arn
                StackName: !Sub ${AWS::StackName}-cloudwatch-data-sharing-role
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/cloudwatch-data-sharing-role.yml
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # CloudWatch-CrossAccountSharing-ListAccountsRole IAM role
            # This is a magagement account-only stack
            - Name: CloudWatchListAcctRole
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub ${AWS::StackName}CloudWatchListAcctRole
                ParameterOverrides: !Sub |
                  {
                    "MonitoringAccountIds": "${CloudWatchMonitoringAccountIds}"
                  }
                RoleArn: !GetAtt CloudWatchSharingListAccountsRoleStackCloudFormationRole.Arn
                StackName: cloudwatch-sharing-list-accounts-role
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/cloudwatch-data-sharing-org-list-role.yml
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # PRX-Oganization-CrossAccountSharingRole IAM role
            # This is a magagement account-only stack
            - Name: OrgDataSharingRole
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub ${AWS::StackName}OrgDataSharingRole
                ParameterOverrides: !Sub |
                  {
                    "OrganizationId": "${OrganizationId}"
                  }
                RoleArn: !GetAtt OrganizationDataSharingRoleStackCloudFormationRole.Arn
                StackName: organization-data-sharing-role
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/organization-cross-account-sharing-role.yml
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # CloudTrail Organization trail
            - Name: OrgTrail
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub ${AWS::StackName}OrgTrail
                ParameterOverrides: !Sub
                  - >-
                    {
                      "OrganizationId": "${OrganizationId}",
                      "ProjectionRegions": "${regions}",
                      "ProjectionAccounts": "${accounts}"
                    }
                  - regions: !Join [",", !Ref CloudTrailProjectionRegions]
                    accounts: !Join [",", !Ref CloudTrailProjectionAccounts]
                RoleArn: !GetAtt OrganizationCloudTrailStackCloudFormationRole.Arn
                StackName: organization-trail
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/organization-trail.yml
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # DevOps-GitHubOidcFederatedRole IAM role
            - Name: GitHubOidcRole
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                ChangeSetName: !Sub ${AWS::StackName}GitHubOidcRole
                RoleArn: !GetAtt GitHubOidcRoleStackCloudFormationRole.Arn
                StackName: !Sub ${AWS::StackName}-github-oidc-role
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/github-oidc-role.yml
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1

        - Name: Management_Account-All_Regions
          # These actions all deploy a stackset to the same account as this
          # pipeline, which creates stacks in all regions of that account
          Actions:
            # CloudWatch Alarms event bus
            - Name: CloudWatchAlarmsBus
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-cloudwatch-alarms-event-bus-mgmt
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                Description: >-
                  Launches a stack in each region in the management account
                  to create a rule on the default event bus that forwards
                  CloudWatch Alarm state changes to the DevOps event bus.
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/organization-alarms-bus.yml
                Parameters: !Sub |-
                  ParameterKey=DevOpsCloudWatchAlarmsBusArn,ParameterValue=${DevOpsCloudWatchAlarmsBusArn}
                PermissionModel: SELF_MANAGED
                DeploymentTargets: !Ref AWS::AccountId
                Regions: !Join [",", !Ref kAllRegions]
                FailureTolerancePercentage: 0
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # CloudTrail monitor
            - Name: CloudTrailMonitor
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-cloudtrail-monitor-mgmt
                Capabilities: CAPABILITY_NAMED_IAM
                Description: >-
                  Launches a stack in each region in the management account
                  to create a Lambda function that can monitor CloudTrails for
                  various types of activity.
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/devops-cloudtrail-monitor.yml
                Parameters: !Sub ParameterKey=SlackMessageRelayTopicArn,ParameterValue=${SlackMessageRelayTopicArn}
                PermissionModel: SELF_MANAGED
                DeploymentTargets: !Ref AWS::AccountId
                Regions: !Join [",", !Ref kAllRegions]
                FailureTolerancePercentage: 0
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1

        - Name: Organization_Accounts-One_Region
          # These actions all deploy a stackset to the same region as this
          # pipeline, which creates stacks in one region in every account in
          # the organization
          Actions:
            # DevOps-CrossAccountAccessRole IAM role
            - Name: DevopsCrossAcctRole
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-devops-cross-account-access-role
                Capabilities: CAPABILITY_NAMED_IAM
                Description: >-
                  Launches a stack in one region in each account in an AWS Organization
                  to add the DevOps-CrossAccountAccessRole IAM role to each account,
                  which provides access to various resources for DevOps purposes.
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/devops-cross-account-access-role.yml
                Parameters: !Sub ParameterKey=OrganizationId,ParameterValue=${OrganizationId}
                PermissionModel: SERVICE_MANAGED
                OrganizationsAutoDeployment: EnabledWithStackRetention
                DeploymentTargets: !Ref OrganizationRootId
                Regions: !Ref SingleRegion
                FailureTolerancePercentage: 8
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # CloudWatch-CrossAccountSharingRole IAM role
            - Name: CloudWatchCrossAcctRole
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-cloudwatch-data-sharing-role
                Capabilities: CAPABILITY_NAMED_IAM
                Description: >-
                  Launches a stack in one region in each account in an AWS Organization
                  to add the CloudWatch-CrossAccountSharingRole IAM role to each account,
                  which provides read-only access to that account's CloudWatch data.
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/cloudwatch-data-sharing-role.yml
                Parameters: !Sub ParameterKey=OrganizationId,ParameterValue=${OrganizationId}
                PermissionModel: SERVICE_MANAGED
                OrganizationsAutoDeployment: EnabledWithStackRetention
                DeploymentTargets: !Ref OrganizationRootId
                Regions: !Ref SingleRegion
                FailureTolerancePercentage: 8
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # CloudFormation Macros
            - Name: CfnMacros
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-cfn-macros
                Capabilities: CAPABILITY_NAMED_IAM
                Description: >-
                  Launches a stack in one region in each account in an AWS Organization
                  to create all standard CloudFormation macros
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/devops-cfn-macros.yml
                # Parameters: !Sub ParameterKey=OrganizationId,ParameterValue=${OrganizationId}
                PermissionModel: SERVICE_MANAGED
                OrganizationsAutoDeployment: EnabledWithStackRetention
                DeploymentTargets: !Ref OrganizationRootId
                Regions: !Ref SingleRegion
                FailureTolerancePercentage: 8
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # DevOps-GitHubOidcFederatedRole IAM role
            - Name: GitHubOidcRole
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-github-oidc-role
                Capabilities: CAPABILITY_NAMED_IAM
                Description: >-
                  Launches a stack in one region in each account in an AWS Organization
                  to create the GitHub OIDC role
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/github-oidc-role.yml
                PermissionModel: SERVICE_MANAGED
                OrganizationsAutoDeployment: EnabledWithStackRetention
                DeploymentTargets: !Ref OrganizationRootId
                Regions: !Ref SingleRegion
                FailureTolerancePercentage: 8
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1

        - Name: Organization_Accounts-All_Regions
          # These actions all deploy a stackset to the same region as this
          # pipeline, which creates stacks in one region in every account in
          # the organization
          Actions:
            # CloudWatch Alarms event bus
            - Name: CloudWatchAlarmsBus
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-cloudwatch-alarms-event-bus
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                Description: >-
                  Launches a stack in each region in each account in an AWS Organization
                  to create a rule on the default event bus that forwards CloudWatch
                  Alarm state changes to the DevOps event bus.
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/organization-alarms-bus.yml
                Parameters: !Sub |-
                  ParameterKey=DevOpsCloudWatchAlarmsBusArn,ParameterValue=${DevOpsCloudWatchAlarmsBusArn}
                PermissionModel: SERVICE_MANAGED
                OrganizationsAutoDeployment: EnabledWithStackRetention
                DeploymentTargets: !Ref OrganizationRootId
                Regions: !Join [",", !Ref kAllRegions]
                FailureTolerancePercentage: 10
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            # CloudTrail monitor
            - Name: CloudTrailMonitor
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormationStackSet
                Version: "1"
              Configuration:
                StackSetName: org-cloudtrail-monitor
                Capabilities: CAPABILITY_NAMED_IAM
                Description: >-
                  Launches a stack in each region in each account in an AWS Organization
                  to create a Lambda function that can monitor CloudTrails for various
                  types of activity.
                TemplatePath: InfrastructureRepoSourceArtifact::devops/aws-management/devops-cloudtrail-monitor.yml
                Parameters: !Sub ParameterKey=SlackMessageRelayTopicArn,ParameterValue=${SlackMessageRelayTopicArn}
                PermissionModel: SERVICE_MANAGED
                OrganizationsAutoDeployment: EnabledWithStackRetention
                DeploymentTargets: !Ref OrganizationRootId
                Regions: !Join [",", !Ref kAllRegions]
                FailureTolerancePercentage: 10
                MaxConcurrentPercentage: 100
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1

      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }

  DevopsCrossAccountAccessRoleStackCloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - iam:AttachRolePolicy
                  - iam:CreatePolicy
                  - iam:CreatePolicyVersion
                  - iam:CreateRole
                  - iam:DeletePolicy
                  - iam:DeletePolicyVersion
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:Get*
                  - iam:List*
                  - iam:PutRolePolicy
                  - iam:SetDefaultPolicyVersion
                  - iam:Tag*
                  - iam:Untag*
                  - iam:UpdateAssumeRolePolicy
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: ResourceManipulationPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  GitHubOidcRoleStackCloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - iam:AddClientIDToOpenIDConnectProvider
                  - iam:AttachRolePolicy
                  - iam:CreateOpenIDConnectProvider
                  - iam:CreatePolicy
                  - iam:CreatePolicyVersion
                  - iam:CreateRole
                  - iam:DeleteOpenIDConnectProvider
                  - iam:DeletePolicy
                  - iam:DeletePolicyVersion
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:Get*
                  - iam:List*
                  - iam:PutRolePolicy
                  - iam:RemoveClientIDFromOpenIDConnectProvider
                  - iam:SetDefaultPolicyVersion
                  - iam:Tag*
                  - iam:Untag*
                  - iam:UpdateAssumeRolePolicy
                  - iam:UpdateOpenIDConnectProviderThumbprint
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: ResourceManipulationPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  CloudWatchDataSharingRoleStackCloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - iam:AttachRolePolicy
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:Get*
                  - iam:List*
                  - iam:PutRolePolicy
                  - iam:Tag*
                  - iam:Untag*
                  - iam:UpdateAssumeRolePolicy
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: ResourceManipulationPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  CloudWatchSharingListAccountsRoleStackCloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - iam:AttachRolePolicy
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:Get*
                  - iam:List*
                  - iam:PutRolePolicy
                  - iam:Tag*
                  - iam:Untag*
                  - iam:UpdateAssumeRolePolicy
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: ResourceManipulationPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  OrganizationDataSharingRoleStackCloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: ResourceManipulationPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:AttachRolePolicy
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:Get*
                  - iam:List*
                  - iam:PutRolePolicy
                  - iam:Tag*
                  - iam:Untag*
                  - iam:UpdateAssumeRolePolicy
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                Resource: "*"
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  OrganizationCloudTrailStackCloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:CreateBucket
                  - s3:Get*
                  - s3:List*
                  - s3:PutBucketOwnershipControls
                  - s3:PutBucketPolicy
                  - s3:PutBucketTagging
                  - s3:PutLifecycleConfiguration
                  - s3:PutObjectTagging
                Effect: Allow
                Resource: "*"
              - Action: cloudtrail:*
                Effect: Allow
                Resource: "*"
              - Action:
                  - iam:CreateServiceLinkedRole
                  - iam:GetRole
                Effect: Allow
                Resource: "*"
              - Action:
                  - organizations:DescribeOrganization
                  - organizations:DisableAWSServiceAccess
                  - organizations:EnableAWSServiceAccess
                  - organizations:ListAccounts
                  - organizations:ListAWSServiceAccessForOrganization
                Effect: Allow
                Resource: "*"
              - Action: logs:*
                Effect: Allow
                Resource: "*"
              - Action: lambda:*
                Effect: Allow
                Resource: "*"
              - Action: glue:*
                Effect: Allow
                Resource: "*"
              - Action: athena:*
                Effect: Allow
                Resource: "*"
              - Action: cloudformation:*
                Effect: Allow
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
            Version: "2012-10-17"
          PolicyName: ResourceManipulationPolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }

  SlackRelaySnsPublishOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource: !Ref SlackMessageRelayTopicArn
            Sid: AllowSlackSnsPublish
        Version: "2012-10-17"

  PipelineStateChangeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Sends a message when DevOps pipeline completes
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelayTopicArn
      Events:
        PipelineState:
          Properties:
            Pattern:
              detail-type:
                - CodePipeline Pipeline Execution State Change
              resources:
                - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
              source:
                - aws.codepipeline
          Type: EventBridgeRule
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');

        const sns = new AWS.SNS({
          apiVersion: '2010-03-31',
          region: process.env.SLACK_MESSAGE_RELAY_TOPIC_ARN.split(':')[3]
        });

        exports.handler = async (event) => {
          console.log(JSON.stringify(event));

          let msg;

          // https://docs.aws.amazon.com/codepipeline/latest/userguide/detect-state-changes-cloudwatch-events.html#detect-state-events-types
          if (event['detail-type'] === 'CodePipeline Pipeline Execution State Change') {
            if (event.detail.state === 'SUCCEEDED') {
                msg = 'The Management & DevOps pipeline, in `prx-main`, finished deploying.';
            } else if (event.detail.state === 'FAILED') {
                msg = ':x: The Management & DevOps pipeline, in `prx-main`, failed.'
            }
          }

          if (msg) {
            await sns
              .publish({
                TopicArn: process.env.SLACK_MESSAGE_RELAY_TOPIC_ARN,
                Message: JSON.stringify({
                  channel: '#ops-deploys',
                  username: 'AWS CodePipeline',
                  icon_emoji: ':ops-codepipeline:',
                  text: msg,
                }),
              })
              .promise();
          }
        };
      MemorySize: 128
      Policies:
        - !Ref SlackRelaySnsPublishOnlyAccessPolicy
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: DevOps
      Timeout: 3
  PipelineStateChangeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PipelineStateChangeFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
