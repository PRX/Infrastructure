AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Creates backend resources for the PRX DevOps Slack app

Parameters:
  SlackSigningSecet:
    Type: String
  SlackAccessToken:
    Type: String
  LegacySlackMessageRelayTopicArn:
    Type: String
  AwsOrganizationCrossAccountSharingRoleArn:
    Type: String
    Description: >-
      A role that exists in the AWS Organization management account, and has
      permissions for actions such as organizations:ListAccounts and other
      actions that can only exist in the management account.
  DevOpsCrossAccountAccessRoleName:
    Type: String
    Description: >-
      The name of a role that exists in all member accounts of an AWS
      Organization, which has permissions for various DevOps operations, such
      as listing and executing pipelines.
  DevOpsSlackUserIds:
    Type: String
  PrxLegacyAccountId:
    Type: String
  InfrastructureConfigBucket:
    Type: String
  InfrastructureConfigStagingKey:
    Type: String

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # Domain:
      #   CertificateArn: !Ref ApiCertificate
      #   DomainName: !Ref ApiDomain
      Tags:
        Project: DevOps
  SlackSdkLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: node-slack-sdk NPM module
      ContentUri: lambda-layers/node-slack-sdk
      CompatibleRuntimes:
        - nodejs14.x
  AppFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StsPolicy
          PolicyDocument:
            Statement:
              - Action: sts:AssumeRole
                Effect: Allow
                Resource:
                  - arn:aws:iam::*:role/*Oganization-CrossAccountSharingRole
                  - !Sub arn:aws:iam::*:role/*${DevOpsCrossAccountAccessRoleName}
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  AppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-src/app/
      Description: Handles Slack api requests
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecet
          SLACK_ACCESS_TOKEN: !Ref SlackAccessToken
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          AWS_ORGANIZATION_CROSS_ACCOUNT_SHARING_ROLE_ARN: !Ref AwsOrganizationCrossAccountSharingRoleArn
          DEVOPS_CROSS_ACCOUNT_ACCESS_ROLE_NAME: !Ref DevOpsCrossAccountAccessRoleName
          DEVOPS_SLACK_USER_IDS: !Ref DevOpsSlackUserIds
          PRX_LEGACY_ACCOUNT_ID: !Ref PrxLegacyAccountId
          INFRASTRUCTURE_CONFIG_BUCKET: !Ref InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
      Events:
        EventRequest:
          Properties:
            ApiId: !Ref HttpApi
            Method: post
            Path: /v1/slack/events
          Type: HttpApi
        InteractiveRequest:
          Properties:
            ApiId: !Ref HttpApi
            Method: post
            Path: /v1/slack/interactive
          Type: HttpApi
      Handler: index.handler
      Layers:
        - !Ref SlackSdkLambdaLayer
      MemorySize: 512
      Role: !GetAtt AppFunctionIamRole.Arn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: DevOps
      Timeout: 8
  AppFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AppFunction}
      RetentionInDays: 14

  RelayFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-src/relay/
      Description: Relays messages to Slack
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecet
          SLACK_ACCESS_TOKEN: !Ref SlackAccessToken
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Destination: !Ref RelayFunctionFailureSnsTopic
            Type: SNS
        MaximumRetryAttempts: 2
      Events:
        Relay:
          Properties:
            Topic: !Ref SlackMessageRelaySnsTopic
          Type: SNS
        LegacyRelay:
          Properties:
            Region: us-east-1
            Topic: !Ref LegacySlackMessageRelayTopicArn
          Type: SNS
      Handler: index.handler
      Layers:
        - !Ref SlackSdkLambdaLayer
      MemorySize: 128
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: DevOps
      Timeout: 8
  RelayFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RelayFunction}
      RetentionInDays: 14
  RelayFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[DevOps][Slack Relay] Elevated error volume"
      # AlarmActions:
      #   - !Ref OpsWarnMessagesSnsTopicArn
      # InsufficientDataActions:
      #   - !Ref OpsWarnMessagesSnsTopicArn
      # OKActions:
      #   - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        Slack relay function has encountered several invocation errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 120
      Statistic: Sum
      Threshold: 5
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref RelayFunction
  RelayFunctionFailureSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
  RelayFunctionFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[DevOps][Slack Relay] Experiencing failures"
      # AlarmActions:
      #   - !Ref OpsWarnMessagesSnsTopicArn
      # InsufficientDataActions:
      #   - !Ref OpsWarnMessagesSnsTopicArn
      # OKActions:
      #   - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        Slack relay function has failed to send some messages, even after
        retrying several times
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TopicName
          Value: !GetAtt RelayFunctionFailureSnsTopic.TopicName
      EvaluationPeriods: 1
      MetricName: NumberOfMessagesPublished
      Namespace: AWS/SNS
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
  SlackMessageRelaySnsTopic:
    Type: AWS::SNS::Topic
    # This SNS topic is retained to prevent clients that are configured to
    # publish to it from breaking if the stack gets torn down. In cases where
    # the stack is being moved or replaced, the retained topic should be
    # imported into the new stack, or the new subscriber should continue to
    # subscribe to this topic
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }
