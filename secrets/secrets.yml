AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates the bucket and lambda needed to support application secrets
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
          - NotificationsStackName
      - Label:
          default: Infrastructure Config
        Parameters:
          - InfrastructureConfigStagingKey
          - InfrastructureConfigProductionKey
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      NotificationsStackName:
        default: Notifications stack name
      InfrastructureConfigStagingKey:
        default: Staging S3 object key
      InfrastructureConfigProductionKey:
        default: Production S3 object key
Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  NotificationsStackName:
    Default: notifications
    Description: The name of a previously launched notifications stack
    Type: String
  InfrastructureConfigStagingKey:
    Default: template-config-staging.zip
    Description: >
      The S3 object key for the staging template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  InfrastructureConfigProductionKey:
    Default: template-config-production.zip
    Description: >
      The S3 object key for the production template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
Resources:
  SecretsIAMGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: !Sub ${InfrastructureStorageStackName}-manage-secrets
      Path: "/"
      Policies:
        - PolicyName: !Sub ${InfrastructureStorageStackName}-encrypt-secrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Id: !Sub key-${InfrastructureStorageStackName}-secrets-encrypt-policy
                Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                Resource:
                  - !GetAtt SecretsKey.Arn
        - PolicyName: !Sub ${InfrastructureStorageStackName}-secrets-s3-read-write
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Id: !Sub key-${InfrastructureStorageStackName}-secrets-group-access-policy
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${InfrastructureStorageStackName}-secrets/*
  SecretsInstanceDecryptPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub key-${InfrastructureStorageStackName}-secrets-instance-decrypt-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !GetAtt SecretsKey.Arn
  SecretsInstanceAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub key-${InfrastructureStorageStackName}-secrets-instance-access-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub arn:aws:s3:::${InfrastructureStorageStackName}-secrets/*
  SecretsKey:
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "kms:*"
            Resource: "*"
  SecretsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${InfrastructureStorageStackName}-secrets
      TargetKeyId: !Ref SecretsKey
  SecretsLambdaExecutionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource:
                  - "*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:getObject"
                  - "s3:putObject"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigProductionKey]]
              - Effect: Allow
                Action:
                  - "s3:getObject"
                  - "s3:getObjectVersion"
                Resource:
                  - !Sub arn:aws:s3:::${InfrastructureStorageStackName}-secrets/*
        - PolicyName: CloudWatchMetricsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  SecretsS3UpdateFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: secrets/secrets-s3-update.zip
      Description: >
        Updates template config when secrets change
      Environment:
        Variables:
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_PRODUCTION_KEY: !Ref InfrastructureConfigProductionKey
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt SecretsLambdaExecutionIAMRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
      Timeout: 8
  SecretsBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${InfrastructureStorageStackName}-secrets
      Tags:
        - Key: Project
          Value: Infrastructure
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !Ref SecretsS3UpdateFunction
            Event: "s3:ObjectCreated:*"
Outputs:
  SecretsKey:
    Value: !Ref SecretsKey
    Export:
      Name: !Sub ${InfrastructureStorageStackName}-SecretsKey
  SecretsInstanceDecryptPolicy:
    Value: !Ref SecretsInstanceDecryptPolicy
    Export:
      Name: !Sub ${InfrastructureStorageStackName}-SecretsInstanceDecryptPolicy
  SecretsInstanceAccessPolicy:
    Value: !Ref SecretsInstanceAccessPolicy
    Export:
      Name: !Sub ${InfrastructureStorageStackName}-SecretsInstanceAccessPolicy
