AWSTemplateFormatVersion: "2010-09-09"

Resources:
  # Creates an OIDC provider to represent the external GitHub Action identity
  # provider (IdP). The OIDCProvider basically stands in for GitHub in IAM role
  # trust relationships as the principal. The trust policy will say "this role
  # can be assumed by the OIDCProvider", which will mean "this role can be
  # assumed by GitHub Actions identities".
  # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
  # https://github.com/aws-actions/configure-aws-credentials?tab=readme-ov-file#oidc
  # https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html
  GitHubOidc:
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        # https://github.blog/changelog/2023-06-27-github-actions-update-on-oidc-integration-with-aws/
        - 6938fd4d98bab03faadb97b34396831e3780aea1
        - 1c58a3a8518e8759bf075b76b750d4f2df264fcd
      Url: https://token.actions.githubusercontent.com

  GitHubActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: repo:PRX/*:*
            Effect: Allow
            Principal:
              Federated: !Ref GitHubOidc
      ManagedPolicyArns:
        - !Ref CloudFormationStackUpdatePolicy
        - !Ref AwsSamS3AccessPolicy
        - !Ref CodePipelineStartExecutionPolicy
        - !Ref PassCloudFormationRolePolicy
      RoleName: PRX-GHA-AccessRole
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: DevOps }

  # One of the primary functions of our GitHub actions is to operate on
  # CloudFormation stacks. The IAM role being used in the actions needs to be
  # able to do most operations on stacks (create, update, handle change sets,
  # etc). GitHub actions should never be deleting stacks or entire stack sets,
  # so that is explicitly denied.
  #
  # When dealing with CloudFormation, the GitHub action role only needs
  # permissions to work with CloudFormation. A different service role is passed
  # to the CloudFormation operations that will have permission to manage
  # resources in the stacks. This role should **not** be given those broad
  # permissions.
  CloudFormationStackUpdatePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows access to specific actions needed by GitHub OIDC
      PolicyDocument:
        Statement:
          - Action:
              - cloudformation:DeleteStack
              - cloudformation:DeleteStackSet
            Effect: Deny
            Resource: "*"
            Sid: DenyStackDelete
          - Action:
              - cloudformation:*
            Effect: Allow
            Resource: "*"
            Sid: AllowStackUpdates
        Version: "2012-10-17"

  # Some GitHub actions use AWS SAM to manage CloudFormation stacks. SAM
  # creates its own S3 buckets to manage files, so the GitHub actions role
  # needs to be able to add files to those buckets.
  AwsSamS3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows read and some write access to AWS SAM CLI S3 buckets
      PolicyDocument:
        Statement:
          - Action:
              # Allows AWS SAM CLI to upload to default managed S3 buckets
              - s3:Get*
              - s3:List*
              - s3:PutObject
            Effect: Allow
            Resource: arn:aws:s3:::aws-sam-cli-managed-default-samclisourcebucket*/*
            Sid: AllowGlobalSamCliS3Access
        Version: "2012-10-17"

  # Some GitHub actions are used to watch for changes to specific files and
  # trigger pipeline executions in CodePipline (CodePipeline now supports this
  # feature, but didn't when this practice was implemented). The access role is
  # allowed to start executions on all pipelines.
  CodePipelineStartExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows starting pipeline executions
      PolicyDocument:
        Statement:
          - Action: codepipeline:StartPipelineExecution
            Effect: Allow
            Resource: "*"
            Sid: AllowStartPipelineExecution
        Version: "2012-10-17"

  # The GitHub action role will pass the CloudFormation service role to stack
  # operations, so it needs explicit permission to do that.
  PassCloudFormationRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows this role to pass the service role to CloudFormation
      PolicyDocument:
        Statement:
          - Action: iam:PassRole
            Effect: Allow
            Resource: !GetAtt CloudFormationServiceRole.Arn
            Sid: AllowPassingCloudFormationServiceRole
        Version: "2012-10-17"
