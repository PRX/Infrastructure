# This stack should generally only be launched once globally, and be named: ci
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates a continuous integration system to handle testing, building, and
  pushing assets in response to changes on GitHub
Mappings:
  Shared:
    SourceArchives:
      Key: github-source-archive.zip
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
          - InfrastructureNotificationsStackName
      - Label:
          default: Template Configuration
        Parameters:
          - InfrastructureConfigStagingKey
      - Label:
          default: GitHub API
        Parameters:
          - GitHubToken
          - GitHubWebhookSecret
      - Label:
          default: CodeBuild
        Parameters:
          - CodeBuildBootstrapUrl
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      InfrastructureNotificationsStackName:
        default: Notifications stack name
      InfrastructureConfigStagingKey:
        default: Staging S3 object key
      GitHubToken:
        default: Access token
      GitHubWebhookSecret:
        default: Webhook secret
      CodeBuildBootstrapUrl:
        default: Bootstrap script URL
Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  InfrastructureNotificationsStackName:
    Default: infrastructure-notifications
    Description: The name of a previously launched notifications stack
    Type: String
  InfrastructureConfigStagingKey:
    Default: template-config-staging.zip
    Description: >
      The S3 object key for the staging template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  GitHubToken:
    Description: >
      A GitHub access token with permissions to update statuses, request
      content, etc
    Type: String
  GitHubWebhookSecret:
    Description: >
      The secret provided by GitHub for the push and pull request events webhook
    Type: String
  CodeBuildBootstrapUrl:
    Description: >
      URL of the bootstrap shell script that the CI runner CodeBuild project
      will install and execute
    Type: String
Resources:
  # CodeBuild Project
  CiCodeBuildSourceArchiveBucket:
    # The CI CodeBuild project has read access to this bucket, so code and
    # assets needed for builds can be placed in it
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      Tags:
        - Key: Project
          Value: Infrastructure
      VersioningConfiguration:
        Status: Enabled
  CodeBuildIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  # NOTE The project name in this ARN must stay in sync with the
                  # actual project name, but can't be referenced because of
                  # a circular dep.
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Runner
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Runner:*
                  # TODO Cleanup after removing legacy project
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Runner2
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Runner2:*
        - PolicyName: CiCodeBuildSourceArchiveBucketBasicAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource:
                  - !Sub arn:aws:s3:::${CiCodeBuildSourceArchiveBucket}/*
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref CiStatusSnsTopic
                  - !Ref CodeBuildCallbackSnsTopic
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ecr:*RepositoryPolicy"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:PutImage"
                Resource:
                  - !Sub "arn:aws:ecr:us-east-1:${AWS::AccountId}:repository/*"
  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Description: >
        Unified CodeBuild project that handles CI testing and publishing for all
        builds that enter the CI system
      # EncryptionKey: String
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        # EnvironmentVariables:
        #   - Name: PRX_SNS_CALLBACK
        #     Value: !Ref CodeBuildCallbackSnsTopic
        Image: "aws/codebuild/docker:1.12.1"
        Type: LINUX_CONTAINER
      # NOTE If Name changes, the CodeBuild Role Logs policy also must change
      Name: !Sub ${AWS::StackName}-Runner
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Source:
        BuildSpec: !Sub "version: 0.1\n\nphases:\n  build:\n    commands:\n      - curl -sO ${CodeBuildBootstrapUrl} && sh bootstrap.sh"
        Location: !Join ["", ["arn:aws:s3:::", !Ref CiCodeBuildSourceArchiveBucket, "/", !FindInMap [Shared, SourceArchives, Key]]]
        Type: S3
      Tags:
        - Key: Project
          Value: Infrastructure
      TimeoutInMinutes: 16
  # ##### V2
  CiCodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Description: >
        Unified CodeBuild project that handles CI testing and publishing for all
        builds that enter the CI system
      # EncryptionKey: String
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: PRX_SNS_CALLBACK
            Value: !Ref CodeBuildCallbackSnsTopic
          - Name: PRX_AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
        Image: "aws/codebuild/docker:1.12.1"
        Type: LINUX_CONTAINER
      # NOTE If Name changes, the CodeBuild Role Logs policy also must change
      Name: !Sub ${AWS::StackName}-Runner2
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Source:
        Location: !Join ["", ["arn:aws:s3:::", !Ref CiCodeBuildSourceArchiveBucket, "/", !FindInMap [Shared, SourceArchives, Key]]]
        Type: S3
      Tags:
        - Key: Project
          Value: Infrastructure
      TimeoutInMinutes: 16
  # CI System API
  CiCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Sub "*.${AWS::Region}.${AWS::StackName}.prx.tech"
      DomainValidationOptions:
        - ValidationDomain: prx.tech
          DomainName: !Sub "*.${AWS::Region}.${AWS::StackName}.prx.tech"
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: Name
          Value: !Sub "${AWS::StackName} ${AWS::Region} wildcard"
  ## API Gateway
  # ## /
  RestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${AWS::StackName} API"
      Description: >
        Provides an API for inbound requests used by the CI system, such as
        GitHub event webhooks
  # ## /v1
  RestApiV1Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "v1"
  # ## /v1/github
  RestApiV1GitHubResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref RestApiV1Resource
      PathPart: "github"
  # ## /v1/github/webhook
  RestApiV1GitHubWebhookResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref RestApiV1GitHubResource
      PathPart: "webhook"
  # ### /v1/github/webhook POST
  RestApiV1GitHubWebhookPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RestApiV1GitHubWebhookResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GitHubWebhookEndpointLambdaFunction.Arn}/invocations
  # ## Deployments
  RestApiDeployment:
    DependsOn:
      - RestApiV1GitHubWebhookPostMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref RestApi
      Description: "API deployment"
  RestApiProdStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: prod
      Description: "Production stage"
      RestApiId: !Ref RestApi
      DeploymentId: !Ref RestApiDeployment
  # # Custom Domains
  RestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      CertificateArn: !Ref CiCertificate
      DomainName: !Sub "api.${AWS::Region}.${AWS::StackName}.prx.tech"
  RestApiDomainNameBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      # BasePath: !Ref basePath
      DomainName: !Ref RestApiDomainName
      RestApiId: !Ref RestApi
  RestApiDomainNameRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      Comment: Record sets for CI API
      HostedZoneName: prx.tech.
      RecordSets:
        - Type: AAAA
          Name: !Sub "api.${AWS::Region}.${AWS::StackName}.prx.tech."
          AliasTarget:
            DNSName: !GetAtt RestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: A
          Name: !Sub "api.${AWS::Region}.${AWS::StackName}.prx.tech."
          AliasTarget:
            DNSName: !GetAtt RestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
  # CI Status notifications
  # Status notifications for the CI system are handled by a single Lambda
  # function, which is susbscribed to a dedicaed SNS topic. Various parts of the
  # system post to the topic, and the function creates Slack messages that are
  # sent to the global Slack Message Relay topic.
  CiStatusSnsTopic:
    Type: "AWS::SNS::Topic"
  CiStatusNotificationHandlerIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - Fn::ImportValue:
                      !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  CiStatusNotificationHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: "ci/ci-status-notification-handler.zip"
      Description: >
        Handles status notifications for CI builds
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue:
                !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CiStatusNotificationHandlerIamRole.Arn
      Runtime: nodejs6.10
      Tags:
        - Key: Project
          Value: Infrastructure
      Timeout: 10
  CiStatusNotificationPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CiStatusNotificationHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref CiStatusSnsTopic
  CiStatusNotificationSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt CiStatusNotificationHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref CiStatusSnsTopic
  CiStatusNotificationHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: CI status notifications handler Lambda Errors
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >
        The error rate on the CI status notifications handler lambda has
        exceeded 0 in the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CiStatusNotificationHandlerLambdaFunction
  # GitHub Webhook Endpoint Handler
  # An HTTP endpoint is registered with GitHub to receive Pull Request and Push
  # events. A Lambda function handles requests made to that endpoint. If the
  # event seems like it should be handled by CI, it is handed off to the
  # GitHub Event Handler.
  GitHubWebhookEndpointIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource:
                  - "*"
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref GitHubEventSnsTopic
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  GitHubWebhookEndpointLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: ci/github-webhook-endpoint.zip
      Description: Backs the GitHub webhook payload requests endpoint
      Environment:
        Variables:
          GITHUB_WEBHOOK_SECRET: !Ref GitHubWebhookSecret
          GITHUB_EVENT_HANDLER_TOPIC_ARN: !Ref GitHubEventSnsTopic
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt GitHubWebhookEndpointIAMRole.Arn
      Runtime: nodejs6.10
      Tags:
        - Key: Project
          Value: Infrastructure
      Timeout: 3
  GitHubWebhookEndpointErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: GitHub Webhook Endpoint Lambda Errors
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >
        The error rate on the GitHub webhook endpoint lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref GitHubWebhookEndpointLambdaFunction
  GitHubWebhookRequestPostMethodInvokeFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref GitHubWebhookEndpointLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${RestApiProdStage}/*"  # TOD This isn't quite right. Reference one made by the console to correct
  # GitHub Event Handler
  # GitHub Pull Request and Push events for projects that support the CI system
  # are sent to the GitHub Event Handler. The Lambda function copies the project
  # code to known location and triggers a build in CodeBuild project.
  GitHubEventHandlerIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource:
                  - "*"
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref CiStatusSnsTopic
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                # TODO I think this is only used by CodeBuildCallback
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub arn:aws:s3:::${CiCodeBuildSourceArchiveBucket}/*
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                Resource:
                  - !GetAtt CodeBuildProject.Arn
                  - !GetAtt CiCodeBuildProject.Arn
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  GitHubEventSnsTopic:
    Type: "AWS::SNS::Topic"
  GitHubEventHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: ci/github-event-handler.zip
      Description: Handles GitHub events forwarded from the endpoint
      Environment:
        Variables:
            GITHUB_ACCESS_TOKEN: !Ref GitHubToken
            CI_STATUS_TOPIC_ARN: !Ref CiStatusSnsTopic
            CODEBUILD_PROJECT_NAME: !Ref CodeBuildProject
            CODEBUILD_SOURCE_ARCHIVE_BUCKET: !Ref CiCodeBuildSourceArchiveBucket
            CODEBUIL_SOURCE_ARCHIVE_KEY: !FindInMap [Shared, SourceArchives, Key]
            CODEBUILD_CALLBACK_TOPIC_ARN: !Ref CodeBuildCallbackSnsTopic
            AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt GitHubEventHandlerIAMRole.Arn
      Runtime: nodejs6.10
      Tags:
        - Key: Project
          Value: Infrastructure
      Timeout: 10
  GitHubEventTopicFunctionSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt GitHubEventHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref GitHubEventSnsTopic
  GitHubEventTopicInvokeFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref GitHubEventHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref GitHubEventSnsTopic
  GitHubEventHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: GitHub Event Handler Lambda Errors
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >
        The error rate on the GitHub event handler lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref GitHubEventHandlerLambdaFunction
  # ##### v2
  GitHubEventHandler2LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: ci/github-event-handler2.zip
      Description: Handles GitHub events forwarded from the endpoint
      Environment:
        Variables:
            GITHUB_ACCESS_TOKEN: !Ref GitHubToken
            CI_STATUS_TOPIC_ARN: !Ref CiStatusSnsTopic
            CODEBUILD_PROJECT_NAME: !Ref CiCodeBuildProject
            CODEBUILD_SOURCE_ARCHIVE_BUCKET: !Ref CiCodeBuildSourceArchiveBucket
            CODEBUILD_SOURCE_ARCHIVE_KEY: !FindInMap [Shared, SourceArchives, Key]
            AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt GitHubEventHandlerIAMRole.Arn
      Runtime: nodejs6.10
      Tags:
        - Key: Project
          Value: Infrastructure
      Timeout: 10
  GitHubEvent2TopicFunctionSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt GitHubEventHandler2LambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref GitHubEventSnsTopic
  GitHubEvent2TopicInvokeFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref GitHubEventHandler2LambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref GitHubEventSnsTopic
  GitHubEventHandler2ErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: GitHub Event Handler2 Lambda Errors
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >
        The error rate on the GitHub event handler2 lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref GitHubEventHandler2LambdaFunction
  # CodeBuild Callback
  # Once a CI build finishes, it posts information about the build result to an
  # SNS topic. A Lambda function is subscribed to the topic, and can process the
  # event.
  CodeBuildCallbackIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource:
                  - "*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref CiStatusSnsTopic
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  CodeBuildCallbackSnsTopic:
    Type: "AWS::SNS::Topic"
  CodeBuildCallbackHanlderLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: ci/codebuild-callback-handler.zip
      Description: Handles GitHub events forwarded from the endpoint
      Environment:
        Variables:
          CI_STATUS_TOPIC_ARN: !Ref CiStatusSnsTopic
          GITHUB_ACCESS_TOKEN: !Ref GitHubToken
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt CodeBuildCallbackIAMRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
      Timeout: 3
  CodeBuildCallbackHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: CodeBuild Callback Handler Lambda Errors
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >
        The error rate on the CodeBuild callback handler lambda has exceeded 0
        in the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CodeBuildCallbackHanlderLambdaFunction
  CodeBuildCallbackTopicFunctionSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt CodeBuildCallbackHanlderLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref CodeBuildCallbackSnsTopic
  CodeBuildCallbackTopicInvokeFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CodeBuildCallbackHanlderLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref CodeBuildCallbackSnsTopic
Outputs:
  GitHubWebhookEndpointUrl:
    Value: !Sub "https://${RestApiDomainName}/${RestApiProdStage}/v1/github/webhook"
