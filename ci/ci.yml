# ci/ci.yml
# This stack should generally only be launched once globally
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Creates a continuous integration system to handle testing, building, and
  pushing assets in response to changes on GitHub
Mappings:
  Shared:
    SourceArchives:
      Key: github-source-archive.zip
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
          - InfrastructureNotificationsStackName
          - InfrastructureSecretsStackName
          - LogGroupRetentionPolicyFunctionArn
      - Label:
          default: Template Configuration
        Parameters:
          - InfrastructureConfigStagingKey
      - Label:
          default: GitHub API
        Parameters:
          - GitHubToken
          - GitHubWebhookSecret
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      InfrastructureNotificationsStackName:
        default: Notifications stack name
      InfrastructureSecretsStackName:
        default: Secrets stack name
      InfrastructureConfigStagingKey:
        default: Staging S3 object key
      GitHubToken:
        default: Access token
      GitHubWebhookSecret:
        default: Webhook secret
      LogGroupRetentionPolicyFunctionArn:
        default: Log group retention function SSM key
Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  InfrastructureNotificationsStackName:
    Default: infrastructure-notifications
    Description: The name of a previously launched notifications stack
    Type: String
  InfrastructureSecretsStackName:
    Default: infrastructure-secrets
    Description: The name of a previously launched infrastructure secrets stack
    Type: String
  InfrastructureConfigStagingKey:
    Default: template-config-staging.zip
    Description: >
      The S3 object key for the staging template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  GitHubToken:
    Description: >
      A GitHub access token with permissions to update statuses, request
      content, etc
    Type: String
  GitHubWebhookSecret:
    Description: >
      The secret provided by GitHub for the push and pull request events webhook
    Type: String
  LogGroupRetentionPolicyFunctionArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: >
      The Parameter Store key for the log group retention policy function's
      ARN (not the ARN itself)
Resources:
  # CodeBuild Project
  CiCodeBuildSourceArchiveBucket:
    # The CI CodeBuild project has read access to this bucket, so code and
    # assets needed for builds can be placed in it
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      VersioningConfiguration:
        Status: Enabled
  CiCodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CiCodeBuildSourceArchiveBucketBasicAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub arn:aws:s3:::${CiCodeBuildSourceArchiveBucket}/*
        - PolicyName: ApplicationCodeWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket", "/*"]]
        - PolicyName: ParameterStorePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - "*" # TODO
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref CiStatusSnsTopic
                  - !Ref CodeBuildCallbackSnsTopic
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:CreateRepository
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:*RepositoryPolicy
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:CompleteLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:PutImage
                Resource:
                  - !Sub arn:aws:ecr:us-east-1:${AWS::AccountId}:repository/*
      ManagedPolicyArns:
        - Fn::ImportValue:
            !Sub ${InfrastructureSecretsStackName}-SecretsInstanceAccessPolicyArn
        - Fn::ImportValue:
            !Sub ${InfrastructureSecretsStackName}-SecretsInstanceDecryptPolicyArn
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  CiCodeBuildLogsIamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CiCodeBuildProject}
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CiCodeBuildProject}:*
      PolicyName: !Sub ${AWS::StackName}-CiCodeBuildLogsIamPolicy
      Roles:
        - !Ref CiCodeBuildIamRole
  CiCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Description: >-
        Unified CodeBuild project that handles CI testing and publishing for all
        builds that enter the CI system
      # EncryptionKey: String
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: PRX_SNS_CALLBACK
            Value: !Ref CodeBuildCallbackSnsTopic
          - Name: PRX_AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: PRX_APPLICATION_CODE_BUCKET
            Value:
              Fn::ImportValue:
                !Sub ${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      # NOTE If Name changes, the CodeBuild Role Logs policy also must change
      Name: !Sub ${AWS::StackName}-Runner2
      ServiceRole: !GetAtt CiCodeBuildIamRole.Arn
      Source:
        Location: !Join ["", ["arn:aws:s3:::", !Ref CiCodeBuildSourceArchiveBucket, "/", !FindInMap [Shared, SourceArchives, Key]]]
        Type: S3
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TimeoutInMinutes: 16
  # CI System API
  CiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${AWS::Region}.${AWS::StackName}.prx.tech"
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: Name
          Value: !Sub ${AWS::StackName} ${AWS::Region} wildcard
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      ValidationMethod: DNS
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        CertificateArn: !Ref CiCertificate
        DomainName: !Sub api.${AWS::Region}.${AWS::StackName}.prx.tech
      Tags:
        Project: Infrastructure
        "prx:cloudformation:stack-name": !Ref AWS::StackName
        "prx:cloudformation:stack-id": !Ref AWS::StackId
  # HttpApiDomainNameRecordSetGroup:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     Comment: Record sets for CI API
  #     HostedZoneName: prx.tech.
  #     RecordSets:
  #       - Type: AAAA
  #         Name: !Sub "api.${AWS::Region}.${AWS::StackName}.prx.tech."
  #         AliasTarget:
  #           DNSName: !GetAtt RestApiDomainName.DistributionDomainName
  #           HostedZoneId: Z2FDTNDATAQYW2
  #       - Type: A
  #         Name: !Sub "api.${AWS::Region}.${AWS::StackName}.prx.tech."
  #         AliasTarget:
  #           DNSName: !GetAtt RestApiDomainName.DistributionDomainName
  #           HostedZoneId: Z2FDTNDATAQYW2
  # GitHub Webhook Endpoint Handler
  # An HTTP endpoint is registered with GitHub to receive Pull Request and Push
  # events. A Lambda function handles requests made to that endpoint. If the
  # event seems like it should be handled by CI, it is handed off to the
  # GitHub Event Handler.
  GitHubWebhookEndpointIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource:
                  - "*"
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref GitHubEventSnsTopic
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  GitHubWebhookEndpointLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/github-webhook-endpoint/
      Description: Backs the GitHub webhook payload requests endpoint
      Environment:
        Variables:
          GITHUB_WEBHOOK_SECRET: !Ref GitHubWebhookSecret
          GITHUB_EVENT_HANDLER_TOPIC_ARN: !Ref GitHubEventSnsTopic
      Events:
        GitHubWebhookRequest:
          Properties:
            ApiId: !Ref HttpApi
            Method: post
            Path: /v1/github/webhook
          Type: HttpApi
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt GitHubWebhookEndpointIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Infrastructure
        "prx:cloudformation:stack-name": !Ref AWS::StackName
        "prx:cloudformation:stack-id": !Ref AWS::StackId
      Timeout: 3
  GitHubWebhookEndpointLambdaFunctionRetentionPolicy:
    Type: Custom::LogGroupRetentionPolicy
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub /aws/lambda/${GitHubWebhookEndpointLambdaFunction}
      RetentionInDays: 5
  GitHubWebhookEndpointErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] GitHub Webhook Endpoint"
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the GitHub webhook endpoint lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref GitHubWebhookEndpointLambdaFunction
  # GitHub Event Handler
  # GitHub Pull Request and Push events for projects that support the CI system
  # are sent to the GitHub Event Handler. The Lambda function copies the project
  # code to known location and triggers a build in CodeBuild project.
  GitHubEventSnsTopic:
    Type: AWS::SNS::Topic
  GitHubEventHandlerIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource:
                  - "*"
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref CiStatusSnsTopic
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${CiCodeBuildSourceArchiveBucket}/*
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt CiCodeBuildProject.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  GitHubEventHandlerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/github-event-handler/
      Description: Handles GitHub events forwarded from the endpoint
      Environment:
        Variables:
            GITHUB_ACCESS_TOKEN: !Ref GitHubToken
            CI_STATUS_TOPIC_ARN: !Ref CiStatusSnsTopic
            CODEBUILD_PROJECT_NAME: !Ref CiCodeBuildProject
            CODEBUILD_SOURCE_ARCHIVE_BUCKET: !Ref CiCodeBuildSourceArchiveBucket
            CODEBUILD_SOURCE_ARCHIVE_KEY: !FindInMap [Shared, SourceArchives, Key]
            AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        SnsMessages:
          Properties:
            Topic: !Ref GitHubEventSnsTopic
          Type: SNS
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt GitHubEventHandlerIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Infrastructure
        "prx:cloudformation:stack-name": !Ref AWS::StackName
        "prx:cloudformation:stack-id": !Ref AWS::StackId
      Timeout: 30
  GitHubEventHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] GitHub Event Handler v2"
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the GitHub event handler lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref GitHubEventHandlerLambdaFunction
  GitHubEventHandlerLambdaFunctionRetentionPolicy:
    Type: Custom::LogGroupRetentionPolicy
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub /aws/lambda/${GitHubEventHandlerLambdaFunction}
      RetentionInDays: 5
  # CodeBuild Callback
  # Once a CI build finishes, it posts information about the build result to an
  # SNS topic. A Lambda function is subscribed to the topic, and can process the
  # event.
  CodeBuildCallbackSnsTopic:
    Type: AWS::SNS::Topic
  CodeBuildCallbackIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource:
                  - "*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt CiCodeBuildProject.Arn
        - PolicyName: CloudWatchMetricsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource:
                  - "*"
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref CiStatusSnsTopic
                  - Fn::ImportValue:
                      !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  CodeBuildCallbackHandlerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/codebuild-callback-handler/
      Description: Handles post-build callbacks from CodeBuild CI projects
      Environment:
        Variables:
          CI_STATUS_TOPIC_ARN: !Ref CiStatusSnsTopic
          GITHUB_ACCESS_TOKEN: !Ref GitHubToken
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue:
                !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
      Events:
        SnsMessages:
          Properties:
            Topic: !Ref CodeBuildCallbackSnsTopic
          Type: SNS
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt CodeBuildCallbackIamRole.Arn
      Runtime: python3.6
      Tags:
        Project: Infrastructure
        "prx:cloudformation:stack-name": !Ref AWS::StackName
        "prx:cloudformation:stack-id": !Ref AWS::StackId
      Timeout: 3
  CodeBuildCallbackHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] CodeBuild Callback Handler"
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the CodeBuild callback handler lambda has exceeded 0
        in the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CodeBuildCallbackHandlerLambdaFunction
  CodeBuildCallbackHandlerLambdaFunctionRetentionPolicy:
    Type: Custom::LogGroupRetentionPolicy
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub /aws/lambda/${CodeBuildCallbackHandlerLambdaFunction}
      RetentionInDays: 5
  # CI Status notifications
  # Status notifications for the CI system are handled by a single Lambda
  # function, which is susbscribed to a dedicaed SNS topic. Various parts of the
  # system post to the topic, and the function creates Slack messages that are
  # sent to the global Slack Message Relay topic.
  CiStatusSnsTopic:
    Type: AWS::SNS::Topic
  CiStatusNotificationHandlerIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - Fn::ImportValue:
                      !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  CiStatusNotificationHandlerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/ci-status-notification-handler/
      Description: >-
        Handles status notifications for CI builds
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue:
                !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      Events:
        SnsMessages:
          Properties:
            Topic: !Ref CiStatusSnsTopic
          Type: SNS
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CiStatusNotificationHandlerIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: Infrastructure
        "prx:cloudformation:stack-name": !Ref AWS::StackName
        "prx:cloudformation:stack-id": !Ref AWS::StackId
      Timeout: 10
  CiStatusNotificationHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] CI Status Handler"
      AlarmActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue:
            !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >-
        The error rate on the CI status notifications handler lambda has
        exceeded 0 in the last minute.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CiStatusNotificationHandlerLambdaFunction
  CiStatusNotificationHandlerLambdaFunctionRetentionPolicy:
    Type: Custom::LogGroupRetentionPolicy
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub /aws/lambda/${CiStatusNotificationHandlerLambdaFunction}
      RetentionInDays: 5
Outputs:
  GitHubWebhookEndpointUrl:
    Value: !Sub "https://api.${AWS::Region}.${AWS::StackName}.prx.tech/v1/github/webhook"
