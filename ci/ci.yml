# ci/ci.yml
# This stack should generally only be launched once globally
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates a continuous integration system to handle testing, building, and
  pushing assets in response to changes on GitHub
Mappings:
  Shared:
    SourceArchives:
      Key: github-source-archive.zip
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
          - InfrastructureNotificationsStackName
          - InfrastructureSecretsStackName
      - Label:
          default: Template Configuration
        Parameters:
          - InfrastructureConfigStagingKey
      - Label:
          default: GitHub API
        Parameters:
          - GitHubToken
          - GitHubWebhookSecret
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      InfrastructureNotificationsStackName:
        default: Notifications stack name
      InfrastructureSecretsStackName:
        default: Secrets stack name
      InfrastructureConfigStagingKey:
        default: Staging S3 object key
      GitHubToken:
        default: Access token
      GitHubWebhookSecret:
        default: Webhook secret
Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  InfrastructureNotificationsStackName:
    Default: infrastructure-notifications
    Description: The name of a previously launched notifications stack
    Type: String
  InfrastructureSecretsStackName:
    Default: infrastructure-secrets
    Description: The name of a previously launched infrastructure secrets stack
    Type: String
  InfrastructureConfigStagingKey:
    Default: template-config-staging.zip
    Description: >-
      The S3 object key for the staging template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  GitHubToken:
    Description: >-
      A GitHub access token with permissions to update statuses, request
      content, etc
    Type: String
  GitHubWebhookSecret:
    Description: >-
      The secret provided by GitHub for the push and pull request events webhook
    Type: String
Resources:
  # CodeBuild Project
  CiCodeBuildSourceArchiveBucket:
    # The CI CodeBuild project has read access to this bucket, so code and
    # assets needed for builds can be placed in it
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
      VersioningConfiguration:
        Status: Enabled
  CiCodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: CiCodeBuildSourceArchiveBucketBasicAccess
          PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource: !Sub arn:aws:s3:::${CiCodeBuildSourceArchiveBucket}/*
            Version: "2012-10-17"
        - PolicyName: ApplicationCodeWriteAccess
          PolicyDocument:
            Statement:
              - Action: s3:PutObject
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket", "/*"]]
            Version: "2012-10-17"
        - PolicyName: ParameterStorePolicy
          PolicyDocument:
            Statement:
              - Action: ssm:GetParameters
                Effect: Allow
                Resource: "*" # TODO
            Version: "2012-10-17"
        # - PolicyName: SnsPolicy
        #   PolicyDocument:
        #     Statement:
        #       - Action: sns:Publish
        #         Effect: Allow
        #         Resource:
        #           - !Ref CiStatusSnsTopic
        #           - !Ref CodeBuildCallbackSnsTopic
        #     Version: "2012-10-17"
        - PolicyName: ECRAccess
          PolicyDocument:
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                  - ecr:CreateRepository
                Effect: Allow
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:*RepositoryPolicy
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:CompleteLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:PutImage
                Resource: !Sub arn:aws:ecr:us-east-1:${AWS::AccountId}:repository/*
            Version: "2012-10-17"
        - PolicyName: PorterPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - "states:StartExecution"
                  - "states:DescribeExecution"
                Effect: Allow
                Resource: "*" # TODO
            Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${InfrastructureSecretsStackName}-SecretsInstanceAccessPolicyArn
        - Fn::ImportValue: !Sub ${InfrastructureSecretsStackName}-SecretsInstanceDecryptPolicyArn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
  CiCodeBuildLogsIamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CiCodeBuildProject}
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CiCodeBuildProject}:*
      PolicyName: !Sub ${AWS::StackName}-CiCodeBuildLogsIamPolicy
      Roles:
        - !Ref CiCodeBuildIamRole
  CiCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Description: >-
        Unified CodeBuild project that handles CI testing and publishing for all
        builds that enter the CI system
      # EncryptionKey: String
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: PRX_AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: PRX_APPLICATION_CODE_BUCKET
            Value:
              Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      # NOTE If Name changes, the CodeBuild Role Logs policy also must change
      Name: !Sub ${AWS::StackName}-Runner2
      ServiceRole: !GetAtt CiCodeBuildIamRole.Arn
      Source:
        Location: !Join ["", ["arn:aws:s3:::", !Ref CiCodeBuildSourceArchiveBucket, "/", !FindInMap [Shared, SourceArchives, Key]]]
        Type: S3
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
      TimeoutInMinutes: 16

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
  GitHubWebhookEndpointFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/github-webhook-endpoint/
      Description: >-
        Receives and validates GitHub webhooks (push, pull_request, etc
        events), and relays the event data to EventBridge.
      Environment:
        Variables:
          GITHUB_WEBHOOK_SECRET: !Ref GitHubWebhookSecret
      Events:
        GitHubWebhookRequest:
          Properties:
            ApiId: !Ref HttpApi
            Method: post
            Path: /v1/github/webhook
          Type: HttpApi
      Handler: index.handler
      MemorySize: 128
      Policies:
        - Statement:
            - Action: events:PutEvents
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 3
  GitHubWebhookEndpointLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GitHubWebhookEndpointFunction}
      RetentionInDays: 5
  GitHubWebhookEndpointErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] GitHub Webhook Endpoint" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >- # TODO
        The error rate on the GitHub webhook endpoint lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GitHubWebhookEndpointFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  BuildHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/build-handler/
      Description: >-
        Listens for GitHub webhook events on EventBridge, and starts CI builds
        in CodeBuild for appropriate events. Pulls the code for these builds
        from GitHub and pushes it to S3.
      Environment:
        Variables:
          GITHUB_ACCESS_TOKEN: !Ref GitHubToken
          CODEBUILD_PROJECT_NAME: !Ref CiCodeBuildProject
          CODEBUILD_SOURCE_ARCHIVE_BUCKET: !Ref CiCodeBuildSourceArchiveBucket
          CODEBUILD_SOURCE_ARCHIVE_KEY: !FindInMap [Shared, SourceArchives, Key]
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        GitHubWebhook:
          Properties:
            Pattern:
              source:
                - org.prx.ci.github-webhook
          Type: EventBridgeRule
      Handler: index.handler
      MemorySize: 256
      Policies:
        - Statement:
            - Action: s3:PutObject
              Effect: Allow
              Resource: !Sub ${CiCodeBuildSourceArchiveBucket.Arn}/*
          Version: "2012-10-17"
        - Statement:
            - Action: codebuild:StartBuild
              Effect: Allow
              Resource: !GetAtt CiCodeBuildProject.Arn
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 30
  BuildHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${BuildHandlerFunction}
      RetentionInDays: 5
  BuildHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] Build Handler" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >- # TODO
        The error rate on the GitHub event handler lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref BuildHandlerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  StagingConfigHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/staging-config-handler/
      Description: >-
        Listens for successful CI CodeBuild builds on EventBridge, and updates
        the staging stack template config JSON file in S3 with new code package
        identifiers when necessary.
      Environment:
        Variables:
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
      Events:
        CodeBuild:
          Properties:
            Pattern:
              detail:
                build-status:
                  - SUCCEEDED
                project-name:
                  - !Ref CiCodeBuildProject
              detail-type:
                - CodeBuild Build State Change
              source:
                - aws.codebuild
          Type: EventBridgeRule
      Handler: lambda_function.lambda_handler
      MemorySize: 192
      Policies:
        - Statement:
            - Action:
                - s3:GetObject
                - s3:PutObject
              Effect: Allow
              Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
          Version: "2012-10-17"
      Runtime: python3.8
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 10
  StagingConfigHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StagingConfigHandlerFunction}
      RetentionInDays: 5
  StagingConfigHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] Staging config Handler" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >- # TODO
        The error rate on the staging config handler lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref StagingConfigHandlerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  GitHubStatusHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/github-status-handler/
      Description: >-
        Listens for CI CodeBuild state changes on EventBridge and updates
        GitHub repository statuses as necessary.
      Environment:
        Variables:
          GITHUB_ACCESS_TOKEN: !Ref GitHubToken
      Events:
        CodeBuild:
          Properties:
            Pattern:
              detail:
                project-name:
                  - !Ref CiCodeBuildProject
              detail-type:
                - CodeBuild Build State Change
              source:
                - aws.codebuild
          Type: EventBridgeRule
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 10
  GitHubStatusHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GitHubStatusHandlerFunction}
      RetentionInDays: 5
  GitHubStatusHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] GitHub status Handler" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >- # TODO
        The error rate on the GitHub status handler lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GitHubStatusHandlerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  SlackMessageHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/slack-message-handler/
      Description: >-
        Listens for CI CodeBuild state changes on EventBridge and sends
        notifications to Slack about build progress.
      Environment:
        Variables:
          GITHUB_ACCESS_TOKEN: !Ref GitHubToken
          SLACK_MESSAGE_RELAY_TOPIC_ARN:
            Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      Events:
        CodeBuild:
          Properties:
            Pattern:
              detail:
                project-name:
                  - !Ref CiCodeBuildProject
              detail-type:
                - CodeBuild Build State Change
              source:
                - aws.codebuild
          Type: EventBridgeRule
      Handler: index.handler
      MemorySize: 128
      Policies:
        - SNSPublishMessagePolicy:
            TopicName:
              Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-SlackMessageRelaySnsTopicArn
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 10
  SlackMessageHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SlackMessageHandlerFunction}
      RetentionInDays: 5
  SlackMessageHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: "[Infra][CI][Lambda][Errors] Slack message Handler" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${InfrastructureNotificationsStackName}-OpsWarnMessagesSnsTopicArn
      AlarmDescription: >- # TODO
        The error rate on the Slack message handler lambda has exceeded 0 in
        the last five minutes.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SlackMessageHandlerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
Outputs:
  GitHubWebhookEndpointUrl:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
