# ci/template.yml
# This template is deployed continuously via GitHub Actions.
#
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a continuous integration system to handle testing, building, and
  pushing assets in response to changes on GitHub

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
      - Label:
          default: GitHub API
        Parameters:
          - GitHubToken
          - GitHubWebhookSecret
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      GitHubToken:
        default: Access token
      GitHubWebhookSecret:
        default: Webhook secret

Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  GitHubToken:
    Description: >-
      A GitHub access token with permissions to update statuses, request
      content, etc
    Type: String
  GitHubWebhookSecret:
    Description: >-
      The secret provided by GitHub for the push and pull request events webhook
    Type: String
  SlackMessageRelaySnsTopicArn:
    Type: String

Resources:
  # CodeBuild Project
  CiCodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: ApplicationCodeWriteAccess
          PolicyDocument:
            Statement:
              - Action: s3:PutObject
                Effect: Allow
                Resource: !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket", "/*"]]
            Version: "2012-10-17"
        - PolicyName: ParameterStorePolicy
          PolicyDocument:
            Statement:
              - Action: ssm:GetParameters
                Effect: Allow
                Resource: "*" # TODO
            Version: "2012-10-17"
        - PolicyName: ECRAccess
          PolicyDocument:
            Statement:
              - Action:
                  - ecr:CreateRepository
                  - ecr:DescribeRepositories
                  - ecr:GetAuthorizationToken
                Effect: Allow
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:*RepositoryPolicy
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:CompleteLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:PutImage
                Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*
            Version: "2012-10-17"
        - PolicyName: PorterPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - states:StartExecution
                  - states:DescribeExecution
                Effect: Allow
                Resource: "*" # TODO
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
  CiCodeBuildLogsIamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CiCodeBuildProject}
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CiCodeBuildProject}:*
      PolicyName: !Sub ${AWS::StackName}-CiCodeBuildLogsIamPolicy
      Roles:
        - !Ref CiCodeBuildIamRole
  CiCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Description: >-
        Unified CodeBuild project that handles CI testing and publishing for all
        builds that enter the CI system
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: PRX_AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: PRX_APPLICATION_CODE_BUCKET
            Value:
              Fn::ImportValue: !Sub ${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}-Runner2
      ServiceRole: !GetAtt CiCodeBuildIamRole.Arn
      Source:
        GitCloneDepth: 1
        Location: https://github.com/PRX/Infrastructure.git
        ReportBuildStatus: true
        Type: GITHUB
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
      TimeoutInMinutes: 16

  GitHubWebhookEndpointFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/github-webhook-endpoint/
      Description: >-
        Receives and validates GitHub webhooks (push, pull_request, etc
        events), and relays the event data to EventBridge.
      Environment:
        Variables:
          GITHUB_WEBHOOK_SECRET: !Ref GitHubWebhookSecret
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: BUFFERED
      Handler: index.handler
      MemorySize: 128
      Policies:
        - Statement:
            - Action: events:PutEvents
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs20.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 3
  GitHubWebhookEndpointLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${GitHubWebhookEndpointFunction}
      RetentionInDays: 5
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
  GitHubWebhookEndpointErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CI] GitHub webhook endpoint <prod> FUNCTION ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The Lambda function that GitHub webhook requests for CI events is
        failing, so some builds may not be starting as expected, and GitHub may
        be receiving errors from the endpoint.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GitHubWebhookEndpointFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  BuildHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/build-handler/
      Description: >-
        Listens for GitHub webhook events on EventBridge, and starts CI builds
        in CodeBuild for appropriate events. Pulls the code for these builds
        from GitHub and pushes it to S3.
      Environment:
        Variables:
          GITHUB_ACCESS_TOKEN: !Ref GitHubToken
          CODEBUILD_PROJECT_NAME: !Ref CiCodeBuildProject
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        GitHubWebhook:
          Properties:
            Pattern:
              source:
                - org.prx.ci.github-webhook
          Type: EventBridgeRule
      Handler: index.handler
      MemorySize: 256
      Policies:
        - Statement:
            - Action: codebuild:StartBuild
              Effect: Allow
              Resource: !GetAtt CiCodeBuildProject.Arn
          Version: "2012-10-17"
      Runtime: nodejs20.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 30
  BuildHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${BuildHandlerFunction}
      RetentionInDays: 5
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
  BuildHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CI] Build handler <prod> FUNCTION ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The Lambda function that triggers CI builds in CodeBuild is failing,
        so some builds may not be starting as expected.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref BuildHandlerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  ParameterStoreUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/parameter-store-updater/
      Description: >-
        Listens for successful CI CodeBuild builds on EventBridge, and updates
        Parameter Store parameters with new code package identifiers when
        necessary.
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopicArn
      Events:
        CodeBuild:
          Properties:
            Pattern:
              detail:
                build-status:
                  - SUCCEEDED
                project-name:
                  - !Ref CiCodeBuildProject
              detail-type:
                - CodeBuild Build State Change
              source:
                - aws.codebuild
          Type: EventBridgeRule
      Handler: index.handler
      MemorySize: 192
      Policies:
        - Statement:
            - Action: sns:Publish
              Effect: Allow
              Resource: !Ref SlackMessageRelaySnsTopicArn
          Version: "2012-10-17"
        - Statement:
            - Action: ssm:PutParameter
              Effect: Allow
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prx/stag/Spire/*
          Version: "2012-10-17"
      Runtime: nodejs20.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 10
  ParameterStoreUpdaterLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ParameterStoreUpdaterFunction}
      RetentionInDays: 5
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
  ParameterStoreUpdaterErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CI] Parameter store updater <prod> FUNCTION ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The Lambda function that updates parameter store values for the staging
        root stack based on CI build artifacts is failing, so some new app
        versions may not be deployed via CD as expected.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ParameterStoreUpdaterFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  SlackMessageHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/slack-message-handler/
      Description: >-
        Listens for CI CodeBuild state changes on EventBridge and sends
        notifications to Slack about build progress.
      Environment:
        Variables:
          GITHUB_ACCESS_TOKEN: !Ref GitHubToken
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopicArn
      Events:
        CodeBuild:
          Properties:
            Pattern:
              detail:
                project-name:
                  - !Ref CiCodeBuildProject
              detail-type:
                - CodeBuild Build State Change
              source:
                - aws.codebuild
          Type: EventBridgeRule
      Handler: index.handler
      MemorySize: 128
      Policies:
        - Statement:
            - Action: sns:Publish
              Effect: Allow
              Resource: !Ref SlackMessageRelaySnsTopicArn
          Version: "2012-10-17"
      Runtime: nodejs20.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: CI
      Timeout: 10
  SlackMessageHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${SlackMessageHandlerFunction}
      RetentionInDays: 5
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: CI }
  SlackMessageHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [CI] Slack messager <prod> FUNCTION ERRORS (${AWS::StackName})
      AlarmDescription: >-
        The Lambda function that sends messages to Slack based on CI build
        events is failing, so some notifications may be getting lost.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SlackMessageHandlerFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

Outputs:
  GitHubWebhookEndpointUrl:
    Value: !GetAtt GitHubWebhookEndpointFunctionUrl.FunctionUrl
