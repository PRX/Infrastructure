# etc/cross-account-vpc-peering-accepter.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates resources to support the accepter side of an already-created VPC
  peering connection.

Parameters:
  DestinationCidrBlock:
    Type: String
    Description: >-
      The IPv4 CIDR address block used for the destination match.
  VpcPeeringConnection:
    Type: String
    Description: >-
      The VPC peering connection that will be added to the route table
  RouteTable:
    Type: String
    Description: >-
      A route will be added to the table for the VPR peering connection
  AllowDnsResolutionFromRemoteVpc:
    Type: String
    Description: >-
      Indicates whether DNS queries from the remote VPC for public hostnames
      resolve to private IP addresses in the local VPC
    AllowedValues:
      - Enabled
      - Disabled

Resources:
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      VpcPeeringConnectionId: !Ref VpcPeeringConnection
      DestinationCidrBlock: !Ref DestinationCidrBlock
  VpcPeeringConnectionOptionsCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ModifyVpcPeeringConnectionOptionsFunction.Arn
      AllowDnsResolutionFromRemoteVpc: !Ref AllowDnsResolutionFromRemoteVpc
  ModifyVpcPeeringConnectionOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >-
        Handles CloudFormation custom resource requests for modifying VPC
        peering connection options from the accepter side
      Environment:
        Variables:
          VPC_PEERING_CONNECTION_ID: !Ref VpcPeeringConnection
      Handler: index.handler
      InlineCode: |
        const AWS = require("aws-sdk");
        const cfnResponse = require("cfn-response");

        const ec2 = new AWS.EC2({ apiVersion: "2016-11-15" });

        exports.handler = async (event, context) => {
          try {
            console.log(JSON.stringify(event));

            let flag;

            if (["Create", "Update"].includes(event.RequestType)) {
              flag =
                event.ResourceProperties.AllowDnsResolutionFromRemoteVpc === "Enabled"
                  ? true
                  : false;
            } else if (["Delete"].includes(event.RequestType)) {
              // If the custom resource is being deleted, reset the option to
              // the default value of false
              flag = false;
            }

            console.log(flag);
            const res = await ec2
              .modifyVpcPeeringConnectionOptions({
                VpcPeeringConnectionId: process.env.VPC_PEERING_CONNECTION_ID,
                AccepterPeeringConnectionOptions: {
                  AllowDnsResolutionFromRemoteVpc: flag,
                },
              })
              .promise();
            console.log(res);

            await cfnResponse.send(event, context, cfnResponse.SUCCESS, {});
          } catch (error) {
            console.log("Sending FAILED response");
            console.log(error);
            await cfnResponse.send(event, context, cfnResponse.FAILED, {});
          }
        };
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Action:
                - ec2:ModifyVpcPeeringConnectionOptions
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
      Runtime: nodejs14.x
      Tags:
        Project: Admin
        "prx:cloudformation:stack-name": !Ref AWS::StackName
        "prx:cloudformation:stack-id": !Ref AWS::StackId
      Timeout: 30
  ModifyVpcPeeringConnectionOptionsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ModifyVpcPeeringConnectionOptionsFunction}
      RetentionInDays: 7
