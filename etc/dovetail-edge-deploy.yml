# etc/dovetail-edge-deploy.yml
# Deploys Dovetail Lambda@Edge functions. The primary purpose of the pipeline
# this creates is to deploy the CloudFormation template that manages the
# CloudFront distribution for Dovetail, which is itself responsible for
# managing the Lambda@Edge functions that the distribution uses.
#
# Neither this CloudFormation template nor the resulting CodePipelne pipeline
# handle updating the Lambda function code or versions. Those are managed via
# the main Infrastructure stack and CD pipeline. This simply deploys those
# functions to the Edge.
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Builds a release pipeline via CodePipeline to deploy Dovetail Lambda@Edge
  functions.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: GitHub API
        Parameters:
          - GitHubToken
          - GitHubWebhookSecret
      - Label:
          default: CloudFormation Stacks
        Parameters:
          - InfrastructureNotificationsStackName
          - StagingCloudFormationStackName
          - ProductionCloudFormationStackName
      - Label:
          default: Staging Dovetail CDN
        Parameters:
          - StagingOriginBucket
          - StagingOriginPath
          - StagingDistributionDomain
      - Label:
          default: Production Dovetail CDN
        Parameters:
          - ProductionOriginBucket
          - ProductionOriginPath
          - ProductionDistributionDomain
      - Label:
          default: Common CDN
        Parameters:
          - BytesLambdaFunctionArn
          - StitchLambdaFunctionArn
    ParameterLabels:
      GitHubToken:
        default: Access token
      GitHubWebhookSecret:
        default: Webhook secret
      InfrastructureNotificationsStackName:
        default: Notifications stack name
      StagingCloudFormationStackName:
        default: Staging stack name
      ProductionCloudFormationStackName:
        default: Production stack name
      StagingOriginBucket:
        default: Origin bucket
      StagingOriginPath:
        default: Origin path
      StagingDistributionDomain:
        default: Distribution domain
      ProductionOriginBucket:
        default: Origin bucket
      ProductionOriginPath:
        default: Origin path
      ProductionDistributionDomain:
        default: Distribution domain
      BytesLambdaFunctionArn:
        default: Unqualified Bytes Lambda function ARN
      StitchLambdaFunctionArn:
        default: Unqualified Stitch Lambda function ARN
Parameters:
  StagingOriginBucket:
    Default: prx-dovetail.s3.amazonaws.com
    Description: >
      The DNS name of the Amazon S3 bucket from which you want CloudFront to
      get objects for this origin, for example, myawsbucket.s3.amazonaws.com.
    Type: String
  StagingOriginPath:
    Default: /stitch-staging
    Description: >
      An optional element that causes CloudFront to request your content from a
      directory in your Amazon S3 bucket or your custom origin, beginning with
      a / (forward slash).
    Type: String
  StagingDistributionDomain:
    Default: dovetail-cdn-staging.prxu.org
    Description: eg. dovetail-cdn.prxu.org
    Type: String
  ProductionOriginBucket:
    Default: prx-dovetail.s3.amazonaws.com
    Description: >
      The DNS name of the Amazon S3 bucket from which you want CloudFront to
      get objects for this origin, for example, myawsbucket.s3.amazonaws.com.
    Type: String
  ProductionOriginPath:
    Default: /stitch-production
    Description: >
      An optional element that causes CloudFront to request your content from a
      directory in your Amazon S3 bucket or your custom origin, beginning with
      a / (forward slash).
    Type: String
  ProductionDistributionDomain:
    Default: dovetail-cdn.prxu.org
    Description: eg. dovetail-cdn.prxu.org
    Type: String
  InfrastructureNotificationsStackName:
    Default: infrastructure-notifications
    Type: String
  GitHubToken:
    Description: >
      A GitHub access token with permissions to update statuses, request
      content, etc
    Type: String
  GitHubWebhookSecret:
    Description: >
      A secret used to sign requests made by GitHub to webhook endpoints.
      This secret is shared by all webhooks created by this template.
    Type: String
  StagingCloudFormationStackName:
    Default: cloudfront-dovetail-cdn-staging
    Description: >
      The name of the CloudFormation stack that manages the staging deployment
      of Dovetail CloudFront distribution
    Type: String
  ProductionCloudFormationStackName:
    Default: cloudfront-dovetail-cdn-production
    Description: >
      The name of the CloudFormation stack that manages the production
      deployment of Dovetail CloudFront distribution
    Type: String
  StagingStitchLambdaFunctionArn:
    Description: >
      e.g., arn:aws:lambda:<region>:<account>:function:<name>
    Type: String
  StagingBytesLambdaFunctionArn:
    Description: >
      e.g., arn:aws:lambda:<region>:<account>:function:<name>
    Type: String
  ProductionStitchLambdaFunctionArn:
    Description: >
      e.g., arn:aws:lambda:<region>:<account>:function:<name>
    Type: String
  ProductionBytesLambdaFunctionArn:
    Description: >
      e.g., arn:aws:lambda:<region>:<account>:function:<name>
    Type: String
Resources:
  # Pipeline
  PipelineArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  PipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        # CodePipeline seems to need access to special buckets
        - PolicyName: GenericCodePipelineS3PutPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::codepipeline*
        # Let CodePipeline read and write artifacts
        - PolicyName: ArtifactStoreFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:Put*
                  - s3:List*
                Resource:
                  - !Sub arn:aws:s3:::${PipelineArtifactStore}
                  - !Sub arn:aws:s3:::${PipelineArtifactStore}/*
        # Allows CodePipeline to invoke Lambda function actions
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:ListFunctions"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt DiscoverEdgeLambdaVersionsFunction.Arn
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactStore
        Type: S3
      RoleArn: !GetAtt PipelineIamRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: PRX
                Repo: Infrastructure
                Branch: master
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: MetaRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: PRX
                Repo: meta.prx.org
                Branch: master
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: MetaRepoSourceArtifact
              RunOrder: 1
        - Name: Versioning
          Actions:
            - Name: PublishVersions
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref PublishEdgeLambdaVersionsFunction
              RunOrder: 1
            - Name: CaptureVersions
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref DiscoverEdgeLambdaVersionsFunction
              OutputArtifacts:
                - Name: LambdaVersionsArtifact
              RunOrder: 2
        # - Name: Staging
        #   Actions:
        #     - Name: CreateStagingChangeSet
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Provider: CloudFormation
        #         Version: "1"
        #       Configuration:
        #         ActionMode: CHANGE_SET_REPLACE
        #         Capabilities: CAPABILITY_IAM
        #         ChangeSetName: !Sub ${AWS::StackName}StagingChangeSet
        #         RoleArn: !GetAtt CloudFormationIamRole.Arn
        #         StackName: !Ref StagingCloudFormationStackName
        #         ParameterOverrides: !Sub |
        #           {
        #             # These are the parameters of cdn/dovetail-cdn.yml
        #             "OriginBucket": "${StagingOriginBucket}",
        #             "OriginPath": "${StagingOriginPath}",
        #             "DistributionDomain": "${StagingDistributionDomain}",
        #             "LambdaFunctionArn": { "Fn::GetParam" : ["LambdaVersionsArtifact", "versions.json", "staging_stitch"]},
        #             "LambdaBytesFunctionArn": { "Fn::GetParam" : ["LambdaVersionsArtifact", "versions.json", "staging_bytes"]},
        #             "InfrastructureNotificationsStackName": "${InfrastructureNotificationsStackName}"
        #           }
        #         TemplatePath: InfrastructureRepoSourceArtifact::cdn/dovetail-cdn.yml
        #       InputArtifacts:
        #         - Name: InfrastructureRepoSourceArtifact
        #         - Name: LambdaVersionsArtifact
        #       RunOrder: 1
        #     # TODO Generate delta and send notification
        #     - Name: ExecuteStagingChangeSet
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Provider: CloudFormation
        #         Version: "1"
        #       Configuration:
        #         ActionMode: CHANGE_SET_EXECUTE
        #         Capabilities: CAPABILITY_IAM
        #         ChangeSetName: !Sub ${AWS::StackName}StagingChangeSet
        #         RoleArn: !GetAtt CloudFormationIamRole.Arn
        #         StackName: !Ref StagingCloudFormationStackName
        #       RunOrder: 2
        - Name: Testing
          Actions:
            - Name: Acceptance
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref AcceptanceTestsCodeBuildProject
              InputArtifacts:
                - Name: MetaRepoSourceArtifact
              OutputArtifacts:
                - Name: AcceptanceTestArtifact
              RunOrder: 1
        # - Name: Production
        #   Actions:
        #     - Name: CreateChangeSet
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Provider: CloudFormation
        #         Version: "1"
        #       Configuration:
        #         ActionMode: CHANGE_SET_REPLACE
        #         Capabilities: CAPABILITY_IAM
        #         ChangeSetName: !Sub ${AWS::StackName}ProductionChangeSet
        #         ParameterOverrides: !Sub |
        #           {
        #             # These are the parameters of cdn/dovetail-cdn.yml
        #             "OriginBucket": "${ProductionOriginBucket}",
        #             "OriginPath": "${ProductionOriginPath}",
        #             "DistributionDomain": "${ProductionDistributionDomain}",
        #             "LambdaFunctionArn": { "Fn::GetParam" : ["LambdaVersionsArtifact", "versions.json", "production_stitch"]},
        #             "LambdaBytesFunctionArn": { "Fn::GetParam" : ["LambdaVersionsArtifact", "versions.json", "production_bytes"]},
        #             "InfrastructureNotificationsStackName": "${InfrastructureNotificationsStackName}"
        #           }
        #         RoleArn: !GetAtt CloudFormationIamRole.Arn
        #         StackName: !Ref ProductionCloudFormationStackName
        #         TemplatePath: InfrastructureRepoSourceArtifact::cdn/dovetail-cdn.yml
        #       InputArtifacts:
        #         - Name: InfrastructureRepoSourceArtifact
        #         - Name: LambdaVersionsArtifact
        #       RunOrder: 2
        #     - Name: ApproveChangeSet
        #       ActionTypeId:
        #         Category: Approval
        #         Owner: AWS
        #         Provider: Manual
        #         Version: "1"
        #       Configuration:
        #         # NotificationArn: !Ref CodePipelineApprovalsSnsTopic
        #         CustomData: {}
        #       RunOrder: 3
        #     - Name: ExecuteChangeSet
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Provider: CloudFormation
        #         Version: "1"
        #       Configuration:
        #         ActionMode: CHANGE_SET_EXECUTE
        #         Capabilities: CAPABILITY_IAM
        #         ChangeSetName: !Sub ${AWS::StackName}ProductionChangeSet
        #         RoleArn: !GetAtt CloudFormationIamRole.Arn
        #         StackName: !Ref ProductionCloudFormationStackName
        #       RunOrder: 4
  # PipelineInfrastructureRepoGitHubWebhook:
  #   Type: AWS::CodePipeline::Webhook
  #   Properties:
  #     Authentication: GITHUB_HMAC
  #     AuthenticationConfiguration:
  #       SecretToken: !Ref GitHubWebhookSecret
  #     Filters:
  #       - JsonPath: "$.ref"
  #         # Properties from the target action configuration can be included as
  #         # placeholders in this value by surrounding the action configuration
  #         # key with curly braces. For example, if the value supplied here is
  #         # "refs/heads/{Branch}" and the target action has an action
  #         # configuration property called "Branch" with a value of "master",
  #         # the MatchEquals value will be evaluated as "refs/heads/master".
  #         MatchEquals: "refs/heads/{Branch}"
  #     RegisterWithThirdParty: true
  #     TargetAction: InfrastructureRepo
  #     TargetPipeline: !Ref Pipeline
  #     TargetPipelineVersion: !GetAtt Pipeline.Version
  # PipelineMetaRepoGitHubWebhook:
  #   Type: AWS::CodePipeline::Webhook
  #   Properties:
  #     Authentication: GITHUB_HMAC
  #     AuthenticationConfiguration:
  #       SecretToken: !Ref GitHubWebhookSecret
  #     Filters:
  #       - JsonPath: "$.ref"
  #         # Properties from the target action configuration can be included as
  #         # placeholders in this value by surrounding the action configuration
  #         # key with curly braces. For example, if the value supplied here is
  #         # "refs/heads/{Branch}" and the target action has an action
  #         # configuration property called "Branch" with a value of "master",
  #         # the MatchEquals value will be evaluated as "refs/heads/master".
  #         MatchEquals: "refs/heads/{Branch}"
  #     RegisterWithThirdParty: true
  #     TargetAction: MetaRepo
  #     TargetPipeline: !Ref Pipeline
  #     TargetPipelineVersion: !GetAtt Pipeline.Version
  # Acceptance Test Pipeline Action
  AcceptanceTestsCodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Path: "/"
      Policies:
        # Allow CodeBuild to log to CloudWatch
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  # NOTE These need to stay in sync with the CodeBuild Project
                  # name from below
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AcceptanceTests
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-AcceptanceTests:*
        # CodeBuild sources from CodePipeline artifacts, so it needs access
        - PolicyName: ArtifactStoreBasicAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Effect: Allow
                Resource: !Sub arn:aws:s3:::${PipelineArtifactStore}/*
        - PolicyName: ParameterStorePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - "*" # TODO
  AcceptanceTestsCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Runs acceptance tests for Dovetail
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 561178107736.dkr.ecr.us-east-1.amazonaws.com/meta.prx.org:latest
        Type: LINUX_CONTAINER
      # If this Name changes, the CodeBuild role policy needs to change too
      Name: !Sub ${AWS::StackName}-AcceptanceTests
      ServiceRole: !GetAtt AcceptanceTestsCodeBuildIamRole.Arn
      Source:
        BuildSpec: "buildspec-pipeline.yml"
        Type: CODEPIPELINE
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      TimeoutInMinutes: 5
  # # CloudFormation Pipeline
  # CloudFormationIamRole:
  #   # This role gets passed to CloudFormation, and is used by CloudFormation to
  #   # to perform actions against other AWS resources.
  #   #
  #   # This is the role used to launch the root stack, and thus all nested app
  #   # and service stacks. It needs permissions to create any of the resources
  #   # that those stacks require. Eg, if a stack nested in the root stack
  #   # includes an S3 bucket resource, this role needs a policy that allows it
  #   # to create S3 buckets.
  #   # NOTE This role should not be given to anything other than the CodePipeline
  #   # CloudFormation actions! It's very powerful!
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - cloudformation.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #       # Wildcard access to CloudFormation stack and changesets for the
  #       # staging and producton Dovetail stacks. Explicitly denies stack
  #       # deletion.
  #       - PolicyName: StackManipulationPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             #
  #             - Effect: Allow
  #               Action:
  #                 - "cloudformation:*"
  #               Resource:
  #                 - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${StagingCloudFormationStackName}/*"
  #                 # TODO turn this on only when it's safe
  #                 # - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProductionCloudFormationStackName}/*"
  #                 - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:changeSet/*"
  #             - Effect: Deny
  #               Action:
  #                 - "cloudformation:DeleteStack"
  #               Resource: "*"
  #       # These are permissions for the services that are needed to create
  #       # resources defined in the resources that cdn/dovetail-cdn.yml
  #       # Currently:
  #       # - CloudFront distribution
  #       # - CloudWatch alarms
  #       - PolicyName: CloudFrontPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - "cloudfront:Create*"
  #                 - "cloudfront:Get*"
  #                 - "cloudfront:List*"
  #                 - "cloudfront:Untag*"
  #                 - "cloudfront:Update*"
  #                 - "cloudfront:Tag*"
  #               Resource: "*"
  #       - PolicyName: CloudWatchAlarmsPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - "cloudwatch:DeleteAlarms"
  #                 - "cloudwatch:DescribeAlarms"
  #                 - "cloudwatch:DisableAlarmActions"
  #                 - "cloudwatch:EnableAlarmActions"
  #                 - "cloudwatch:PutMetricAlarm"
  #               Resource: "*"

  # Pipeline functions
  PublishEdgeLambdaVersionsFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyName: LambdaVersionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:PublishVersion
                Resource:
                  - !Ref StagingStitchLambdaFunctionArn
                  - !Ref StagingBytesLambdaFunctionArn
                  - !Ref ProductionStitchLambdaFunctionArn
                  - !Ref ProductionBytesLambdaFunctionArn
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                  - codepipeline:GetPipelineState
                Resource: "*"
  PublishEdgeLambdaVersionsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import traceback
          import os
          from botocore.client import Config

          code_pipeline = boto3.client('codepipeline')
          lamb = boto3.client('lambda')


          def put_job_success(job, message):
              print('Putting job success')
              print(message)
              code_pipeline.put_job_success_result(jobId=job['id'])


          def put_job_failure(job, message):
              print('Putting job failure')
              print(message)
              code_pipeline.put_job_failure_result(
                  jobId=job['id'],
                  failureDetails={'message': message, 'type': 'JobFailed'})


          # Tries to publish new versions of each Lambda function, from their $LATEST
          # code and configuration. New versions are only created if a any changes have
          # been made since the most recent version, so it is safe to call this
          # multiple times
          def publish_versions():
              lamb.publish_version(FunctionName=os.environ['STAGING_BYTES_LAMBDA_FUNCTION_ARN'])
              lamb.publish_version(FunctionName=os.environ['STAGING_STITCH_LAMBDA_FUNCTION_ARN'])
              lamb.publish_version(FunctionName=os.environ['PRODUCTION_BYTES_LAMBDA_FUNCTION_ARN'])
              lamb.publish_version(FunctionName=os.environ['PRODUCTION_STITCH_LAMBDA_FUNCTION_ARN'])


          def lambda_handler(event, context):
              try:
                  job = event['CodePipeline.job']

                  publish_versions()

                  # Cleanup
                  put_job_success(job, '')
              except Exception as e:
                  print('Function failed due to exception.')
                  print(e)
                  traceback.print_exc()
                  put_job_failure(job, 'Function exception: ' + str(e))
      Description: tktktktk
      Handler: index.lambda_handler
      Environment:
        Variables:
          STAGING_STITCH_LAMBDA_FUNCTION_ARN: !Ref StagingStitchLambdaFunctionArn
          STAGING_BYTES_LAMBDA_FUNCTION_ARN: !Ref StagingBytesLambdaFunctionArn
          PRODUCTION_STITCH_LAMBDA_FUNCTION_ARN: !Ref ProductionStitchLambdaFunctionArn
          PRODUCTION_BYTES_LAMBDA_FUNCTION_ARN: !Ref ProductionBytesLambdaFunctionArn
      MemorySize: 128
      Role: !GetAtt PublishEdgeLambdaVersionsFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 3
  DiscoverEdgeLambdaVersionsFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${PipelineArtifactStore}/*
        - PolicyName: LambdaInfoPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:ListVersionsByFunction
                Resource:
                  - !Ref StagingStitchLambdaFunctionArn
                  - !Ref StagingBytesLambdaFunctionArn
                  - !Ref ProductionStitchLambdaFunctionArn
                  - !Ref ProductionBytesLambdaFunctionArn
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                  - codepipeline:GetPipelineState
                Resource: "*"
  DiscoverEdgeLambdaVersionsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import zipfile
          import boto3
          import traceback
          import json
          import uuid
          import os
          from botocore.client import Config

          s3 = boto3.client('s3', config=Config(signature_version='s3v4'))
          code_pipeline = boto3.client('codepipeline')
          lamb = boto3.client('lambda')


          def put_job_success(job, message):
              print('Putting job success')
              print(message)
              code_pipeline.put_job_success_result(jobId=job['id'])


          def put_job_failure(job, message):
              print('Putting job failure')
              print(message)
              code_pipeline.put_job_failure_result(
                  jobId=job['id'],
                  failureDetails={'message': message, 'type': 'JobFailed'})


          # Queries for version information about each Dovetail edge Lambda function, and
          # returns a dictionary with the most recent version of each.
          def function_versions():
              staging_stitch = lamb.list_versions_by_function(
                  FunctionName=os.environ['STAGING_STITCH_LAMBDA_FUNCTION_ARN'],
                  MaxItems=999
              )

              staging_bytes = lamb.list_versions_by_function(
                  FunctionName=os.environ['STAGING_BYTES_LAMBDA_FUNCTION_ARN'],
                  MaxItems=999
              )

              production_stitch = lamb.list_versions_by_function(
                  FunctionName=os.environ['PRODUCTION_STITCH_LAMBDA_FUNCTION_ARN'],
                  MaxItems=999
              )


              production_bytes = lamb.list_versions_by_function(
                  FunctionName=os.environ['PRODUCTION_BYTES_LAMBDA_FUNCTION_ARN'],
                  MaxItems=999
              )

              return {
                'staging_bytes': staging_bytes['Versions'][-1]['Version'],
                'staging_stitch': staging_stitch['Versions'][-1]['Version'],
                'production_bytes': production_bytes['Versions'][-1]['Version'],
                'production_stitch': production_stitch['Versions'][-1]['Version']
              }


          # Creates a zipped JSON file output artifact with the version information of
          # the Edge functions. The file is sent to S3 in a location supplied by the
          # triggering CodePipeline execution job
          def export_versions(job):
              output_artifact = job['data']['outputArtifacts'][0]

              versions = function_versions()

              print(f"...Publishing versions {versions}...")

              body = json.dumps(versions)

              archive_path = "/tmp/{0}".format(uuid.uuid4())

              # TODO Should be able to do this all in memory
              archive = zipfile.ZipFile(archive_path, mode='w')
              archive.writestr('versions.json', body, compress_type=zipfile.ZIP_DEFLATED)
              archive.close()

              output_location = output_artifact['location']['s3Location']
              output_bucket = output_location['bucketName']
              output_key = output_location['objectKey']
              s3.upload_file(archive_path, output_bucket, output_key)

              print(f"...Wrote to {output_bucket}/{output_key}...")


          def lambda_handler(event, context):
              try:
                  job = event['CodePipeline.job']

                  export_versions(job)

                  # Cleanup
                  put_job_success(job, '')
              except Exception as e:
                  print('Function failed due to exception.')
                  print(e)
                  traceback.print_exc()
                  put_job_failure(job, 'Function exception: ' + str(e))
      Description: tktktktk
      Handler: index.lambda_handler
      Environment:
        Variables:
          STAGING_STITCH_LAMBDA_FUNCTION_ARN: !Ref StagingStitchLambdaFunctionArn
          STAGING_BYTES_LAMBDA_FUNCTION_ARN: !Ref StagingBytesLambdaFunctionArn
          PRODUCTION_STITCH_LAMBDA_FUNCTION_ARN: !Ref ProductionStitchLambdaFunctionArn
          PRODUCTION_BYTES_LAMBDA_FUNCTION_ARN: !Ref ProductionBytesLambdaFunctionArn
      MemorySize: 128
      Role: !GetAtt DiscoverEdgeLambdaVersionsFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 3
