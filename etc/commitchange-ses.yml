# etc/commitchange-ses.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Processes SES email messages (via an SNS topic subscription) generated from
  CommitChange donation notifications, and sends Slack notifications in some
  cases
Parameters:
  SesRuleSetName:
    Type: String
  SlackMessageRelayTopicArn:
    Type: String
  DestinationSlackChannel:
    Type: String
  RecipientEmailAddress:
    Type: String
  LogGroupRetentionPolicyFunctionArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: >
      The Parameter Store key for the log group retention policy function's
      ARN (not the ARN itself)
Resources:
  SnsTopic:
    Type: AWS::SNS::Topic
  ReceiptRule:
    Type: AWS::SES::ReceiptRule
    Properties:
      Rule:
        Actions:
          - SNSAction:
              Encoding: UTF-8
              TopicArn: !Ref SnsTopic
        Enabled: true
        # Name: !Sub "commitchange-notif-${AWS::StackName}"
        Recipients:
          - !Ref RecipientEmailAddress
        ScanEnabled: false
        TlsPolicy: Optional
      RuleSetName: !Ref SesRuleSetName
  MessageHandlerFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref SlackMessageRelayTopicArn
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  MessageHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');

          const sns = new AWS.SNS({ apiVersion: '2010-03-31' });

          const SLACK_ICON = ':commitchange:';
          const SLACK_USERNAME = 'CommitChange';

          function publishMessage(message) {
              return new Promise((resolve, reject) => {
                  const json = JSON.stringify(message);

                  sns.publish({
                      TopicArn: process.env.SLACK_MESSAGE_RELAY_TOPIC_ARN,
                      Message: json,
                  }, (err) => {
                      if (err) {
                          reject(err);
                      } else {
                          resolve();
                      }
                  });
              });
          }

          exports.handler = async (event) => {
              const message = JSON.parse(event['Records'][0]['Sns']['Message']);
              // message has: notificationType, receipt, mail, content
              // https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-notifications-contents.html

              const content = message.content;
              const commonHeaders = message.mail.commonHeaders;

              const subject = commonHeaders.subject;

              const name = subject.match(/receipt for (.*)/)[1];
              const amount = content.match(/\$([0-9,]+)/)[1];
              const isRecurring = content.includes('Every 1 month');

              const text = `${name || 'Anonymous'}: $${amount} ${isRecurring ? '(monthly)' : ''}`;

              const campaignName = 'Radiotopia 2018 Fundraiser';

              if (content.includes(campaignName)) {
                  await publishMessage({
                      channel: process.env.DESTINATION_SLACK_CHANNEL,
                      username: SLACK_USERNAME,
                      icon_emoji: SLACK_ICON,
                      text
                  });
              }
          };
      Description: >
        Handles CommitChange email notifications and forwards select
        information to Slack
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelayTopicArn
          DESTINATION_SLACK_CHANNEL: !Ref DestinationSlackChannel
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt MessageHandlerFunctionIamRole.Arn
      Runtime: nodejs8.10
      Tags:
        - Key: Project
          Value: Misc
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 4
  MessageHandlerFunctionSesInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MessageHandlerFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsTopic
  MessageHandlerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt MessageHandlerFunction.Arn
      Protocol: lambda
      TopicArn: !Ref SnsTopic
  MessageHandlerFunctionRetentionPolicy:
    Type: "Custom::LogGroupRetentionPolicy"
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub "/aws/lambda/${MessageHandlerFunction}"
      RetentionInDays: 5
