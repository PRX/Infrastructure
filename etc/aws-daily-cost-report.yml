# etc/aws-daily-cost-report.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates a Lambda function that runs some basic reports against Cost Explorer,
  and posts the results to Slack
Parameters:
  SlackMessageRelayTopicArn:
    Type: String
Resources:
  ReportFunctionIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref SlackMessageRelayTopicArn
        - PolicyName: CostExplorerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ce:GetReservationCoverage"
                  - "ce:GetCostAndUsage"
                Resource:
                  - "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  ReportFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          from datetime import datetime, timedelta

          sns = boto3.client('sns')
          ce = boto3.client('ce')

          ri_services = [
              'Amazon Elastic Compute Cloud - Compute',
              'Amazon Relational Database Service',
              'Amazon ElastiCache'
          ]

          ri_amounts = {}

          def lambda_handler(event, context):
              for service in ri_services:
                  # No data is available for the last three days, so the window needs to be earlier than that
                  date_start = datetime.today() - timedelta(days=4)
                  date_end = datetime.today() - timedelta(days=3)

                  coverage = ce.get_reservation_coverage(
                      TimePeriod={
                          'Start': date_start.strftime('%Y-%m-%d'),
                          'End': date_end.strftime('%Y-%m-%d')
                      },
                      Granularity='DAILY',
                      Filter={
                          'Dimensions': {
                              'Key': 'SERVICE',
                              'Values': [service]
                          }
                      }
                  )

                  percent = coverage['Total']['CoverageHours']['CoverageHoursPercentage']

                  ri_amounts[service] = percent

              date_start = datetime.today() - timedelta(days=15)
              date_end = datetime.today() - timedelta(days=0)

              response = ce.get_cost_and_usage(
                  TimePeriod={
                      'Start': date_start.strftime('%Y-%m-%d'),
                      'End': date_end.strftime('%Y-%m-%d')
                  },
                  Granularity='DAILY',
                  Metrics=[
                      'UnblendedCost',
                  ],
                  Filter={
                      "Not": {
                              "Dimensions": {
                              "Key": "RECORD_TYPE",
                              "Values": [
                                  "Refund",
                                  "Credit",
                                  "Upfront",
                                  "Recurring",
                                  "Tax",
                                  "Support",
                                  "Other"
                              ]
                          }
                      }
                  }
              )

              url = 'http://image-charts.com/chart?cht=bvs&chs=600x200&chds=a&chls=5&chco=2b9eeb&chd=t:'

              amounts = []

              for result in response['ResultsByTime']:
                  amounts.append(result['Total']['UnblendedCost']['Amount'])

              url = url + ','.join(amounts)

              url = url + f"&chxr=1,{min(amounts)},{max(amounts)}"

              response = ce.get_cost_and_usage(
                  TimePeriod={
                      'Start': date_start.strftime('%Y-%m-%d'),
                      'End': date_end.strftime('%Y-%m-%d')
                  },
                  Granularity='DAILY',
                  Metrics=[
                      'UnblendedCost',
                  ]
              )

              url2 = 'http://image-charts.com/chart?cht=bvs&chs=600x200&chds=a&chls=5&chco=2b9eeb&chd=t:'

              amounts = []

              for result in response['ResultsByTime']:
                  amounts.append(result['Total']['UnblendedCost']['Amount'])

              url2 = url2 + ','.join(amounts)

              url2 = url2 + f"&chxr=1,{min(amounts)},{max(amounts)}"

              sns.publish(
                  TopicArn=os.environ['SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN'],
                  Message=json.dumps({
                      'channel': '#ops-billing',
                      'username': 'AWS Cost Explorer',
                      'icon_emoji': ':aws:',
                      'attachments': [
                          {
                              'title': 'Reservation Coverage',
                              'fields': [
                                  {
                                      'title': 'EC2',
                                      'value': ri_amounts["Amazon Elastic Compute Cloud - Compute"],
                                      'short': True
                                  }, {
                                      'title': 'RDS',
                                      'value': ri_amounts["Amazon Relational Database Service"],
                                      'short': True
                                  }, {
                                      'title': 'ElastiCache',
                                      'value': ri_amounts["Amazon ElastiCache"],
                                      'short': True
                                  }
                              ]
                          }, {
                              'title': 'Usage Costs (All accounts)',
                              'image_url': url
                          }, {
                              'title': 'All Costs',
                              'image_url': url2
                          }
                      ]
                  })
              )
      Description: >
        Sends daily messages to Slack with AWS billing information
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN: !Ref SlackMessageRelayTopicArn
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt ReportFunctionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Misc
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 10
  ReportEventRuleIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt ReportFunction.Arn
  ReportEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        Runs the AWS Billing alerts function once a day
      RoleArn: !GetAtt ReportEventRuleIamRole.Arn
      ScheduleExpression: "cron(0 14 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt ReportFunction.Arn
          Id: !Sub "${AWS::StackName}.ReportFunction"
  ReportFunctionEventInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ReportFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ReportEventRule.Arn
