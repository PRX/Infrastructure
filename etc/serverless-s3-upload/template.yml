AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Easy serverless S3 uploads via the web
Parameters:
  BasicAuthUsername:
    Type: String
  BasicAuthPassword:
    Type: String
  Bucket:
    Type: String
  BucketArn:
    Type: String
  BucketRegionalDomainName:
    Type: String
  PublicAccessHost:
    Type: String
  DomainName:
    Type: String
Resources:
  BucketAccessIamUser:
    Type: AWS::IAM::User
  BucketAccessIamUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:*"
            Resource:
              - !Ref BucketArn
              - !Sub ${BucketArn}/*
      PolicyName: !Sub ${AWS::StackName}-BucketUploadSigningPolicy
      Users:
        - !Ref BucketAccessIamUser
  BucketAccessIamUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: !Ref BucketAccessIamUser
  # Custom Domain
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      Tags:
        - Key: Project
          Value: Misc
        - Key: Name
          Value: !Sub ${AWS::StackName}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      ValidationMethod: DNS
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Ref DomainName
      Tags:
        - Key: Project
          Value: Misc
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  UploadRestApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref WebsiteApi
      Stage: omega
  # Website API
  WebsiteApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/WebsiteApiFunction/
      Description: >
        Provides a simple API for browser-based S3 uploading
      Environment:
        Variables:
          BUCKET: !Ref Bucket
          BUCKET_DOMAIN_NAME: !Ref BucketRegionalDomainName
          UPLOAD_ACCESS_KEY_ID: !Ref BucketAccessIamUserAccessKey
          UPLOAD_SECRET_ACCESS_KEY: !GetAtt BucketAccessIamUserAccessKey.SecretAccessKey
          PUBLIC_ACCESS_HOST: !Ref PublicAccessHost
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt WebsiteApiFunctionIamRole.Arn
      Runtime: python3.10
      Tags:
        Project: serverless-s3-upload
      Timeout: 3
  WebsiteApiFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  WebsiteApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${WebsiteApiFunction}
      RetentionInDays: 5
  WebsiteApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName
      Description: S3 upload website API
  WebsiteApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: omega
      RestApiId: !Ref WebsiteApi
      DeploymentId: !Ref WebsiteApiDeployment
  WebsiteApiDeployment:
    DependsOn:
      - WebsiteApiBrowserBasedUploadMethod
      - StaticWebsiteMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WebsiteApi
  WebsiteApiUnauthorizedGatewayReponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.WWW-Authenticate: "'Basic'"
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref WebsiteApi
      StatusCode: "401"
  WebsiteApiV1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebsiteApi
      ParentId: !GetAtt WebsiteApi.RootResourceId
      PathPart: v1
  WebsiteApiBrowserBasedUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebsiteApi
      ParentId: !Ref WebsiteApiV1Resource
      PathPart: browser-based-upload
  WebsiteApiBrowserBasedUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WebsiteApi
      ResourceId: !Ref WebsiteApiBrowserBasedUploadResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsiteApiFunction.Arn}/invocations
  WebsiteApiBrowserBasedUploadMethodInvokeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebsiteApiFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsiteApi}/${WebsiteApiStage}/*"
  # Static Website
  StaticWebsiteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/StaticWebsiteFunction/
      Description: >
        Generates a basic front end for uploading files to S3
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt StaticWebsiteFunctionIamRole.Arn
      Runtime: python3.10
      Tags:
        Project: serverless-s3-upload
      Timeout: 3
  StaticWebsiteFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${StaticWebsiteFunction}
      RetentionInDays: 5
  StaticWebsiteFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  StaticWebsiteResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WebsiteApi
      ParentId: !GetAtt WebsiteApi.RootResourceId
      PathPart: upload
  StaticWebsiteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref StaticWebsiteAuthorizer
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StaticWebsiteFunction.Arn}/invocations
      ResourceId: !Ref StaticWebsiteResource
      RestApiId: !Ref WebsiteApi
  StaticWebsiteMethodInvokeFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StaticWebsiteFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsiteApi}/${WebsiteApiStage}/*"
  StaticWebsiteAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/StaticWebsiteAuthorizerFunction/
      Description: >
        Authorizer for S3 file upload front end
      Environment:
        Variables:
          BASIC_AUTH_USERNAME: !Ref BasicAuthUsername
          BASIC_AUTH_PASSWORD: !Ref BasicAuthPassword
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt StaticWebsiteAuthorizerFunctionIamRole.Arn
      Runtime: python3.10
      Tags:
        Project: serverless-s3-upload
      Timeout: 3
  StaticWebsiteAuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${StaticWebsiteAuthorizerFunction}
      RetentionInDays: 5
  StaticWebsiteAuthorizerFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  StaticWebsiteAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt StaticWebsiteAuthorizerIamRole.Arn
      AuthorizerResultTtlInSeconds: 600
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StaticWebsiteAuthorizerFunction.Arn}/invocations
      IdentitySource: method.request.header.Authorization
      Name: !Sub ${AWS::StackName}_static_website_authorizer
      RestApiId: !Ref WebsiteApi
      Type: REQUEST
  StaticWebsiteAuthorizerIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AuthorizerLambdaInvoke
          PolicyDocument:
            Statement:
              - Action:
                  - lambda:invokeFunction
                Effect: Allow
                Resource:
                  - !GetAtt StaticWebsiteAuthorizerFunction.Arn
            Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
Outputs:
  UploadWebpageUrl:
    Description: The URL for the webpage used to upload media
    Value: !Sub "https://${WebsiteApi}.execute-api.${AWS::Region}.amazonaws.com/${WebsiteApiStage}/upload"
