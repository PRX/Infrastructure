# etc/root-account-activity-monitor.yml
# Sample CloudWatch Events event (from CloudTrail)
# {
#    "version": "0",
#    "id": "a76750eb-b69f-ae47-b183-4d3cb0700618",
#    "detail-type": "AWS API Call via CloudTrail",
#    "source": "aws.s3",
#    "account": "048723829744",
#    "time": "2018-05-22T12:44:24Z",
#    "region": "us-east-1",
#    "resources": [],
#    "detail": {
#       "eventVersion": "1.05",
#       "userIdentity": {},
#       "eventTime": "2018-05-22T12:44:24Z",
#       "eventSource": "s3.amazonaws.com",
#       "eventName": "DeleteBucket",
#       "awsRegion": "us-east-1",
#       "sourceIPAddress": "209.6.231.175",
#       "userAgent": "[S3Console/0.4, aws-internal/3]",
#       "requestParameters": {},
#       "responseElements": null,
#       "additionalEventData": {
#          "vpcEndpointId": "vpce-6d72a204"
#       },
#       "requestID": "51A7870C114C931C",
#       "eventID": "d687e2af-5a29-4acb-bc41-6892b36420bf",
#       "eventType": "AwsApiCall",
#       "vpcEndpointId": "vpce-6d72a204"
#    }
# }

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates a CloudWatch Events rule that triggers a Lambda function whenever
  there is root account API or Console activity in CloudTrail. A global,
  multi-region CloudTrail trail is also created to log those activities.
Parameters:
  SlackMessageRelayTopicArn:
    Type: String
Resources:
  # CloudTrail
  CloudTrailS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - Key: Project
          Value: Admin
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  CloudTrailS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CloudTrailS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt CloudTrailS3Bucket.Arn
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub ${CloudTrailS3Bucket.Arn}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - CloudTrailS3BucketPolicy
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Ref CloudTrailS3Bucket
      Tags:
        - Key: Project
          Value: Admin
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  # Function
  Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        InlineCode: |
          const AWS = require('aws-sdk');

          const sns = new AWS.SNS({ apiVersion: '2010-03-31' });

          const SLACK_ICON = ':ops-cloudtrail:';
          const SLACK_USERNAME = 'AWS CloudTrail';
          const SLACK_CHANNEL = '#ops-fatal';

          exports.handler = async (event) => {
            console.log(JSON.stringify(event))

            await sns.publish({
              TargetArn: process.env.SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN,
              Message: JSON.stringify({
                channel: SLACK_CHANNEL,
                username: SLACK_USERNAME,
                icon_emoji: SLACK_ICON,
                text: `Root account event detected - ${event.account} ${event['detail-type']} ${event.region} ${event.detail.eventName}`,
              }),
            }).promise();
          };
      Description: >-
        Receives CloudWatch Events rule events related to root account activity
        and sends a message to the Slack relay
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_SNS_TOPIC_ARN: !Ref SlackMessageRelayTopicArn
      Events:
        CloudTrailEventsRule:
          Pattern:
            detail-type:
              - AWS API Call via CloudTrail
              - AWS Console Sign In via CloudTrail
            detail:
              - userIdentity:
                  type:
                    - Root
          TargetId: !Sub ${AWS::AccountId}.${AWS::Region}.RootActivityTarget
      Handler: index.handler
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
        - SNSPublishMessagePolicy:
            TopicName: !Ref SlackMessageRelayTopicArn
      Runtime: nodejs12.x
      Tags:
        Project: Admin
        "prx:cloudformation:stack-name": !Ref AWS::StackName
        "prx:cloudformation:stack-id": !Ref AWS::StackId
      Timeout: 10
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Function}
      RetentionInDays: 3653
