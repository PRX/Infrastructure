# Generally this template is used to launch stacks from the bootstrapping
# CodePipeline. Primarily is is simply a wrapper around individial app- and
# service-specific templates, which get nested into this template and are
# launched when this one is. The CodePiple also passes in a template
# configuration file, which includes parameter values for this and all nested
# templates. This root template MUST define all parameters that are included in
# the config file. It can then pass along select values to nested stacks that
# require them.
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Launches stacks for a number of applications and services that are maintained
  in separate templates.
Mappings:
  EnvironmentTypeAbbreviationMap:
    Testing:
      abbreviation: test
    Beta:
      abbreviation: beta
    Staging:
      abbreviation: stag
    Production:
      abbreviation: prod
Conditions:
  CreateSingletonStacks: !And
    - !Equals [!Ref RootEnvironmentType, Staging]
    - !Equals [!Ref "AWS::Region", !Ref SingletonStackRegion]
Parameters:
  ASGKeyPairName:
    Description: >
      The EC2 key pair used for instances in the Auto Scaling
      group (region-specific)
    Type: "AWS::EC2::KeyPair::KeyName"
  BootstrapStackName:
    Description: The name of the bootstrapping stack in this AWS region
    Type: String
  RootEnvironmentType:
    Description: A string indentifying the type of enviroment being launched
    Type: String
    AllowedValues:
      - Staging
      - Production
  RootStackTemplateConfigBucket:
    Description: >
      S3 bucket that holds CloudFormation template configuration JSON files
    Type: String
  RootStackTemplateConfigArchive:
    Description: >
      The file name of the zip files that holds template configuration files
    Type: String
  SingletonStackRegion:
    Description: >
      The region that stacks considered singleton stacks should launch in
    Type: String
  OpsStatusMessagesSNSTopicArn:
    Type: String
  AutoScalingSlackWebhookURL:
    Type: String
  CloudWatchSlackWebhookURL:
    Type: String
  CloudFormationSlackWebhookURL:
    Type: String
  CodePipelineSlackWebhookURL:
    Type: String
  IkeSlackVerificationToken:
    Type: String
  IkeSlackSlackWebhookURL:
    Type: String
  GitHubOAuthToken:
    Description: >
      A GitHub access token that has permissions for any repositories being
      accessed by these stacks
    Type: String
  ECRRegion:
    Type: String
  EnvCmsHost:
    Type: String
  EnvPlayHost:
    Type: String
  EnvIdHost:
    Type: String
  EnvFeederHost:
    Type: String
  EnvMetaHost:
    Type: String
  EnvPrxHost:
    Type: String
  ##############################################################################
  ##############################################################################
  ##############################################################################
  AudiogramECRImageTag:
    Type: String
  CmsECRImageTag:
    Type: String
  CmsEnvAwsAccessKeyId:
    Type: String
  CmsEnvAwsBucket:
    Type: String
  CmsEnvAwsRegion:
    Type: String
  CmsEnvAwsSecretAccessKey:
    Type: String
  CmsEnvDatabasePoolSize:
    Type: Number
  CmsEnvDbEnvMysqlDatabase:
    Type: String
  CmsEnvDbEnvMysqlPassword:
    Type: String
  CmsEnvDbEnvMysqlUser:
    Type: String
  CmsEnvDbPort3306TcpAddr:
    Type: String
  CmsEnvDbPort3306TcpPort:
    Type: Number
  CmsEnvMemcacheServers:
    Type: String
  CmsEnvMysqlAllowEmptyPassword:
    Type: String
  CmsEnvNewRelicKey:
    Type: String
  CmsEnvNewRelicName:
    Type: String
  CmsEnvPrxSecret:
    Type: String
  CmsEnvPublicAssetSecret:
    Type: String
  CmsEnvRailsEnv:
    Type: String
  CmsEnvRailsSecretKey:
    Type: String
  PublishECRImageTag:
    Type: String
  PublishEnvAuthClientId:
    Type: String
  PublishEnvAwsKey:
    Type: String
  PublishEnvAwsUrl:
    Type: String
  PublishEnvBucketFolder:
    Type: String
  PublishEnvBucketName:
    Type: String
  PublishEnvSignUrl:
    Type: String
  PublishEnvUseCloudfront:
    Type: String
  CmsAudioLambdaZipName:
    Type: String
  CmsImageLambdaZipName:
    Type: String
  UploadLambdaZipName:
    Type: String
  PRXUploadAccessKey:
    Type: String
Resources:
  NotificationsStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        BootstrapStackName: !Ref BootstrapStackName
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
        OpsStatusMessagesSNSTopicArn: !Ref OpsStatusMessagesSNSTopicArn
        AutoScalingSlackWebhookURL: !Ref AutoScalingSlackWebhookURL
        CloudWatchSlackWebhookURL: !Ref CloudWatchSlackWebhookURL
        CloudFormationSlackWebhookURL: !Ref CloudFormationSlackWebhookURL
        CodePipelineSlackWebhookURL: !Ref CodePipelineSlackWebhookURL
        IkeSlackSlackWebhookURL: !Ref IkeSlackSlackWebhookURL
        IkeSlackVerificationToken: !Ref IkeSlackVerificationToken
        TemplateBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket"]]
      TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/notifications.yml"]]
      TimeoutInMinutes: "2"
  # VPCStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/vpc.yml"]]
  #     TimeoutInMinutes: "5"
  # CertificateStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       VPC: !GetAtt VPCStack.Outputs.VPC
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/certificate.yml"]]
  #     TimeoutInMinutes: "5"
  # ECSClusterStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   DependsOn: VPCStack
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       KeyPairName: !Ref ASGKeyPairName
  #       EnvironmentType: !Ref RootEnvironmentType
  #       VPC: !GetAtt VPCStack.Outputs.VPC
  #       VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
  #       VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
  #       VPCSubnet1AZ: !GetAtt VPCStack.Outputs.Subnet1AvailabilityZone
  #       VPCSubnet2AZ: !GetAtt VPCStack.Outputs.Subnet2AvailabilityZone
  #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #       OpsErrorMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsErrorMessagesSNSTopicArn
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/ecs.yml"]]
  #     TimeoutInMinutes: "5"
  # AudiogramPipelineStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Condition: CreateSingletonStacks
  #   DependsOn: ECSClusterStack
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       GitHubOAuthToken: !Ref GitHubOAuthToken
  #       RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
  #       RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
  #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
  #       ECRRegion: !Ref ECRRegion
  #       AudiogramECRImageTag: !Ref AudiogramECRImageTag
  #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/audiogram/pipeline.yml"]]
  #     TimeoutInMinutes: "5"
  # AudiogramStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   DependsOn: ECSClusterStack
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       VPC: !GetAtt VPCStack.Outputs.VPC
  #       VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
  #       VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
  #       VPCCertificateArn: !GetAtt CertificateStack.Outputs.CertificateArn
  #       RootStackName: !Ref AWS::StackName
  #       ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
  #       ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
  #       ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
  #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
  #       ECRRegion: !Ref ECRRegion
  #       AudiogramECRImageTag: !Ref AudiogramECRImageTag
  #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/audiogram/audiogram.yml"]]
  #     TimeoutInMinutes: "5"
  # CmsPipelineStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Condition: CreateSingletonStacks
  #   DependsOn: ECSClusterStack
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       GitHubOAuthToken: !Ref GitHubOAuthToken
  #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
  #       RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
  #       RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
  #       ECRRegion: !Ref ECRRegion
  #       CmsECRRepositoryName: !Ref CmsECRRepositoryName
  #       CmsECRImageTag: !Ref CmsECRImageTag
  #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms.prx.org/pipeline.yml"]]
  #     TimeoutInMinutes: "5"
  # CmsStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   DependsOn: ECSClusterStack
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       VPC: !GetAtt VPCStack.Outputs.VPC
  #       VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
  #       VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
  #       VPCCertificateArn: !GetAtt CertificateStack.Outputs.CertificateArn
  #       RootStackName: !Ref AWS::StackName
  #       ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
  #       ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
  #       ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
  #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
  #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #       ECRRegion: !Ref ECRRegion
  #       CmsECRImageTag: !Ref CmsECRImageTag
  #       CmsEnvAwsAccessKeyId: !Ref CmsEnvAwsAccessKeyId
  #       CmsEnvAwsBucket: !Ref CmsEnvAwsBucket
  #       CmsEnvAwsRegion: !Ref CmsEnvAwsRegion
  #       CmsEnvAwsSecretAccessKey: !Ref CmsEnvAwsSecretAccessKey
  #       EnvCmsHost: !Ref EnvCmsHost
  #       CmsEnvDatabasePoolSize: !Ref CmsEnvDatabasePoolSize
  #       CmsEnvDbEnvMysqlDatabase: !Ref CmsEnvDbEnvMysqlDatabase
  #       CmsEnvDbEnvMysqlPassword: !Ref CmsEnvDbEnvMysqlPassword
  #       CmsEnvDbEnvMysqlUser: !Ref CmsEnvDbEnvMysqlUser
  #       CmsEnvDbPort3306TcpAddr: !Ref CmsEnvDbPort3306TcpAddr
  #       CmsEnvDbPort3306TcpPort: !Ref CmsEnvDbPort3306TcpPort
  #       EnvFeederHost: !Ref EnvFeederHost
  #       EnvIdHost: !Ref EnvIdHost
  #       CmsEnvMemcacheServers: !Ref CmsEnvMemcacheServers
  #       EnvMetaHost: !Ref EnvMetaHost
  #       CmsEnvMysqlAllowEmptyPassword: !Ref CmsEnvMysqlAllowEmptyPassword
  #       CmsEnvNewRelicKey: !Ref CmsEnvNewRelicKey
  #       CmsEnvNewRelicName: !Ref CmsEnvNewRelicName
  #       EnvPrxHost: !Ref EnvPrxHost
  #       CmsEnvPrxSecret: !Ref CmsEnvPrxSecret
  #       CmsEnvPublicAssetSecret: !Ref CmsEnvPublicAssetSecret
  #       CmsEnvRailsEnv: !Ref CmsEnvRailsEnv
  #       CmsEnvRailsSecretKey: !Ref CmsEnvRailsSecretKey
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms.prx.org/cms.prx.org.yml"]]
  #     TimeoutInMinutes: "5"
  # PublishStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   DependsOn: ECSClusterStack
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       VPC: !GetAtt VPCStack.Outputs.VPC
  #       VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
  #       VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
  #       VPCCertificateArn: !GetAtt CertificateStack.Outputs.CertificateArn
  #       RootStackName: !Ref AWS::StackName
  #       ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
  #       ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
  #       ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
  #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
  #       ECRRegion: !Ref ECRRegion
  #       PublishECRImageTag: !Ref PublishECRImageTag
  #       PublishEnvAuthClientId: !Ref PublishEnvAuthClientId
  #       EnvIdHost: !Ref EnvIdHost
  #       PublishEnvAwsKey: !Ref PublishEnvAwsKey
  #       PublishEnvAwsUrl: !Ref PublishEnvAwsUrl
  #       PublishEnvBucketFolder: !Ref PublishEnvBucketFolder
  #       PublishEnvBucketName: !Ref PublishEnvBucketName
  #       EnvCmsHost: !Ref EnvCmsHost
  #       EnvPlayHost: !Ref EnvPlayHost
  #       PublishEnvSignUrl: !Ref PublishEnvSignUrl
  #       PublishEnvUseCloudfront: !Ref PublishEnvUseCloudfront
  #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/publish.prx.org/publish.prx.org.yml"]]
  #     TimeoutInMinutes: "5"
  # CmsAudioLambdaPipelineStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Condition: CreateSingletonStacks
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #       GitHubOAuthToken: !Ref GitHubOAuthToken
  #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
  #       RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
  #       RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
  #       CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms-audio-lambda/pipeline.yml"]]
  #     TimeoutInMinutes: "5"
  # CmsAudioLambdaStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
  #       LambdaFunctionCodeS3Key: !Ref CmsAudioLambdaZipName
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms-audio-lambda/cms-audio-lambda.yml"]]
  #     TimeoutInMinutes: "5"
  # CmsImageLambdaPipelineStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Condition: CreateSingletonStacks
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #       GitHubOAuthToken: !Ref GitHubOAuthToken
  #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
  #       RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
  #       RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
  #       CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms-image-lambda/pipeline.yml"]]
  #     TimeoutInMinutes: "5"
  # CmsImageLambdaStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     NotificationARNs:
  #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
  #     Parameters:
  #       CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
  #       LambdaFunctionCodeS3Key: !Ref CmsImageLambdaZipName
  #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms-image-lambda/cms-image-lambda.yml"]]
  #     TimeoutInMinutes: "5"
  UploadLambdaPipelineStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: CreateSingletonStacks
    Properties:
      NotificationARNs:
        - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
      Parameters:
        OpsWarnMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsWarnMessagesSNSTopicArn
        GitHubOAuthToken: !Ref GitHubOAuthToken
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
        RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
        RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
        CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
        PRXUploadAccessKey: !Ref PRXUploadAccessKey
      TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/upload.prx.org/pipeline.yml"]]
      TimeoutInMinutes: "5"
  UploadLambdaStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
      Parameters:
        OpsWarnMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsWarnMessagesSNSTopicArn
        BootstrapStackName: !Ref BootstrapStackName
        PRXUploadAccessKey: !Ref PRXUploadAccessKey
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
        CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
        LambdaFunctionCodeS3Key: !Ref UploadLambdaZipName
      TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/upload.prx.org/upload.prx.org.yml"]]
      TimeoutInMinutes: "5"
# Outputs:
  # VPCCertificateArn:
  #   Description: The ARN for the wildcard certificate for the VPC
  #   Value: !GetAtt CertificateStack.Outputs.CertificateArn
  # AudiogramHostedZoneDNSName:
  #   Description: Domain name for audiogram app
  #   Value: !GetAtt AudiogramStack.Outputs.HostedZoneDNSName
  # PublishHostedZoneDNSName:
  #   Description: Domain name for publish app
  #   Value: !GetAtt PublishStack.Outputs.HostedZoneDNSName
  # CmsHostedZoneDNSName:
  #   Description: Domain name for CMS app
  #   Value: !GetAtt CmsStack.Outputs.HostedZoneDNSName
