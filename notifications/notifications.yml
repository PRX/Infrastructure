# notifications/notifications.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates foundational resources needed to handle infrastructure-related
  messaging and notifications
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - InfrastructureStorageStackName
          - LogGroupRetentionPolicyFunctionArn
      - Label:
          default: Infrastructure Config
        Parameters:
          - InfrastructureConfigStagingKey
          - InfrastructureCdPipelineName
      - Label:
          default: Slack Secrets
        Parameters:
          - IkeSlackSigningSecret
      - Label:
          default: Slack Webhooks
        Parameters:
          - GenericSlackWebhookUrl
          - IkeDeploysSlackSlackWebhookUrl
      - Label:
          default: SNS Topic Access
        Parameters:
          - SnsTopicPolicyPublishAllowanceAccountIds
          - SnsTopicPolicyPublishAllowanceOrganizationId
    ParameterLabels:
      InfrastructureStorageStackName:
        default: Storage stack name
      InfrastructureConfigStagingKey:
        default: Staging S3 object key
      GenericSlackWebhookUrl:
        default: Generic Incoming Webhook
      IkeDeploysSlackSlackWebhookUrl:
        default: Ike Deploys
      IkeSlackSigningSecret:
        default: Ike Signing Secret
      SnsTopicPolicyPublishAllowanceAccountIds:
        default: "SNS:Publish Account IDs"
      SnsTopicPolicyPublishAllowanceOrganizationId:
        default: "SNS:Publish Organization ID"
      LogGroupRetentionPolicyFunctionArn:
        default: Log group retention function SSM key
      InfrastructureCdPipelineName:
        default: CD pipeline name
Parameters:
  InfrastructureStorageStackName:
    Default: infrastructure-storage
    Description: The name of a previously launched infrastructure storage stack
    Type: String
  InfrastructureConfigStagingKey:
    Default: template-config-staging.zip
    Description: >
      The S3 object key for the staging template configuration file archive
      (.zip), inside the InfrastructureConfigBucket
    Type: String
  GenericSlackWebhookUrl:
    Type: String
  IkeDeploysSlackSlackWebhookUrl:
    Type: String
  IkeSlackSigningSecret:
    Type: String
  IkeOauthAccessToken:
    Type: String
    Description: >
      The OAuth access token generated when Ike was installed (e.g.,
      xoxp-123456789â€¦)
  SnsTopicPolicyPublishAllowanceAccountIds:
    Type: CommaDelimitedList
    Description: >
      Account IDs that will be given SNS:Publish access to notification SNS
      topics. This grants access to all resources/roles/etc in that account.
  SnsTopicPolicyPublishAllowanceOrganizationId:
    Type: String
    Description: >
      Organization ID that will be given SNS:Publish access to notification SNS
      topics. This grants access to all resources/roles/etc in that
      organization.
  LogGroupRetentionPolicyFunctionArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: >
      The Parameter Store key for the log group retention policy function's
      ARN (not the ARN itself)
  InfrastructureCdPipelineName:
    Type: String
    Description: >
      The name of the main CD pipeline in CodePipeline
  FatalNotificationEmailAddress:
    Type: String
    Description: >
      An email address to deliver fatal alarm notifications to
Resources:
  # Shared IAM Roles
  LambdaBasicExecutionIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CloudWatchAlarmPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:DescribeAlarmHistory"
                  - "cloudwatch:DescribeAlarms"
                Resource:
                  - "*"
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref SlackMessageRelaySnsTopic
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  # Notifications web API
  RestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub ${AWS::StackName} API
      Description: >
        Provides an API for inbound requests used by the notifications stack,
        such as Slack interactive messages
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  RestApiDeployment:
    DependsOn:
      - IkeSlashCommandsRestApiProxyMethod
      - IkeCodePipelineApprovalRestApiProxyMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref RestApi
      Description: "Notifications stack deployment"
  RestApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: prod
      Description: "Production stage for notifications stack"
      RestApiId: !Ref RestApi
      DeploymentId: !Ref RestApiDeployment
  # Slack message relay
  SlackMessageRelaySnsTopic:
    Type: "AWS::SNS::Topic"
  SlackMessageRelaySnsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: OrganizationAcccessPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AccountPublish
            Effect: Allow
            Principal:
              AWS: !Ref SnsTopicPolicyPublishAllowanceAccountIds
            Action:
              - SNS:Publish
            Resource: !Ref SlackMessageRelaySnsTopic
          - Sid: OrganizationPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Publish
            Resource: !Ref SlackMessageRelaySnsTopic
            Condition:
              "StringEquals":
                "aws:PrincipalOrgID": !Ref SnsTopicPolicyPublishAllowanceOrganizationId
          - Sid: OwnerAllAccess
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
            Resource: !Ref SlackMessageRelaySnsTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref AWS::AccountId
      Topics:
        - !Ref SlackMessageRelaySnsTopic
  SlackMessageRelayLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: "notifications/slack-message-relay.zip"
      Description: >
        Receives preformed Slack message payloads and sends them to the provided
        Incoming Webhook URL
      Environment:
        Variables:
          DEFAULT_WEBHOOK_URL: !Ref GenericSlackWebhookUrl
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionIamRole.Arn
      Runtime: nodejs8.10
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 10
  SlackMessageRelayPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref SlackMessageRelayLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SlackMessageRelaySnsTopic
  SlackMessageRelaySubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SlackMessageRelayLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref SlackMessageRelaySnsTopic
  SlackMessageRelayErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Notif][Relay][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopic
      OKActions:
        - !Ref OpsWarnMessagesSnsTopic
      AlarmDescription: >
        Slack relay function has encountered several invocation errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 120
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref SlackMessageRelayLambdaFunction
  SlackMessageRelayLambdaFunctionRetentionPolicy:
    Type: "Custom::LogGroupRetentionPolicy"
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub "/aws/lambda/${SlackMessageRelayLambdaFunction}"
      RetentionInDays: 5
  # CloudFormation notifications
  CloudFormationNotificationSnsTopic:
    Type: "AWS::SNS::Topic"
  CloudFormationNotificationSnsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: OrganizationAcccessPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AccountPublish
            Effect: Allow
            Principal:
              AWS: !Ref SnsTopicPolicyPublishAllowanceAccountIds
            Action:
              - SNS:Publish
            Resource: !Ref CloudFormationNotificationSnsTopic
          - Sid: OrganizationPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Publish
            Resource: !Ref CloudFormationNotificationSnsTopic
            Condition:
              "StringEquals":
                "aws:PrincipalOrgID": !Ref SnsTopicPolicyPublishAllowanceOrganizationId
          - Sid: OwnerAllAccess
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
            Resource: !Ref CloudFormationNotificationSnsTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref AWS::AccountId
      Topics:
        - !Ref CloudFormationNotificationSnsTopic
  CloudFormationNotificationHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: "notifications/cloudformation-notification-handler.zip"
      Description: >
        Handles notifications sent by CloudFormation about stack updates
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopic
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionIamRole.Arn
      Runtime: nodejs8.10
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 10
  CloudFormationNotificationPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CloudFormationNotificationHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref CloudFormationNotificationSnsTopic
  CloudFormationNotificationSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt CloudFormationNotificationHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref CloudFormationNotificationSnsTopic
  CloudFormationNotificationHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Notif][Cfn][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopic
      OKActions:
        - !Ref OpsWarnMessagesSnsTopic
      AlarmDescription: >
        CloudFormation notifications function has encountered several
        invocation errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 120
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CloudFormationNotificationHandlerLambdaFunction
  CloudFormationNotificationHandlerLambdaFunctionRetentionPolicy:
    Type: "Custom::LogGroupRetentionPolicy"
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub "/aws/lambda/${CloudFormationNotificationHandlerLambdaFunction}"
      RetentionInDays: 5
  # ASG Autoscaling Notifications
  ASGNotificationSnsTopic:
    Type: "AWS::SNS::Topic"
  ASGNotificationHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: "notifications/autoscaling-notification-handler.zip"
      Description: >
        Handles autoscaling notifications from EC2 auto scaling groups
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopic
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionIamRole.Arn
      Runtime: nodejs8.10
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 10
  ASGNotificationPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref ASGNotificationHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ASGNotificationSnsTopic
  ASGNotificationSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt ASGNotificationHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref ASGNotificationSnsTopic
  ASGNotificationHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Notif][ASG][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopic
      OKActions:
        - !Ref OpsWarnMessagesSnsTopic
      AlarmDescription: >
        ASG notifications function has encountered several invocation errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 120
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ASGNotificationHandlerLambdaFunction
  ASGNotificationHandlerLambdaFunctionRetentionPolicy:
    Type: "Custom::LogGroupRetentionPolicy"
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub "/aws/lambda/${ASGNotificationHandlerLambdaFunction}"
      RetentionInDays: 5
  # CloudWatch Alarms Notifications
  CloudWatchAlarmNotificationHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: "notifications/cloudwatch-alarm-notification-handler.zip"
      Description: >
        Handles notifications from CloudWatch Alarms
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopic
      Handler: lamda_function.lambda_handler
      MemorySize: 192
      Role: !GetAtt LambdaBasicExecutionIamRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 10
  CloudWatchAlarmNotificationHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Notif][Alarms][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopic
      OKActions:
        - !Ref OpsWarnMessagesSnsTopic
      AlarmDescription: >
        CloudWatch Alarms notifications function has encountered several
        invocation errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 120
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref CloudWatchAlarmNotificationHandlerLambdaFunction
  CloudWatchAlarmNotificationHandlerLambdaFunctionRetentionPolicy:
    Type: "Custom::LogGroupRetentionPolicy"
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub "/aws/lambda/${CloudWatchAlarmNotificationHandlerLambdaFunction}"
      RetentionInDays: 5
  # ## SNS topics for CloudWatch Alarm Actions
  OpsDebugMessagesSnsTopic:
    Type: "AWS::SNS::Topic"
  OpsDebugMessagesSnsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: OrganizationAcccessPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AccountPublish
            Effect: Allow
            Principal:
              AWS: !Ref SnsTopicPolicyPublishAllowanceAccountIds
            Action:
              - sns:Publish
            Resource: !Ref OpsDebugMessagesSnsTopic
          - Sid: OrganizationPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsDebugMessagesSnsTopic
            Condition:
              "StringEquals":
                "aws:PrincipalOrgID": !Ref SnsTopicPolicyPublishAllowanceOrganizationId
          - Sid: CloudWatchAlarmsPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsDebugMessagesSnsTopic
            Condition:
              "ArnLike":
                "aws:SourceArn": "arn:aws:cloudwatch:*:*:alarm:*"
          - Sid: OwnerAllAccess
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:GetTopicAttributes
              - sns:SetTopicAttributes
              - sns:AddPermission
              - sns:RemovePermission
              - sns:DeleteTopic
              - sns:Subscribe
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Receive
            Resource: !Ref OpsDebugMessagesSnsTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref AWS::AccountId
      Topics:
        - !Ref OpsDebugMessagesSnsTopic
  OpsInfoMessagesSnsTopic:
    Type: "AWS::SNS::Topic"
  OpsInfoMessagesSnsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: OrganizationAcccessPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AccountPublish
            Effect: Allow
            Principal:
              AWS: !Ref SnsTopicPolicyPublishAllowanceAccountIds
            Action:
              - sns:Publish
            Resource: !Ref OpsInfoMessagesSnsTopic
          - Sid: OrganizationPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsInfoMessagesSnsTopic
            Condition:
              "StringEquals":
                "aws:PrincipalOrgID": !Ref SnsTopicPolicyPublishAllowanceOrganizationId
          - Sid: CloudWatchAlarmsPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsInfoMessagesSnsTopic
            Condition:
              "ArnLike":
                "aws:SourceArn": "arn:aws:cloudwatch:*:*:alarm:*"
          - Sid: OwnerAllAccess
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:GetTopicAttributes
              - sns:SetTopicAttributes
              - sns:AddPermission
              - sns:RemovePermission
              - sns:DeleteTopic
              - sns:Subscribe
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Receive
            Resource: !Ref OpsInfoMessagesSnsTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref AWS::AccountId
      Topics:
        - !Ref OpsInfoMessagesSnsTopic
  OpsWarnMessagesSnsTopic:
    Type: "AWS::SNS::Topic"
  OpsWarnMessagesSnsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: OrganizationAcccessPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AnonymousPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsWarnMessagesSnsTopic
          - Sid: AccountPublish
            Effect: Allow
            Principal:
              AWS: !Ref SnsTopicPolicyPublishAllowanceAccountIds
            Action:
              - sns:Publish
            Resource: !Ref OpsWarnMessagesSnsTopic
          - Sid: OrganizationPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsWarnMessagesSnsTopic
            Condition:
              "StringEquals":
                "aws:PrincipalOrgID": !Ref SnsTopicPolicyPublishAllowanceOrganizationId
          - Sid: CloudWatchAlarmsPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsWarnMessagesSnsTopic
            Condition:
              "ArnLike":
                "aws:SourceArn": "arn:aws:cloudwatch:*:*:alarm:*"
          - Sid: OwnerAllAccess
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:GetTopicAttributes
              - sns:SetTopicAttributes
              - sns:AddPermission
              - sns:RemovePermission
              - sns:DeleteTopic
              - sns:Subscribe
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Receive
            Resource: !Ref OpsWarnMessagesSnsTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref AWS::AccountId
      Topics:
        - !Ref OpsWarnMessagesSnsTopic
  OpsErrorMessagesSnsTopic:
    Type: "AWS::SNS::Topic"
  OpsErrorMessagesSnsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: OrganizationAcccessPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AccountPublish
            Effect: Allow
            Principal:
              AWS: !Ref SnsTopicPolicyPublishAllowanceAccountIds
            Action:
              - sns:Publish
            Resource: !Ref OpsErrorMessagesSnsTopic
          - Sid: OrganizationPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsErrorMessagesSnsTopic
            Condition:
              "StringEquals":
                "aws:PrincipalOrgID": !Ref SnsTopicPolicyPublishAllowanceOrganizationId
          - Sid: CloudWatchAlarmsPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsErrorMessagesSnsTopic
            Condition:
              "ArnLike":
                "aws:SourceArn": "arn:aws:cloudwatch:*:*:alarm:*"
          - Sid: OwnerAllAccess
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:GetTopicAttributes
              - sns:SetTopicAttributes
              - sns:AddPermission
              - sns:RemovePermission
              - sns:DeleteTopic
              - sns:Subscribe
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Receive
            Resource: !Ref OpsErrorMessagesSnsTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref AWS::AccountId
      Topics:
        - !Ref OpsErrorMessagesSnsTopic
  OpsFatalMessagesSnsTopic:
    Type: "AWS::SNS::Topic"
  OpsFatalMessagesSnsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: OrganizationAcccessPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AccountPublish
            Effect: Allow
            Principal:
              AWS: !Ref SnsTopicPolicyPublishAllowanceAccountIds
            Action:
              - sns:Publish
            Resource: !Ref OpsFatalMessagesSnsTopic
          - Sid: OrganizationPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsFatalMessagesSnsTopic
            Condition:
              "StringEquals":
                "aws:PrincipalOrgID": !Ref SnsTopicPolicyPublishAllowanceOrganizationId
          - Sid: CloudWatchAlarmsPublish
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:Publish
            Resource: !Ref OpsFatalMessagesSnsTopic
            Condition:
              "ArnLike":
                "aws:SourceArn": "arn:aws:cloudwatch:*:*:alarm:*"
          - Sid: OwnerAllAccess
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - sns:GetTopicAttributes
              - sns:SetTopicAttributes
              - sns:AddPermission
              - sns:RemovePermission
              - sns:DeleteTopic
              - sns:Subscribe
              - sns:ListSubscriptionsByTopic
              - sns:Publish
              - sns:Receive
            Resource: !Ref OpsFatalMessagesSnsTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref AWS::AccountId
      Topics:
        - !Ref OpsFatalMessagesSnsTopic
  # ## Fatal email redundancy
  OpsFatalMessagesSnsTopicEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      # DeliveryPolicy: Json
      Endpoint: !Ref FatalNotificationEmailAddress
      # FilterPolicy: Json
      Protocol: email
      # RawMessageDelivery: Boolean
      # RedrivePolicy: Json
      # Region: String
      TopicArn: !Ref OpsFatalMessagesSnsTopic
  # ## SNS Triggers for the Lambda function
  CloudWatchAlarmNotificationHandlerDebugSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt CloudWatchAlarmNotificationHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref OpsDebugMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerDebugPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CloudWatchAlarmNotificationHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsDebugMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerInfoSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt CloudWatchAlarmNotificationHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref OpsInfoMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerInfoPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CloudWatchAlarmNotificationHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsInfoMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerWarnSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt CloudWatchAlarmNotificationHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref OpsWarnMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerWarnPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CloudWatchAlarmNotificationHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsWarnMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerErrorSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt CloudWatchAlarmNotificationHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref OpsErrorMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerErrorPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CloudWatchAlarmNotificationHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsErrorMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerFatalSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt CloudWatchAlarmNotificationHandlerLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref OpsFatalMessagesSnsTopic
  CloudWatchAlarmNotificationHandlerFatalPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CloudWatchAlarmNotificationHandlerLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsFatalMessagesSnsTopic
  # Ike
  IkeHandlerLambdaIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref SlackMessageRelaySnsTopic
        - PolicyName: CloudFrontPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudfront:ListDistributions"
                  - "cloudfront:CreateInvalidation"
                Resource:
                  - "*"
        - PolicyName: CodePipelineApprovalPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:PutApprovalResult"
                Resource:
                  - "*" # This should be okay
        - PolicyName: CodePipelineExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:StartPipelineExecution"
                Resource:
                  - "*" # This should be okay
        - PolicyName: S3ProductionConfigPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:List*"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "s3:Get*"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/*"]]
              - Effect: Allow
                Action:
                  - "s3:Put*"
                Resource:
                  - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureConfigBucket", "/", !Ref InfrastructureConfigStagingKey]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  IkeCallbackHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: "notifications/ike-interactive-messages-callback-handler.zip"
      Description: >
        Handles requests from Slack for interactive messages
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref IkeSlackSigningSecret
          SLACK_ACCESS_TOKEN: !Ref IkeOauthAccessToken
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopic
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt IkeHandlerLambdaIamRole.Arn
      Runtime: nodejs8.10
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 3
  IkeSlashCommandsHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: "notifications/ike-slash-commands-handler.zip"
      Description: >
        Handles requests from Slack for slash commands
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref IkeSlackSigningSecret
          SLACK_ACCESS_TOKEN: !Ref IkeOauthAccessToken
          INFRASTRUCTURE_CONFIG_BUCKET:
            Fn::ImportValue:
              !Sub ${InfrastructureStorageStackName}-InfrastructureConfigBucket
          INFRASTRUCTURE_CONFIG_STAGING_KEY: !Ref InfrastructureConfigStagingKey
          INFRASTRUCTURE_CD_PIPELINE_NAME: !Ref InfrastructureCdPipelineName
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt IkeHandlerLambdaIamRole.Arn
      Runtime: nodejs8.10
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 3
  IkeCallbackHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Notif][Ike][Callback][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopic
      OKActions:
        - !Ref OpsWarnMessagesSnsTopic
      AlarmDescription: >
        Ike callback handler function has encountered several invocation errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 120
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref IkeCallbackHandlerLambdaFunction
  IkeSlashCommandsHandlerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: "[Notif][Ike][Slash][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopic
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopic
      OKActions:
        - !Ref OpsWarnMessagesSnsTopic
      AlarmDescription: >
        Ike slash command handler function has encountered several
        invocation errors
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 120
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref IkeSlashCommandsHandlerLambdaFunction
  IkeCallbackHandlerRestApiLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref IkeCallbackHandlerLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${RestApiStage}/*"  # TOD This isn't quite right. Reference one made by the console to correct
  IkeSlashCommandsHandlerRestApiLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref IkeSlashCommandsHandlerLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${RestApiStage}/*"  # TOD This isn't quite right. Reference one made by the console to correct
  IkeRestApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "ike"
  IkeCallbackHandlerLambdaFunctionRetentionPolicy:
    Type: "Custom::LogGroupRetentionPolicy"
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub "/aws/lambda/${IkeCallbackHandlerLambdaFunction}"
      RetentionInDays: 5
  IkeSlashCommandsHandlerLambdaFunctionRetentionPolicy:
    Type: "Custom::LogGroupRetentionPolicy"
    Properties:
      ServiceToken: !Ref LogGroupRetentionPolicyFunctionArn
      LogGroupName: !Sub "/aws/lambda/${IkeSlashCommandsHandlerLambdaFunction}"
      RetentionInDays: 5
  ## Ike Web API
  IkeSlashCommandsRestApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref IkeRestApiResource
      PathPart: "slash-commands"
  IkeSlashCommandsRestApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref IkeSlashCommandsRestApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkeSlashCommandsHandlerLambdaFunction.Arn}/invocations
  IkeCodePipelineRestApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref IkeRestApiResource
      PathPart: "codepipeline"
  IkeCodePipelineApprovalRestApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref IkeCodePipelineRestApiResource
      PathPart: "approval"
  IkeCodePipelineApprovalRestApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref IkeCodePipelineApprovalRestApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkeCallbackHandlerLambdaFunction.Arn}/invocations
Outputs:
  # Slack relay topic used by many other notification handlers
  SlackMessageRelaySnsTopicArn:
    Value: !Ref SlackMessageRelaySnsTopic
    Export:
      Name: !Sub ${AWS::StackName}-SlackMessageRelaySnsTopicArn
  # Log-level topics used by CloudWatch Alarms
  OpsDebugMessagesSnsTopicArn:
    Value: !Ref OpsDebugMessagesSnsTopic
    Export:
      Name: !Sub ${AWS::StackName}-OpsDebugMessagesSnsTopicArn
  OpsInfoMessagesSnsTopicArn:
    Value: !Ref OpsInfoMessagesSnsTopic
    Export:
      Name: !Sub ${AWS::StackName}-OpsInfoMessagesSnsTopicArn
  OpsWarnMessagesSnsTopicArn:
    Value: !Ref OpsWarnMessagesSnsTopic
    Export:
      Name: !Sub ${AWS::StackName}-OpsWarnMessagesSnsTopicArn
  OpsErrorMessagesSnsTopicArn:
    Value: !Ref OpsErrorMessagesSnsTopic
    Export:
      Name: !Sub ${AWS::StackName}-OpsErrorMessagesSnsTopicArn
  OpsFatalMessagesSnsTopicArn:
    Value: !Ref OpsFatalMessagesSnsTopic
    Export:
      Name: !Sub ${AWS::StackName}-OpsFatalMessagesSnsTopicArn
  # Service-specific notification handler topics
  CloudFormationNotificationSnsTopic:
    Value: !Ref CloudFormationNotificationSnsTopic
    Export:
      Name: !Sub ${AWS::StackName}-CloudFormationNotificationSnsTopic
  ASGNotificationSnsTopic:
    Value: !Ref ASGNotificationSnsTopic
    Export:
      Name: !Sub ${AWS::StackName}-ASGNotificationSnsTopic
  # Ike Slack App
  IkeCodePipelineApprovalHandlerCallbackUrl:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}/ike/codepipeline/approval"
  IkeSlashCommandsHandlerCallbackUrl:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}/ike/slash-commands"
  IkeDeploysSlackSlackWebhookUrl:
    Value: !Ref IkeDeploysSlackSlackWebhookUrl
    Export:
      Name: !Sub ${AWS::StackName}-IkeDeploysSlackSlackWebhookUrl
