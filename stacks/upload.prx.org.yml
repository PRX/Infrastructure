AWSTemplateFormatVersion: "2010-09-09"
Description: File upload Lambda function
Conditions:
  CreateStagingResources: !Equals [!Ref EnvironmentType, Staging]
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
Parameters:
  OpsErrorMessagesSnsTopicArn:
    Type: String
  CodeS3Bucket:
    Type: String
  CodeS3ObjectVersion:
    Type: String
  PRXUploadAccessKey:
    Type: String
  EnvironmentType:
    Type: String
  EnvironmentTypeAbbreviation:
    Type: String
  WildcardCertificateArn:
    Type: String
Resources:
  # API Gateway
  UploadRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${AWS::StackName} API"
      Description: "Api used by PRX Upload Lambda"
  UploadRestApiSignatureResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref UploadRestApi
      ParentId: !GetAtt UploadRestApi.RootResourceId
      PathPart: "signature"
  UploadRestApiSignatureMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref UploadRestApi
      ResourceId: !Ref UploadRestApiSignatureResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadLambdaFunction.Arn}/invocations
  UploadRestApiOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref UploadRestApi
      ResourceId: !Ref UploadRestApiSignatureResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  UploadRestApiDeployment:
    DependsOn:
      - UploadRestApiSignatureMethod
      - UploadRestApiOptionsMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref UploadRestApi
  UploadRestApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: prod
      Description: production stage for upload lambda gateway integration
      RestApiId: !Ref UploadRestApi
      DeploymentId: !Ref UploadRestApiDeployment
  # Custom Domain
  UploadRestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      CertificateArn: !Ref WildcardCertificateArn
      DomainName: !Join ["", ["upload-", !Ref UploadRestApi, "-", !Ref "AWS::Region", !If [CreateStagingResources, ".staging", ""], ".prx.tech"]]
  UploadRestApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      BasePath: '/prod' # This should match the StageName of the UploadRestApiStage
      DomainName: !Ref RestApiDomainName
      RestApiId: !Ref RestApi
  UploadRestApiDomainNameRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      Comment: Record sets for upload signing API
      HostedZoneName: prx.tech.
      RecordSets:
        - Type: AAAA
          Name: !Join ["", ["upload-", !Ref UploadRestApi, "-", !Ref AWS::Region, !If [CreateStagingResources, ".staging", ""], ".prx.tech"]]
          AliasTarget:
            DNSName: !GetAtt UploadRestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: A
          Name: !Join ["", ["upload-", !Ref UploadRestApi, "-", !Ref AWS::Region, !If [CreateStagingResources, ".staging", ""], ".prx.tech"]]
          AliasTarget:
            DNSName: !GetAtt UploadRestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
  # Upload signing
  UploadLambdaIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  UploadLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Sub "lambda/PRX-upload.prx.org.zip"
        S3ObjectVersion: !Ref CodeS3ObjectVersion
      Description: File upload Lambda function
      Environment:
        Variables:
          ACCESS_KEY: !Ref PRXUploadAccessKey
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt UploadLambdaIamRole.Arn
      Runtime: nodejs6.10
      Timeout: 5
  UploadRestApiLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref UploadLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UploadRestApi}/${UploadRestApiStage}/*"
  UploadLambdaErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda][Error] Invocation 4XX"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription:
        The error rate on the upload lambda has exceeded 0
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadLambdaFunction
  UploadLambdaThrottleAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda][Throttles] Invocation 429"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription:
        Throttles on the upload lambda has exceeded 0
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Sum
      Threshold: "0"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadLambdaFunction
  UploadLambdaDurationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda][Duration] Unusually slow"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription:
        At least one invocation duration exceeded 225ms
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: "1"
      MetricName: Duration
      Namespace: AWS/Lambda
      Period: "60"
      Statistic: Maximum
      Threshold: "225"
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadLambdaFunction
Outputs:
  ApiDomainName:
    Description: The custom API domain name
    Value: !Ref UploadRestApiDomainName
  DistributionDomainName:
    Description: The Amazon CloudFront distribution domain name that's mapped to the custom domain name
    Value: !GetAtt UploadRestApiDomainName.DistributionDomainName
