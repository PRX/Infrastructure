# stacks/play.prx.org.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: play.prx.org application running in Docker
Mappings:
  Shared:
    Project:
      name: play.prx.org
    Container:
      name: play-express
Conditions:
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
  CreateStagingResources: !Equals [!Ref EnvironmentType, Staging]
Parameters:
  # VPC ########################################################################
  VPC:
    Type: "AWS::EC2::VPC::Id"
  # Load Balancer ##############################################################
  PlatformALBDNSName:
    Type: String
  PlatformALBFullName:
    Type: String
  PlatformALBCanonicalHostedZoneID:
    Type: String
  PlatformALBHTTPSListenerArn:
    Type: String
  PlatformALBListenerPriorityPrefix:
    Type: String
  # ECS Cluster ################################################################
  ECSCluster:
    Type: String
  ECSServiceIAMRole:
    Type: String
  # Misc #######################################################################
  OpsErrorMessagesSnsTopicArn:
    Type: String
  EnvironmentType:
    Type: String
  EnvironmentTypeAbbreviation:
    Type: String
  EcrRegion:
    Type: String
  SecretsBase:
    Type: String
  ContainerMemory:
    Type: String
  ContainerCpu:
    Type: String
  # Shared ENV #################################################################
  # Play ECS ################################################################
  PlayEcrImageTag:
    Type: String
  # Play ENV ################################################################
  PlaySecretsVersion:
    Type: String
Resources:
  PlayLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 14
  PlayALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Project
          Value: !FindInMap [Shared, Project, name]
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Play-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "15"
      VpcId: !Ref VPC
  # ALB Listener Rules
  PlayALBHTTPSHostWildcardListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - TargetGroupArn: !Ref PlayALBTargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - play.*
      ListenerArn: !Ref PlatformALBHTTPSListenerArn
      Priority: !Join ["", [!Ref PlatformALBListenerPriorityPrefix, "30"]]
  # ECS Service
  PlayTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Cpu: !Ref ContainerCpu
          Environment:
            - Name: APP_NAME
              Value: "play"
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref PlaySecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
          Essential: true
          # TODO
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/play.prx.org:${PlayEcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PlayLogGroup
              awslogs-region: !Ref AWS::Region
          Memory: !Ref ContainerMemory
          Name: !FindInMap [Shared, Container, name]
          PortMappings:
            - HostPort: 0
              ContainerPort: 4300
      Tags:
        - Key: Project
          Value: !FindInMap [Shared, Project, name]
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  PlayService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 3
      LoadBalancers:
        - ContainerName: !FindInMap [Shared, Container, name]
          ContainerPort: 4300
          TargetGroupArn: !Ref PlayALBTargetGroup
      Role: !Ref ECSServiceIAMRole
      Tags:
        - Key: Project
          Value: !FindInMap [Shared, Project, name]
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TaskDefinition: !Ref PlayTaskDefinition
  # Route 53
  PlayWebRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      Comment: Record sets for dualstack web traffic to an play instance
      HostedZoneName: prx.tech.
      RecordSets:
        - Type: AAAA
          Name: !Sub play.${EnvironmentTypeAbbreviation}-${VPC}.prx.tech.
          AliasTarget:
            DNSName: !Ref PlatformALBDNSName
            HostedZoneId: !Ref PlatformALBCanonicalHostedZoneID
        - Type: A
          Name: !Sub play.${EnvironmentTypeAbbreviation}-${VPC}.prx.tech.
          AliasTarget:
            DNSName: !Ref PlatformALBDNSName
            HostedZoneId: !Ref PlatformALBCanonicalHostedZoneID
  # CloudWatch Alarms
  PlayALBTargetGroup500Alarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Play][ALB][Error] Target 5XX"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: >
        5XX server errors originating from the play target group exceeded 0
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref PlatformALBFullName
        - Name: TargetGroup
          Value: !GetAtt PlayALBTargetGroup.TargetGroupFullName

  ProxyPathListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: CreateStagingResources
    Properties:
      Actions:
        - TargetGroupArn: !Ref ProxyTargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - play.*
        - Field: path-pattern
          Values:
            - /proxy*
      ListenerArn: !Ref PlatformALBHTTPSListenerArn
      Priority: !Join ["", [!Ref PlatformALBListenerPriorityPrefix, "20"]]

  ProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ProxyFunctionAlbPermission
    Properties:
      HealthCheckEnabled: false
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Play }
      Targets:
        - Id: !GetAtt ProxyFunction.Arn
      TargetType: lambda

  ProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub ${EnvironmentType} Play feed proxy
      Environment:
        Variables:
          MAX_HTTP_REDIRECTS: 4
      Handler: index.handler
      InlineCode: |
        const http = require("http");
        const https = require("https");

        const PROXY_UA = "play.prx.org feed proxy";
        const ACCEPTED_TYPES = [
          "application/rss+xml",
          "application/rdf+xml;q=0.8",
          "application/atom+xml;q=0.6",
          "application/xml;q=0.4",
          "text/xml;q=0.4",
        ];

        async function request(url, redirectCount, redirectUrl) {
          return new Promise((resolve, reject) => {
            const q = new URL(redirectUrl || url);

            // Setup request options
            const options = {
              host: q.host,
              port: q.port,
              path: `${q.pathname || ""}${q.search || ""}`,
              method: "GET",
              headers: {
                Accept: ACCEPTED_TYPES.join(","),
                "User-Agent": PROXY_UA,
              },
            };

            const h = q.protocol === "https:" ? https : http;
            const req = h.request(options, (res) => {
              res.setEncoding("utf8");

              let resData = "";
              res.on("data", (chunk) => {
                resData += chunk;
                return resData;
              });

              res.on("end", async () => {
                if (
                  (res.statusCode >= 200 && res.statusCode < 300) ||
                  res.statusCode === 404 ||
                  res.statusCode === 410
                ) {
                  resolve(resData);
                } else if (res.statusCode === 301 || res.statusCode === 302) {
                  try {
                    if (redirectCount > +process.env.MAX_HTTP_REDIRECTS) {
                      reject(new Error("Too many redirects"));
                      return;
                    }

                    const count = redirectCount ? redirectCount + 1 : 1;
                    await httpRequest(url, count, res.headers.location);
                    resolve();
                  } catch (error) {
                    reject(error);
                  }
                } else {
                  const error = new Error(`Error ${res.statusCode}: ${resData}`);
                  reject(error);
                }
              });
            });

            req.on("error", (error) => reject(error));

            req.write("");
            req.end();
          });
        }

        exports.handler = async (event) => {
          const feedUrl = event.queryStringParameters.url;

          res = await request(feedUrl);

          return {
            statusCode: 200,
            statusDescription: "200 OK",
            isBase64Encoded: false,
            headers: {
              "Content-Type": "application/rss+xml",
              "Cache-Control": "public, max-age=90",
            },
            body: res,
          };
        };
      MemorySize: 256
      Runtime: nodejs12.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Play
      Timeout: 6
  ProxyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProxyFunction}
      RetentionInDays: 14
  ProxyFunctionAlbPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProxyFunction
      Principal: elasticloadbalancing.amazonaws.com

Outputs:
  HostedZoneDNSName:
    Description: Convenience domain name for the ALB in a hosted zone
    Value: !Sub |
      play.${EnvironmentTypeAbbreviation}-${VPC}.prx.tech.
