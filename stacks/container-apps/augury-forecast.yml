# stacks/container-apps/augury-forecast.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Augury Forecast FARGATE execution
Parameters:
  # Configuration ##############################################################
  ECSCluster:
    Type: String
  ECSInstanceIAMRoleArn:
    Type: String
  EcrImageTag:
    Type: String
  EcrRegion:
    Type: String
  EnvironmentType:
    Type: String
  EnvironmentTypeAbbreviation:
    Type: String
  SecretsBase:
    Type: String
  SecretsInstanceDecryptPolicyArn:
    Type: String
  SecretsInstanceAccessPolicyArn:
    Type: String
  SecretsVersion:
    Type: String
  VPCSubnet1:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet2:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet3:
    Type: "AWS::EC2::Subnet::Id"
  # Monitoring #################################################################
  OpsErrorMessagesSnsTopicArn:
    Type: String
Resources:
  # Augury task running under Fargate
  AuguryForecastLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 14
  AuguryForecastExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Tags:
        - Key: Project
          Value: augury
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  AuguryForecastTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - !Ref SecretsInstanceDecryptPolicyArn
        - !Ref SecretsInstanceAccessPolicyArn
      Tags:
        - Key: Project
          Value: augury
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  AuguryForecastTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Command: [forecast]
          Environment:
            - Name: APP_NAME
              Value: augury
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/augury.prx.org:${EcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AuguryForecastLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: augury-forecast
          Name: augury-forecast
      Cpu: "4096"
      ExecutionRoleArn: !GetAtt AuguryForecastExecutionRole.Arn
      Memory: "16384"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Project
          Value: augury
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      TaskRoleArn: !GetAtt AuguryForecastTaskRole.Arn
  # SQS relay for launching Fargate tasks
  AuguryForecastRelaySqsQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      FifoQueue: true
  AuguryForecastRelaySqsQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref AuguryForecastRelaySqsQueue
      PolicyDocument:
        Id: AuguryForecastRelayPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: ECSInstanceSendMessage
            Effect: Allow
            Principal:
              AWS: !Ref ECSInstanceIAMRoleArn
            Action:
              - sqs:SendMessage
            Resource: !GetAtt AuguryForecastRelaySqsQueue.Arn
  AuguryForecastRelayLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Path: "/"
      Policies:
        - PolicyName: FargateLauncher
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: !Ref AuguryForecastTaskDefinition
                Action:
                  - ecs:RunTask
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt AuguryForecastExecutionRole.Arn
                  - !GetAtt AuguryForecastTaskRole.Arn
      Tags:
        - Key: Project
          Value: augury
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  AuguryForecastRelayLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Launches fargate forecast executions from SQS
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
          ECS_TASK_DEFINITION: !Ref AuguryForecastTaskDefinition
          VPC_SUBNET_1: !Ref VPCSubnet1
          VPC_SUBNET_2: !Ref VPCSubnet2
          VPC_SUBNET_3: !Ref VPCSubnet3
      Events:
        SqsMessages:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt AuguryForecastRelaySqsQueue.Arn
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');
        const ecs = new AWS.ECS();

        const MAX_FARGATES = 10;
        const STARTED_BY = 'augury-forecast-relay-lambda';

        // ECS listTask parameters
        const listParams = {
          cluster: process.env.ECS_CLUSTER,
          desiredStatus: 'RUNNING',
          launchType: 'FARGATE',
          maxResults: MAX_FARGATES,
          startedBy: STARTED_BY,
        };

        // ECS runTask parameters
        const runParams = {
          cluster: process.env.ECS_CLUSTER,
          launchType: 'FARGATE',
          networkConfiguration: {
            awsvpcConfiguration: {
              subnets: [process.env.VPC_SUBNET_1, process.env.VPC_SUBNET_2, process.env.VPC_SUBNET_3],
              assignPublicIp: 'ENABLED',
            },
          },
          platformVersion: '1.4.0',
          startedBy: STARTED_BY,
          taskDefinition: process.env.ECS_TASK_DEFINITION,
        };

        // lightweight json logger
        function log(level, msg, extra = {}) {
          console[level](JSON.stringify({level, msg, ...extra}));
        }

        exports.handler = async (event) => {
          const listRes = await ecs.listTasks(listParams).promise();
          const running = listRes.taskArns.length;
          if (running < MAX_FARGATES) {
            log('info', `launching ${numToRun} forecasts`);
            try {
              const runRes = await ecs.runTask(runParams).promise();
              log('debug', 'ran task', runRes);
            } catch (err) {
              log('error', 'error running task', err);
              throw err;
            }
          }
        };
      MemorySize: 128
      ReservedConcurrentExecutions: 1
      Role: !GetAtt AuguryForecastRelayLambdaRole.Arn
      Runtime: nodejs12.x
      Tags:
        Project: augury
        Environment: !Ref EnvironmentType
        "prx:cloudformation:stack-name": !Ref AWS::StackName
        "prx:cloudformation:stack-id": !Ref AWS::StackId
      Timeout: 5
  AuguryForecastRelayLambdaErrors:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[AuguryForecastRelay][Errors] ${EnvironmentType} > 0"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: Errors on the augury forecast relay lambda exceeded 0
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuguryForecastRelayLambdaFunction
Outputs:
  SqsQueueUrl:
    Description: Url for the forecast relay SQS queue
    Value: !Ref AuguryForecastRelaySqsQueue
