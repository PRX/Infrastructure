# stacks/container-apps/sphinx-nlb.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Docker sphinx and web application with its own NLB
Conditions:
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
  HasMemoryReservation: !Not [!Equals [!Ref ContainerMemoryReservation, ""]]
Parameters:
  # VPC ########################################################################
  VPC:
    Type: "AWS::EC2::VPC::Id"
  VPCSubnet1:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet2:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet3:
    Type: "AWS::EC2::Subnet::Id"
  VPCCertificateArn:
    Type: String
  # ECS Cluster ################################################################
  ECSCluster:
    Type: String
  ECSServiceAutoscaleIAMRoleArn:
    Type: String
  ECSServiceIAMRole:
    Type: String
  # Misc #######################################################################
  OpsDebugMessagesSnsTopicArn:
    Type: String
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  EnvironmentType:
    Type: String
  EnvironmentTypeAbbreviation:
    Type: String
  SecretsBase:
    Type: String
  EcrRegion:
    Type: String
  EcrImageTag:
    Type: String
  DesiredWebs:
    Type: String
    Default: 0
  DesiredWebsProduction:
    Type: String
    Default: 0
  SecretsInstanceDecryptPolicyArn:
    Type: String
  SecretsInstanceAccessPolicyArn:
    Type: String
  # App ENV #################################################################
  AppName:
    Type: String # castle, crier, cms, feeder
  SecretsVersion:
    Type: String
  ContainerPort:
    Type: String
    Default: 3000
  ContainerMemory:
    Type: String
    Default: 500
  ContainerMemoryReservation:
    Type: String
    Default: ""
  ContainerCpu:
    Type: String
    Default: 128
  HealthCheckPath:
    Type: String
    Default: "/sessions/new"
Resources:
  SphinxInboundSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow web and SSH traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        # - CidrIpv6: ::/0
        #   IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        # - CidrIpv6: ::/0
        #   IpProtocol: tcp
        #   FromPort: 80
        #   ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
        # - CidrIpv6: ::/0
        #   IpProtocol: tcp
        #   FromPort: 3000
        #   ToPort: 3000
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        # - CidrIpv6: ::/0
        #   IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 9312
          ToPort: 9312
        # - CidrIpv6: ::/0
        #   IpProtocol: tcp
        #   FromPort: 9312
        #   ToPort: 9312
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub ${AppName}-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  SphinxOutboundSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow all outbound traffic
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        # - CidrIpv6: ::/0
        #   IpProtocol: "-1"
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub ${AppName}-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  NLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets:
        - !Ref VPCSubnet1
        - !Ref VPCSubnet2
        - !Ref VPCSubnet3
      Type: network
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub ${AppName}-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  NLBSphinxListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref NLB
      Port: 9312
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBSphinxTargetGroup
  NLBHTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref NLB
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBWebTargetGroup
  NLBHTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - CertificateArn: !Ref VPCCertificateArn
      LoadBalancerArn: !Ref NLB
      Port: 443
      Protocol: TLS
      SslPolicy: "ELBSecurityPolicy-2016-08"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBWebTargetGroup
  NLBWebTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn: NLB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: "3000"
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub ${AppName}-${EnvironmentTypeAbbreviation}-${VPC}
      Port: 80
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      TargetType: ip
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub ${AppName}-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      VpcId: !Ref VPC
  NLBSphinxTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn: NLB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub ${AppName}-${EnvironmentTypeAbbreviation}-sx-${VPC}
      Port: 9312
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      TargetType: ip
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub ${AppName}-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      VpcId: !Ref VPC
  # CloudWatch Alarms
  NLBTarget500Alarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[${AppName}][NLB][Error] Target 5XX"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: !Sub |
        5XX server errors originating from the ${AppName} application
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt NLB.LoadBalancerFullName
  NLB500Alarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[${AppName}][NLB][Error] LB 5XX"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: !Sub |
        5XX load balancer errors originating from the ${AppName} load balancer
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt NLB.LoadBalancerFullName
  NLBResponseTimeP95Alarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[${AppName}][NLB][TargetResponseTime] P95 extremely slow"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: !Sub |
        Target response time value for ${AppName} load balancer targets at 95th
        percentile higher than expected
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      ExtendedStatistic: p95
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 300
      Threshold: 0.2
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt NLB.LoadBalancerFullName
  # ECS Service - Web
  WebLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 14
  WebTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Description: Execution Role for tasks using the sphinx NLB
      Path: /
      Policies:
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - "*"
                Condition:
                  StringEquals:
                    # aws:sourceVpce: !Ref EcrVpcEndpoint
                    aws:sourceVpc: !Ref VPC
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  WebTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Description: Task Role for tasks using the sphinx NLB
      ManagedPolicyArns:
        - !Ref SecretsInstanceDecryptPolicyArn
        - !Ref SecretsInstanceAccessPolicyArn
      Path: /
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  WebTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Cpu: !Ref ContainerCpu
          Environment:
            - Name: APP_NAME
              Value: "networks"
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: LOCAL_SPHINX
              Value: "true"
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/networks.prx.org:${EcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebLogGroup
              awslogs-region: !Ref AWS::Region
          Memory: !Ref ContainerMemory
          MemoryReservation: !If [HasMemoryReservation, !Ref ContainerMemoryReservation, !Ref "AWS::NoValue"]
          Name: !Sub ${AppName}-web
          PortMappings:
            - ContainerPort: !Ref ContainerPort
            - ContainerPort: 9312
          Command:
            - web
      ExecutionRoleArn: !GetAtt WebTaskExecutionRole.Arn
      NetworkMode: awsvpc
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TaskRoleArn: !GetAtt WebTaskRole.Arn
  WebService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - NLBSphinxListener
      - NLBHTTPListener
      - NLBHTTPSListener
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [CreateProductionResources, !Ref DesiredWebsProduction, !Ref DesiredWebs]
      LoadBalancers:
        - ContainerName: !Sub ${AppName}-web
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref NLBWebTargetGroup
        - ContainerName: !Sub ${AppName}-web
          ContainerPort: 9312
          TargetGroupArn: !Ref NLBSphinxTargetGroup
      # Role: !Ref ECSServiceIAMRole
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SphinxInboundSecurityGroup
            - !Ref SphinxOutboundSecurityGroup
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref VPCSubnet1
            - !Ref VPCSubnet2
            - !Ref VPCSubnet3
      Tags:
        - Key: Project
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TaskDefinition: !Ref WebTaskDefinition
  # Route 53
  WebRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      Comment: Record sets for dualstack web traffic to a web app instance
      HostedZoneName: prx.tech.
      RecordSets:
        - Type: A
          Name: !Sub ${AppName}.${EnvironmentTypeAbbreviation}-${VPC}.prx.tech.
          AliasTarget:
            DNSName: !Sub dualstack.${NLB.DNSName}
            HostedZoneId: !GetAtt NLB.CanonicalHostedZoneID
Outputs:
  HostedZoneDNSName:
    Description: Convenience domain name for the NLB in a hosted zone
    Value: !Sub |
      ${AppName}.${EnvironmentTypeAbbreviation}-${VPC}.prx.tech.
