AWSTemplateFormatVersion: "2010-09-09"
Description: Top-level proxy server for www.prx.org
Conditions:
  CreateStagingResources: !Equals [!Ref EnvironmentType, Staging]
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
Parameters:
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  CodeS3Bucket:
    Type: String
  CodeS3ObjectVersion:
    Type: String
  EnvironmentType:
    Type: String
  EnvironmentTypeAbbreviation:
    Type: String
  WildcardCertificateArn:
    Type: String
Mappings:
  EnvironmentTypeMap:
    Testing:
      DomainName: "proxy.test.prx.tech"
      HostedZoneName: "prx.tech."
      CorporateHost: "corporate.prx.tech"
      ExchangeHost: "exchange.test.prx.tech"
      PrxSessionKey: "_prx_session_test"
    Staging:
      DomainName: "proxy.staging.prx.tech"
      HostedZoneName: "prx.tech."
      CorporateHost: "corporate.prx.tech"
      ExchangeHost: "exchange.staging.prx.tech"
      PrxSessionKey: "_prx_session_staging"
    Production:
      DomainName: "proxy.prx.org"
      HostedZoneName: "prx.org."
      CorporateHost: "corporate.prx.tech"
      ExchangeHost: "exchange.prx.org"
      PrxSessionKey: "_prx_session"
Resources:
  ProxyLambdaIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  ProxyLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: lambda/PRX-proxy.prx.org.zip
        S3ObjectVersion: !Ref CodeS3ObjectVersion
      Description: Top-level proxy server for www.prx.org
      Environment:
        Variables:
          CORPORATE_HOST: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, CorporateHost]
          EXCHANGE_HOST: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, ExchangeHost]
          PRX_SESSION_KEY: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, PrxSessionKey]
      Handler: index.handler
      MemorySize: 192
      Role: !GetAtt ProxyLambdaIamRole.Arn
      Runtime: nodejs6.10
      Timeout: 30
      Tags:
        - Key: Project
          Value: Corporate
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub ProxyPrxOrg-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ProxyRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${AWS::StackName} API"
      Description: "API used by PRX Proxy Lambda"
      BinaryMediaTypes:
        - "*~1*" # or "*/*"
  ProxyRestApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ProxyRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ProxyRestApi
  ProxyRestApiRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProxyLambdaFunction.Arn}/invocations
      RestApiId: !Ref ProxyRestApi
      ResourceId: !GetAtt ProxyRestApi.RootResourceId
  ProxyRestApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProxyLambdaFunction.Arn}/invocations
      RestApiId: !Ref ProxyRestApi
      ResourceId: !Ref ProxyRestApiResource
  ProxyRestApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ProxyRestApiRootMethod
      - ProxyRestApiMethod
    Properties:
      RestApiId: !Ref ProxyRestApi
  ProxyRestApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref ProxyRestApiDeployment
      Description: Proxy lambda API gateway integration
      RestApiId: !Ref ProxyRestApi
      StageName: prod
  ProxyRestApiLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref ProxyLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProxyRestApi}/${ProxyRestApiStage}/*"
  ProxyRestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      CertificateArn: !Ref WildcardCertificateArn
      DomainName: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DomainName]
  ProxyRestApiBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      DomainName: !Ref ProxyRestApiDomainName
      RestApiId: !Ref ProxyRestApi
      Stage: prod
  ProxyRestApiDomainNameRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      Comment: Record sets for proxy server API
      HostedZoneName: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, HostedZoneName]
      RecordSets:
        - Type: AAAA
          Name: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DomainName]
          AliasTarget:
            DNSName: !GetAtt ProxyRestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: A
          Name: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DomainName]
          AliasTarget:
            DNSName: !GetAtt ProxyRestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
  ProductionRedirectRestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Condition: CreateProductionResources
    Properties:
      CertificateArn: !Ref WildcardCertificateArn
      DomainName: prx.org
  ProductionRestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Condition: CreateProductionResources
    Properties:
      CertificateArn: !Ref WildcardCertificateArn
      DomainName: www.prx.org
  ProductionRestApiBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Condition: CreateProductionResources
    Properties:
      DomainName: !Ref ProductionRestApiDomainName
      RestApiId: !Ref ProxyRestApi
      Stage: prod
Outputs:
  ApiDomainName:
    Description: The custom API domain name
    Value: !Ref ProxyRestApiDomainName
  DistributionDomainName:
    Description: The Amazon CloudFront distribution domain name that's mapped to the custom domain name
    Value: !GetAtt ProxyRestApiDomainName.DistributionDomainName
