# stacks/custom-resources/root.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Provides services to be used as CloudFormation custom resources

Parameters:
  EnvironmentType:
    Type: String
  StorageStackName:
    Type: String

Resources:
  AmazonSesSmtpCredentialsGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: tktktk
      Handler: index.lambda_handler
      InlineCode: |
        import cfnresponse
        import hmac
        import hashlib
        import base64

        # These values are required to calculate the signature. Do not change them.
        DATE = "11111111"
        SERVICE = "ses"
        MESSAGE = "SendRawEmail"
        TERMINAL = "aws4_request"
        VERSION = 0x04


        def sign(key, msg):
            return hmac.new(key, msg.encode("utf-8"), hashlib.sha256).digest()


        def calculate_key(secret_access_key, region):
            signature = sign(("AWS4" + secret_access_key).encode("utf-8"), DATE)
            signature = sign(signature, region)
            signature = sign(signature, SERVICE)
            signature = sign(signature, TERMINAL)
            signature = sign(signature, MESSAGE)
            signature_and_version = bytes([VERSION]) + signature
            smtp_password = base64.b64encode(signature_and_version)
            return smtp_password.decode("utf-8")

        # Ref: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/smtp-credentials.html
        def lambda_handler(event, context):
            props = event["ResourceProperties"]

            cfnresponse.send(event, context, cfnresponse.SUCCESS, {
              "UserName": props["AccessKeyId"],
              "Password": calculate_key(props["SecretAccessKey"], props["Region"])
            })
      MemorySize: 128
      Runtime: python3.8
      Tags:
        Project: Infrastructure
        Environment: !Ref EnvironmentType
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 4
  AmazonSesSmtpCredentialsGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AmazonSesSmtpCredentialsGeneratorFunction}
      RetentionInDays: 14

  S3StaticSiteDeployFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Deploys the contents of a zip archive to an S3 bucket
      Handler: index.lambda_handler
      InlineCode: |
        import cfnresponse
        import boto3
        from botocore.client import Config
        import io
        import zipfile
        import os
        import traceback
        import mimetypes
        import re

        s3 = boto3.client("s3", config=Config(signature_version="s3v4"))

        mimetypes.init()
        mimetypes.add_type("application/json", "json")
        mimetypes.add_type("application/ttf", "ttf")
        mimetypes.add_type("application/eot", "eot")
        mimetypes.add_type("application/otf", "otf")
        mimetypes.add_type("application/woff", "woff")


        def lambda_handler(event, context):
            try:
                print(event)

                if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                    props = event["ResourceProperties"]

                    # The location of the built static site archive file in S3
                    bucket = props["StaticSiteArchiveS3Bucket"]
                    key = props["StaticSiteArchiveS3Object"]
                    version = props["StaticSiteArchiveS3ObjectVersion"]

                    # Get the archive object
                    s3_obj = s3.get_object(Bucket=bucket, Key=key, VersionId=version)

                    unzip_dir = f"/tmp/unzip-{event['RequestId']}"

                    # Unzip the archive, to disk
                    with zipfile.ZipFile(io.BytesIO(s3_obj["Body"].read()), "r") as zip:
                        zip.extractall(unzip_dir)

                    # The bucket to deploy the static to
                    deploy_bucket = props["StaticSiteS3DeployBucket"]

                    # Upload everything from the unzipped archive
                    for root, dirs, files in os.walk(unzip_dir):
                        for filename in files:

                            local_path = os.path.join(root, filename)
                            s3_key = os.path.relpath(local_path, unzip_dir)

                            print(f"Uploading {s3_key} to {deploy_bucket}")
                            mime_type = (
                                mimetypes.guess_type(filename)[0] or "application/octet-stream"
                            )
                            extras = {"ContentType": mime_type}
                            if re.search(r"\.html$", filename):
                                extras["CacheControl"] = "max-age=300"
                            s3.upload_file(local_path, deploy_bucket, s3_key, ExtraArgs=extras)

                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

            except Exception as e:
                print("Function failed due to exception.")
                print(e)
                traceback.print_exc()
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
      MemorySize: 256
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Action: s3:PutObject
              Effect: Allow
              Resource: "*"
            - Action:
                - s3:GetObject
                - s3:GetObjectVersion
              Effect: Allow
              Resource:
                - !Join ["", ["arn:aws:s3:::", "Fn::ImportValue": !Sub "${StorageStackName}-InfrastructureApplicationCodeBucket", "/*"]]
      Runtime: python3.8
      Tags:
        Project: Infrastructure
        Environment: !Ref EnvironmentType
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 60
  S3StaticSiteDeployFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${S3StaticSiteDeployFunction}
      RetentionInDays: 14

  AvailabilityZoneSelectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Deploys the contents of a zip archive to an S3 bucket
      Handler: index.lambda_handler
      InlineCode: |
        import cfnresponse
        import boto3
        import traceback

        ec2 = boto3.client("ec2")

        DISALLOWED_AZS = ["use1-az3"]


        def azFilter(az):
            return az["ZoneId"] not in DISALLOWED_AZS


        def lambda_handler(event, context):
            try:
                print(event)

                if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                    azs = ec2.describe_availability_zones()["AvailabilityZones"]
                    azs.sort(key=lambda a: a["ZoneName"])
                    allowed = list(filter(azFilter, azs))
                    names = list(map(lambda a: a["ZoneName"], allowed))

                    cfnresponse.send(event, context, cfnresponse.SUCCESS, { "ZoneNames": names })
                else:
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

            except Exception as e:
                pass
                print("Function failed due to exception.")
                print(e)
                traceback.print_exc()
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
      MemorySize: 128
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Action: ec2:DescribeAvailabilityZones
              Effect: Allow
              Resource: "*"
      Runtime: python3.8
      Tags:
        Project: Infrastructure
        Environment: !Ref EnvironmentType
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 60
  AvailabilityZoneSelectorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AvailabilityZoneSelectorFunction}
      RetentionInDays: 14

Outputs:
  AmazonSesSmtpCredentialsGeneratorServiceToken:
    Description: Service token for the SES SMTP credentials generator
    Value: !GetAtt AmazonSesSmtpCredentialsGeneratorFunction.Arn
  S3StaticSiteDeployServiceToken:
    Description: Service token for the S3 static site deployer
    Value: !GetAtt S3StaticSiteDeployFunction.Arn
  AvailabilityZoneSelectorServiceToken:
    Description: Service token for the availability zone selector
    Value: !GetAtt AvailabilityZoneSelectorFunction.Arn
