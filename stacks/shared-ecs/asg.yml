# stacks/shared-ecs/asg.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates an Auto Scaling Group that launches EC2 instances into the shared ECS
  cluster. Also creates a capacity provider associated with the shared ECS
  cluster that helps manage the size of the ASG. Instances launched from the
  ASG allow all outbound traffic. Inbound traffic is permitted using several
  security groups. Instances in the ASG are launched in public subnets.

Parameters:
  kStagingImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    # Update this value to change which AMI the launch template uses. You can
    # find the latest image name here:
    # https://console.aws.amazon.com/systems-manager/parameters/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_name/description
    #                                                      ▼              Put it here               ▼
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/amzn2-ami-ecs-hvm-2.0.20211120-x86_64-ebs/image_id
  kProductionImageId: # TODO Sync with staging
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    # Update this value to change which AMI the launch template uses. You can
    # find the latest image name here:
    # https://console.aws.amazon.com/systems-manager/parameters/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_name/description
    #                                                      ▼              Put it here               ▼
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/amzn2-ami-ecs-hvm-2.0.20210819-x86_64-ebs/image_id
  ########
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  SlackMessageRelaySnsTopicArn: { Type: String }
  CloudWatchLogGroupTaggerServiceToken: { Type: String }
  KeyPairName: { Type: AWS::EC2::KeyPair::KeyName }
  AuthorizedKeys: { Type: CommaDelimitedList }
  VpcPublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  EcsClusterName: { Type: String }
  SharedEcsAsgInstanceSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  LoadBalancerSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedMysqlClientSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedPostgresqlClientSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedRedisClientSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  EcsLaunchEndpointsAccessSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  KmsEndpointAccessSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedRedisReplicationGroupEndpointAddress: { Type: String }
  SharedRedisReplicationGroupEndpointPort: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  IsStaging: !Equals [!Ref EnvironmentType, Staging]

Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: !Ref SlackMessageRelaySnsTopicArn
            Version: "2012-10-17"
          PolicyName: SlackRelaySnsPublish
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
  InstanceRoleSetHealthPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AutoscalingSetInstanceHealth
      PolicyDocument:
        Statement:
          - Action: autoscaling:SetInstanceHealth
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${Asg}
        Version: "2012-10-17"
      Roles:
        - !Ref InstanceRole

  # Based on https://aws.amazon.com/ru/blogs/compute/how-to-automate-container-instance-draining-in-amazon-ecs
  # this lambda handles draining ECS tasks from instances in this ASG before they
  # terminate. Should keep an eye on the github issue for less-DIY support of this
  # functionality: https://github.com/aws/containers-roadmap/issues/256
  ECSDrainSNSTopic:
    Condition: IsStaging
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
  ECSDrainSNSRole:
    Condition: IsStaging
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: /
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
  ECSDrainHook:
    Condition: IsStaging
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref Asg
      DefaultResult: ABANDON
      HeartbeatTimeout: 900
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !Ref ECSDrainSNSTopic
      RoleARN: !GetAtt ECSDrainSNSRole.Arn
  ECSDrainFunction:
    Condition: IsStaging
    Type: AWS::Serverless::Function
    Properties:
      Description: Drain tasks off ECS instances before allowing them to terminate
      Environment:
        Variables:
          ECS_CLUSTER: !Ref EcsClusterName
      Events:
        SnsMessages:
          Properties:
            Topic: !Ref ECSDrainSNSTopic
          Type: SNS
      Handler: index.handler
      InlineCode: |
        from __future__ import print_function
        import boto3
        import json
        import datetime
        import time
        import logging
        import os

        logging.basicConfig()
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        # Establish boto3 session
        session = boto3.session.Session()
        logger.debug("Session is in region %s ", session.region_name)

        ec2Client = session.client(service_name="ec2")
        ecsClient = session.client(service_name="ecs")
        asgClient = session.client("autoscaling")
        snsClient = session.client("sns")
        lambdaClient = session.client("lambda")

        """Publish SNS message to trigger lambda again.
            :param message: To repost the complete original message received when ASG
                terminating event was received.
            :param topicARN: SNS topic to publish the message to.
        """


        def publishToSNS(message, topicARN):
            logger.info("Publish to SNS topic %s", topicARN)
            snsClient.publish(
                TopicArn=topicARN,
                Message=json.dumps(message),
                Subject="Publishing SNS message to invoke lambda again..",
            )
            return "published"


        """Check task status on the ECS container instance ID.
            :param Ec2InstanceId: The EC2 instance ID is used to identify the cluster,
                container instances in cluster
        """


        def checkContainerInstanceTaskStatus(Ec2InstanceId):
            containerInstanceId = None
            clusterName = os.environ["ECS_CLUSTER"]
            tmpMsgAppend = None

            # Get list of container instance IDs from the clusterName
            clusterListResp = ecsClient.list_container_instances(cluster=clusterName)
            containerDetResp = ecsClient.describe_container_instances(
                cluster=clusterName, containerInstances=clusterListResp["containerInstanceArns"]
            )
            logger.debug("describe container instances response %s", containerDetResp)

            for containerInstances in containerDetResp["containerInstances"]:
                logger.debug(
                    "Container Instance ARN: %s and ec2 Instance ID %s",
                    containerInstances["containerInstanceArn"],
                    containerInstances["ec2InstanceId"],
                )
                if containerInstances["ec2InstanceId"] == Ec2InstanceId:
                    logger.info(
                        "Container instance ID of interest : %s",
                        containerInstances["containerInstanceArn"],
                    )
                    containerInstanceId = containerInstances["containerInstanceArn"]

                    # Check if the instance state is set to DRAINING. If not, set it, so the
                    # ECS Cluster will handle de-registering instance, draining tasks and
                    # draining them
                    containerStatus = containerInstances["status"]
                    if containerStatus == "DRAINING":
                        logger.info(
                            "Container ID %s with EC2 instance-id %s is draining tasks",
                            containerInstanceId,
                            Ec2InstanceId,
                        )
                        tmpMsgAppend = {"containerInstanceId": containerInstanceId}
                    else:
                        # Make ECS API call to set the container status to DRAINING
                        logger.info(
                            "Make ECS API call to set the container status to DRAINING..."
                        )
                        ecsClient.update_container_instances_state(
                            cluster=clusterName,
                            containerInstances=[containerInstanceId],
                            status="DRAINING",
                        )
                        # When you set instance state to draining, append the
                        # containerInstanceID to the message as well
                        tmpMsgAppend = {"containerInstanceId": containerInstanceId}

            # Using container Instance ID, get the task list, and task running on that instance.
            if containerInstanceId is not None:
                # List tasks on the container instance ID, to get task Arns
                listTaskResp = ecsClient.list_tasks(
                    cluster=clusterName, containerInstance=containerInstanceId
                )
                logger.debug("Container instance task list %s", listTaskResp["taskArns"])

                # If the chosen instance has tasks
                if len(listTaskResp["taskArns"]) > 0:
                    logger.info("Tasks are on this instance...%s", Ec2InstanceId)
                    return 1, tmpMsgAppend
                else:
                    logger.info("NO tasks are on this instance...%s", Ec2InstanceId)
                    return 0, tmpMsgAppend
            else:
                logger.info("NO tasks are on this instance....%s", Ec2InstanceId)
                return 0, tmpMsgAppend


        def lambda_handler(event, context):

            line = event["Records"][0]["Sns"]["Message"]
            message = json.loads(line)
            Ec2InstanceId = message["EC2InstanceId"]
            asgGroupName = message["AutoScalingGroupName"]
            snsArn = event["Records"][0]["EventSubscriptionArn"]
            TopicArn = event["Records"][0]["Sns"]["TopicArn"]

            # lifecyclehookname = None
            clusterName = os.environ["ECS_CLUSTER"]
            tmpMsgAppend = None
            # completeHook = 0

            logger.info("Lambda received the event %s", event)
            logger.debug("records: %s", event["Records"][0])
            logger.debug("sns: %s", event["Records"][0]["Sns"])
            logger.debug("Message: %s", message)
            logger.debug("Ec2 Instance Id %s ,%s", Ec2InstanceId, asgGroupName)
            logger.debug("Ecs Cluster Name %s", clusterName)
            logger.debug("SNS ARN %s", snsArn)

            # Get list of container instance IDs from the clusterName
            clusterListResp = ecsClient.list_container_instances(cluster=clusterName)
            logger.debug("list container instances response %s", clusterListResp)

            # If the event received is instance terminating...
            if "LifecycleTransition" in message.keys():
                logger.debug("message autoscaling %s", message["LifecycleTransition"])
                if (
                    message["LifecycleTransition"].find("autoscaling:EC2_INSTANCE_TERMINATING")
                    > -1
                ):

                    # Get lifecycle hook name
                    lifecycleHookName = message["LifecycleHookName"]
                    logger.debug("Setting lifecycle hook name %s ", lifecycleHookName)

                    # Check if there are any tasks running on the instance
                    tasksRunning, tmpMsgAppend = checkContainerInstanceTaskStatus(Ec2InstanceId)
                    logger.debug("Returned values received: %s ", tasksRunning)
                    if tmpMsgAppend is not None:
                        message.update(tmpMsgAppend)

                    # If tasks are still running...
                    if tasksRunning == 1:
                        logger.info("SQS delayed callback to %s...", TopicArn)
                        time.sleep(5)
                        msgResponse = publishToSNS(message, TopicArn)
                        logger.debug(
                            "msgResponse %s and time is %s", msgResponse, datetime.datetime
                        )
                    # If tasks are NOT running...
                    elif tasksRunning == 0:
                        # completeHook = 1
                        logger.debug(
                            (
                                "Setting lifecycle to complete;No tasks are running "
                                "on instance, completing lifecycle action...."
                            )
                        )

                        try:
                            response = asgClient.complete_lifecycle_action(
                                LifecycleHookName=lifecycleHookName,
                                AutoScalingGroupName=asgGroupName,
                                LifecycleActionResult="CONTINUE",
                                InstanceId=Ec2InstanceId,
                            )
                            logger.info(
                                "Response received from complete_lifecycle_action %s", response
                            )
                            logger.info("Completedlifecycle hook action")
                        except Exception as e:
                            print(str(e))
      MemorySize: 256
      Policies:
        - Statement:
            - Action:
                - ec2:DescribeInstances
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeInstanceStatus
                - ec2:DescribeHosts
                - ecs:DescribeContainerInstances
                - ecs:DescribeTasks
                - ecs:ListContainerInstances
                - ecs:ListTasks
                - sns:ListSubscriptions
              Effect: Allow
              Resource: "*"
          Version: "2012-10-17"
        - Statement:
            - Action:
                - autoscaling:CompleteLifecycleAction
              Effect: Allow
              Resource: "*" # TODO: how to get an ASG ARN?
          Version: "2012-10-17"
        - Statement:
            - Action:
                - ecs:SubmitContainerStateChange
                - ecs:SubmitTaskStateChange
                - ecs:UpdateContainerInstancesState
              Effect: Allow
              Resource:
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${EcsClusterName}
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/*
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container/*
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
          Version: "2012-10-17"
        - Statement:
            - Action:
                - sns:Publish
              Effect: Allow
              Resource:
                - !Ref ECSDrainSNSTopic
          Version: "2012-10-17"
      Runtime: python3.9
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Common
      Timeout: 300
  ECSDrainLogGroup:
    Condition: IsStaging
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ECSDrainFunction}
      RetentionInDays: 30
  ECSDrainLogGroupTags:
    Condition: IsStaging
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref ECSDrainLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  # This adds a rule to the load balancer security group defined in
  # shared-alb.yml. It allows all TCP egress traffic from the load balancer
  # security group to the instance security group (i.e., allows traffic from
  # the load balancer to the EC2 instances). It does NOT allow ingress traffic
  # from the load balancer to the EC2 instances; that is handled by a rule on
  # the instance security group.
  LoadBalancerSecurityGroupInstanceEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: >-
        Allow all egress traffic from the LB SG to the instance SG.
      # Based on the following recommednation
      # https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-unhealthy-checks-ecs/#Correctly_configure_the_security_groups_attached_to_your_load_balancer_and_container_instance
      DestinationSecurityGroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
      FromPort: 0
      GroupId: !Ref LoadBalancerSecurityGroupId
      IpProtocol: tcp
      ToPort: 65535

  # If the logical ID of this resource changes, it needs to be changed in the
  # user data and metadata as well
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # Changing the properties of this resource will cause the ASG instances to
  # get replaced, based on the defined UpdatePolicy.
  Ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        CreditSpecification:
          CpuCredits: unlimited
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !If [IsProduction, !Ref kProductionImageId, !Ref kStagingImageId]
        InstanceType: !If
          - IsProduction
          - t3a.medium
          - t3a.medium
        KeyName: !Ref KeyPairName
        Monitoring:
          Enabled: false # Specifies whether detailed monitoring is enabled
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - !Ref SharedEcsAsgInstanceSecurityGroupId
              - !Ref EcsLaunchEndpointsAccessSecurityGroupId
              - !Ref KmsEndpointAccessSecurityGroupId
              - !Ref SharedMysqlClientSecurityGroupId
              - !Ref SharedPostgresqlClientSecurityGroupId
              - !Ref SharedRedisClientSecurityGroupId
            Ipv6AddressCount: 1
        UserData:
          # User data runs commands on EC2 instances when they are launched. To
          # support configuration updates on running EC2 instance, the user
          # data should primarily be used to run cfn-init. Any further launch
          # scripts or tasks should be defined in the resource metadata that
          # cfn-init loads, and that cfn-hup watches for changes.
          # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html
          # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#multi-part_user_data
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html#cfn-helper-scripts-reference-amazon-amis
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              # The logs for this are found in: /var/log/cloud-init-output.log
              # Except the cfn-signal seems to get logged to /var/log/cfn-init.log
              # along with the rest of the cfn-init logs
              #
              # Despite what the docs say, the CloudFormation helper scripts are not preinstalled, so we install them
              # with aws-cfn-bootstrap. aws-cli fails to install as part of the cfn-init packages, so it's installed
              # here, even though they both use yum. Other packages should be installed through cfn-init.
              yum install -y aws-cfn-bootstrap aws-cli

              # --resource is the logical ID of the resource in a CloudFormation stack (generally a stack launched from
              # this template) that includes AWS::CloudFormation::Init metadata. By convention, this is the same
              # resource where this user data script (what you're reading right now) is defined.
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
              /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource Ec2LaunchTemplate

              # Use to the return status of calling cfn-init to signal if there's an issue with initialization
              # --resource is the logical ID of the resource that contains the creation policy to signal
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-signal.html
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html
              /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource Asg
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
            - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
            - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
            - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
            - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
            - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
            - { Key: prx:dev:application, Value: Common }
    Metadata:
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      # This AWS::CloudFormation::Init metadata is queried by cfn-init, which
      # is installed and run as part of the launch template's user data.
      #
      # When this metadata changes, cfn-init will reload and rerun it on
      # existing intances, so you CANNOT assume that it will only be run once
      # for an instance in its lifetime.
      #
      # Config sections are processed in this order:
      # packages, groups, users, sources, files, commands, services
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              jq: []
              bind-utils: []
          files:
            /etc/ecs/ecs.config:
              # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html
              content: !Sub |
                ECS_CLUSTER=${EcsClusterName}
            /etc/cfn/cfn-hup.conf:
              # Create a configuration file for cfn-hup
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-hup.html#cfn-hup-config-file
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              # Define the actions to run when the resource metadata (found at
              # the given path) changes during a stack update.
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-hup.html#cfn-hup-hook-file
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Ec2LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource Ec2LaunchTemplate
                runas=root
          commands:
            01_check_redis_connectivity:
              # Resolve the shared Redis host and check all IPs returned for
              # connectivity. If any can't connect, the instance is marked as
              # unhealthy.
              command: !Sub
                - |-
                  #!/bin/bash
                  for IP in $(getent hosts ${SharedRedisReplicationGroupEndpointAddress} | awk '{ print $1 }')
                  do
                    if ! timeout 0.1 bash -c "cat < /dev/null > /dev/tcp/$IP/${SharedRedisReplicationGroupEndpointPort}"; then
                      echo "Unhealthy; Failed to connect to Redis: $IP"

                      INSTANCE_ID=`ec2-metadata -i | cut -d " " -f 2`

                      aws sns publish \
                        --region ${region} \
                        --topic-arn ${topic} \
                        --message '{ "channel": "${channel}", "username": "AWS Auto Scaling", "icon_emoji": ":ops-autoscaling:", "text": "${text}" }'

                      aws autoscaling set-instance-health \
                        --instance-id "$INSTANCE_ID" \
                        --health-status Unhealthy \
                        --region ${AWS::Region} \
                        --no-should-respect-grace-period

                      break
                    fi
                  done
                - channel: "#ops-warn"
                  # `'"$VAR"'` wraps a value in backticks for Slack formatting,
                  # closes the single quotes from message argument of the
                  # publish command, and opens double quotes to enclose the
                  # bash variable. The end result in the transmitted JSON is:
                  # `some value`
                  text: !Sub >-
                    EC2 instance `'"$INSTANCE_ID"'` could not connect to `${SharedRedisReplicationGroupEndpointAddress}`
                    at `'"$IP"'`. It will be marked as *unhealthy* in its auto scaling group and get replaced.
                  topic: !Ref SlackMessageRelaySnsTopicArn
                  region: !Select [3, !Split [":", !Ref SlackMessageRelaySnsTopicArn]]
            02_add_authorized_keys:
              # For more information, see:
              # https://github.com/PRX/internal/wiki/AWS:-Developer-Access
              command: !Sub
                - |-
                  #!/bin/bash
                  echo "Adding developer public keys to authorized_keys"
                  echo "${developer_keys}" >> /home/ec2-user/.ssh/authorized_keys
                - developer_keys: !Join ["\n", !Ref AuthorizedKeys]
          services:
            sysvinit:
              cfn-hup:
                # Starts the cfn-hup service, and restarts the service if
                # cfn-init modifies the specified configuration files
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  # If the logical ID of this resource changes, it must also be changed in the
  # arguments of cfn-signal in the launch template's user data
  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html
      # Defines policies that apply when CloudFormation is creating a new ASG
      # resource, either during initial stack launch, or if a replacing update
      # is configured to replace the entire ASG. These policies force
      # CloudFormation to wait for explicit signals being sent to before
      # considering the creation complete. These signals are generaly sent by
      # the EC2 instances being launched along side the ASG, using the
      # cfn-signal helper script in the launch template's user data.
      # Without such a policy, CloudFormation will generally consider the ASG
      # creation complete without caring about what the instances are doing.
      AutoScalingCreationPolicy:
        # The docs claim that this only applies to replacement updates (i.e.,
        # WillReplace: true), and not to initial resource creation.
        MinSuccessfulInstancesPercent: 0 # TODO Set to 100
      ResourceSignal:
        # The number of success signals required before the ASG resource can
        # be considered succesfully created. This value must not be larger than
        # the default MinSize of the ASG, or it will never succeed.
        Count: !If [IsProduction, 5, 0] # TODO Find a good value
        # How long to wait for signals from EC2 instances
        Timeout: PT5M
    UpdatePolicy:
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html
      # AutoScalingReplacingUpdate and AutoScalingRollingUpdate apply only when
      # the LaunchTemplate changes (which includes cloud-init user data).
      # NOTE: Changes to the UpdatePolicy should be made in their own stack
      # update. Avoid updating the UpdatePolicy and other aspects of the
      # AWS::AutoScaling::AutoScalingGroup in the same stack update.
      AutoScalingReplacingUpdate:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html#cfn-attributes-updatepolicy-replacingupdate
        # false: Replace only instances within the ASG
        # true: Replace the entire ASG
        WillReplace: false
      # AutoScalingRollingUpdate:
      #   # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html#cfn-attributes-updatepolicy-rollingupdate
      #   # Applies when CloudFormation wants to update the ASG and its instances
      #   # in a rolling manner (i.e., WillReplace: false).
      #   MaxBatchSize: 10
      #   MinInstancesInService: !If [IsProduction, 3, 1]
      #   MinSuccessfulInstancesPercent: 100
      #   PauseTime: PT1M
      #   SuspendProcesses:
      #     # https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_SuspendProcesses.html
      #     # https://aws.amazon.com/premiumsupport/knowledge-center/auto-scaling-group-rolling-updates/
      #     - AlarmNotification
      #     - AZRebalance
      #     - HealthCheck
      #     - ReplaceUnhealthy
      #     - ScheduledActions
      #   WaitOnResourceSignals: true
      AutoScalingScheduledAction:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html#cfn-attributes-updatepolicy-scheduledactions
        # Applies when a scheduled action is in effect.
        # - true: Doesn't change min/max/desired unless one of those values
        # changed in the template. Otherwise, a differnece between the template
        # value and the actual value is ignored (i.e. actual value preserved).
        # - false: Lets CloudFormation change the ASG's size values to match the
        # template values, even if a scheduled action is in effect.
        IgnoreUnmodifiedGroupSizeProperties: true
    Properties:
      Cooldown: !If [IsProduction, "240", "120"]
      HealthCheckGracePeriod: !If [IsProduction, 512, 0]
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2LaunchTemplate
        Version: !GetAtt Ec2LaunchTemplate.LatestVersionNumber
      MaxInstanceLifetime: 1209600 # 14 days
      MaxSize: !If [IsProduction, "75", "20"]
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: !If [IsProduction, "7", "0"]
      NewInstancesProtectedFromScaleIn: !If [IsProduction, true, false]
      Tags:
        - { PropagateAtLaunch: true, Key: Name, Value: !Sub "${RootStackName}_shared-asg" }
        - { PropagateAtLaunch: true, Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { PropagateAtLaunch: true, Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { PropagateAtLaunch: true, Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { PropagateAtLaunch: true, Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { PropagateAtLaunch: true, Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { PropagateAtLaunch: true, Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { PropagateAtLaunch: true, Key: prx:dev:application, Value: Common }
      TerminationPolicies:
        - OldestInstance
        - Default
      VPCZoneIdentifier:
        - !Ref VpcPublicSubnet1Id
        - !Ref VpcPublicSubnet2Id
        - !Ref VpcPublicSubnet3Id

  DefaultCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref Asg
        ManagedScaling:
          InstanceWarmupPeriod: !If [IsProduction, 300, 180]
          MaximumScalingStepSize: 10
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: !If
            - IsProduction
            - 72
            - 100
        ManagedTerminationProtection: ENABLED
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
  ClusterCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsClusterName
      CapacityProviders:
        - !Ref DefaultCapacityProvider
        - !If [IsStaging, FARGATE, !Ref "AWS::NoValue"]
        - !If [IsStaging, FARGATE_SPOT, !Ref "AWS::NoValue"]
      DefaultCapacityProviderStrategy:
        # With only one default capacity provider, the base and weight won't
        # factor into scheduling; everything will be even within the ASG
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref DefaultCapacityProvider

  EventsNotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub >-
        Handles auto scaling events from the ${EnvironmentType} shared ASG
      Environment:
        Variables:
          SLACK_MESSAGE_RELAY_TOPIC_ARN: !Ref SlackMessageRelaySnsTopicArn
      Events:
        AsgEventsRule:
          # https://docs.aws.amazon.com/autoscaling/ec2/userguide/cloud-watch-events.html
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                AutoScalingGroupName:
                  - !Ref Asg
              source:
                - aws.autoscaling
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');

        const sns = new AWS.SNS({
          apiVersion: '2010-03-31',
          region: process.env.SLACK_MESSAGE_RELAY_TOPIC_ARN.split(':')[3],
        });

        const regions = {
          'us-east-2': 'Ohio',
          'us-east-1': 'N. Virginia',
          'us-west-1': 'N. California',
          'us-west-2': 'Oregon',
          'af-south-1': 'Cape Town',
          'ap-east-1': 'Hong Kong',
          'ap-south-1': 'Mumbai',
          'ap-northeast-3': 'Osaka',
          'ap-northeast-2': 'Seoul',
          'ap-southeast-1': 'Singapore',
          'ap-southeast-2': 'Sydney',
          'ap-northeast-1': 'Tokyo',
          'ca-central-1': 'Central',
          'eu-central-1': 'Frankfurt',
          'eu-west-1': 'Ireland',
          'eu-west-2': 'London',
          'eu-south-1': 'Milan',
          'eu-west-3': 'Paris',
          'eu-north-1': 'Stockholm',
          'me-south-1': 'Bahrain',
          'sa-east-1': 'São Paulo',
        };

        exports.handler = async (event) => {
          console.log(JSON.stringify(event));

          const asgUrl = `https://console.aws.amazon.com/ec2autoscaling/home?region=${event.region}#/details/${event.detail.AutoScalingGroupName}?view=details`;
          const instanceUrl = `https://console.aws.amazon.com/ec2/v2/home?region=${event.region}#InstanceDetails:instanceId=${event.detail.EC2InstanceId}`;

          let environment = '????';
          if (event.detail.AutoScalingGroupName.includes('prod')) {
            environment = 'prod';
          } else if (event.detail.AutoScalingGroupName.includes('stag')) {
            environment = 'stag';
          }

          const lines = [];
          let inOut = '';

          lines.push(`*Instance:* <${instanceUrl}|${event.detail.EC2InstanceId}> in \`${event.detail.Details['Availability Zone']}\``);

          if (/capacity from [0-9]+ to [0-9]+/.test(event.detail.Cause)) {
            const m = event.detail.Cause.match(/capacity from ([0-9]+) to ([0-9]+)/);
            lines.push(`*Capacity change:* \`${m[1]}\` to \`${m[2]}\``);

            inOut = +m[1] > +m[2] ? ' IN' : ' OUT';
          } else if (/an instance was taken out of service in response to a user health-check/.test(event.detail.Cause)) {
            lines.push('Taken out of service in response to a user health-check.');
          } else if (/was taken out of service in response to a user request/.test(event.detail.Cause)) {
            lines.push('Taken out of service in response to a user request.');
          }

          await sns.publish({
            TargetArn: process.env.SLACK_MESSAGE_RELAY_TOPIC_ARN,
            Message: JSON.stringify({
              channel: '#ops-debug',
              username: 'AWS Auto Scaling',
              icon_emoji: ':ops-autoscaling:',
              attachments: [{
                color: "#53adfb",
                fallback: `SCALE${inOut} | ${regions[event.region]} » ASG &lt;${environment}&gt; ${event['detail-type'].toUpperCase()}`,
                blocks: [
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: `*<${asgUrl}|SCALE${inOut} | ${regions[event.region]} » ASG &lt;${environment}&gt; ${event['detail-type'].toUpperCase()}>*`,
                    }
                  }, {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: lines.join('\n'),
                    }
                  }
                ]
              }]
            }),
          }).promise();
        };
      MemorySize: 128
      Policies:
        - Statement:
            - Action: sns:Publish
              Effect: Allow
              Resource: !Ref SlackMessageRelaySnsTopicArn
          Version: "2012-10-17"
      Runtime: nodejs12.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Common
      Timeout: 10
  EventsNotificationsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${EventsNotificationsFunction}
      RetentionInDays: 7
  EventsNotificationsFunctionLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref EventsNotificationsFunctionLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
  EventsNotificationsFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Infrastructure] ASG Events Notifications <${EnvironmentTypeAbbreviation}> FUNCTION ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        The events notification function for the ${EnvironmentType} auto
        scaling group has experienced some errors, so notifications may not
        be getting sent to Slack.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref EventsNotificationsFunction
  EventsNotificationsFunctionErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt EventsNotificationsFunctionErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Infrastructure }

Outputs:
  AsgName:
    Value: !Ref Asg
