# stacks/vpc.yml
# NOTE Some default resource created along with a VPC (security group, network
# ACL, etc) can't be tagged, so they don't match the resources that are
# explicitly created. They work correctly, though, and will be torn down if the
# stack is destroyed
# NOTE This template creates subnets in 3 AZ's regardless of which region the
# stack is created in. The template will use AZ's `a` and `b`, unless they are
# unavailable, in which case it uses the lowest-lettered zones that are
# available. (Because of this, it can only be launched in regions that have
# three or more availability zones)
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates a general-purpose VPC with three availability zones
Conditions:
  # Region conditions
  IsUsEast1: !Equals [!Ref "AWS::Region", us-east-1]
  IsUsEast2: !Equals [!Ref "AWS::Region", us-east-2]
  IsUsWest1: !Equals [!Ref "AWS::Region", us-west-1]
  IsUsWest2: !Equals [!Ref "AWS::Region", us-west-2]
  IsCaCentral1: !Equals [!Ref "AWS::Region", ca-central-1]
  IsEuWest1: !Equals [!Ref "AWS::Region", eu-west-1]
  IsEuCentral1: !Equals [!Ref "AWS::Region", eu-central-1]
  IsEuWest2: !Equals [!Ref "AWS::Region", eu-west-2]
  IsApNortheast1: !Equals [!Ref "AWS::Region", ap-northeast-1]
  IsApNortheast2: !Equals [!Ref "AWS::Region", ap-northeast-2]
  IsApSoutheast1: !Equals [!Ref "AWS::Region", ap-southeast-1]
  IsApSoutheast2: !Equals [!Ref "AWS::Region", ap-southeast-2]
  IsApSouth1: !Equals [!Ref "AWS::Region", ap-south-1]
  IsSaEast1: !Equals [!Ref "AWS::Region", sa-east-1]
Parameters:
  AwsOrganizationId:
    Type: String
  EnvironmentType:
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Route:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
  KinesisEndpointSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow kinesis traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  KinesisEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
        - !Ref KinesisEndpointSecurityGroup
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.kinesis-streams"
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  AwsServiceInterfaceEndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow endpoint traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Project
          Value: Porter
        - Key: Name
          Value: !Sub ${AWS::StackName}-EcsEndpointsSecurityGroup
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  CloudWatchLogsVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/cloudwatch-logs-and-interface-VPC.html
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  EcrVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html#ecr-vpc-endpoint-considerations
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  KmsVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html#ecr-vpc-endpoint-considerations
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref AwsServiceInterfaceEndpointsSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kms
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  Subnet1:
    Type: "AWS::EC2::Subnet"
    UpdateReplacePolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 7, 8]] # 8 CIDR bits = (32 - 8) = /24 mask
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-1
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Subnet2:
    Type: "AWS::EC2::Subnet"
    UpdateReplacePolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Select [5, !Cidr [!GetAtt VPC.CidrBlock, 7, 8]] # 8 CIDR bits = (32 - 8) = /24 mask
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-2
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Subnet3:
    Type: "AWS::EC2::Subnet"
    UpdateReplacePolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Select [6, !Cidr [!GetAtt VPC.CidrBlock, 7, 8]] # 8 CIDR bits = (32 - 8) = /24 mask
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-3
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  Subnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  Subnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable
  Subnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  InboundHTTPSNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction : allow
      RuleNumber : 100
  InboundHTTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction : allow
      RuleNumber : 101
  InboundUDPHTTPSNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 17 # UDP
      RuleAction : allow
      RuleNumber : 110
  InboundUDPHTTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 17 # UDP
      RuleAction : allow
      RuleNumber : 111
  InboundSSHNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TCP
      RuleAction : allow
      RuleNumber : 200
  InboundUDPSSHNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 17 # UDP
      RuleAction : allow
      RuleNumber : 210
  InboundNTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction : allow
      RuleNumber : 220
  InboundReturnTrafficNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # TCP
      RuleAction : allow
      RuleNumber : 500
  InboundUDPReturnTrafficNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 17 # UDP
      RuleAction : allow
      RuleNumber : 510
  OutboudTrafficNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkAcl
      Protocol: -1 # All
      RuleAction : allow
      RuleNumber : 100
  Subnet1NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref Subnet1
      NetworkAclId: !Ref NetworkAcl
  Subnet2NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref Subnet2
      NetworkAclId: !Ref NetworkAcl
  Subnet3NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref Subnet3
      NetworkAclId: !Ref NetworkAcl
  DHCPOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  DHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref DHCPOptions
      VpcId: !Ref VPC
  # VPC Peering
  VpcPeeringOrgTrustingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Principal:
              AWS: "*"
            Action:
              - "sts:AssumeRole"
            Effect: Allow
            Condition:
              "StringEquals":
                "aws:PrincipalOrgID": !Ref AwsOrganizationId
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "ec2:AcceptVpcPeeringConnection"
                Resource: "*"
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
Outputs:
  VPC:
    Description: >
      Resource ID for the VPC
    Value: !Ref VPC
  SecurityGroup:
    Description: >
      Default Security Group for the VPC
    Value: !GetAtt VPC.DefaultSecurityGroup
  Subnet1:
    Description: >
      Resource ID (eg subnet-e19f0178) for subnet 1
    Value: !Ref Subnet1
  Subnet2:
    Description: >
      Resource ID (eg subnet-e19f0178) for subnet 2
    Value: !Ref Subnet2
  Subnet3:
    Description: >
      Resource ID (eg subnet-e19f0178) for subnet 3
    Value: !Ref Subnet3
  Subnet1AvailabilityZone:
    Description: >
      The availability zone (eg us-east-1a) for subnet 1
    Value: !GetAtt Subnet1.AvailabilityZone
  Subnet2AvailabilityZone:
    Description: >
      The availability zone (eg us-east-1a) for subnet 2
    Value: !GetAtt Subnet2.AvailabilityZone
  Subnet3AvailabilityZone:
    Description: >
      The availability zone (eg us-east-1a) for subnet 3
    Value: !GetAtt Subnet3.AvailabilityZone
