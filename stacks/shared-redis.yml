# stacks/shared-redis.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates a Redis cluster intended to be used by several applications. The
  cluster's security group will allow only traffic from a security group
  provided as a stack parameter.

Parameters:
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  VpcPrivateSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPrivateSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPrivateSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  SharedEcsAsgInstanceSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: !Sub Shared ${EnvironmentType} Redis subnet group
      SubnetIds:
        - !Ref VpcPrivateSubnet1Id
        - !Ref VpcPrivateSubnet2Id
        - !Ref VpcPrivateSubnet3Id
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub Shared ${EnvironmentType} Redis security group
      SecurityGroupIngress:
        - FromPort: 6379
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
          ToPort: 6379
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared_redis" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  RedisReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    UpdatePolicy:
      UseOnlineResharding: true
    Properties:
      AtRestEncryptionEnabled: false
      AutomaticFailoverEnabled: true
      AutoMinorVersionUpgrade: false
      CacheNodeType: !If [IsProduction, cache.m6g.large, cache.t3.small]
      CacheParameterGroupName: default.redis6.x.cluster.on
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: Redis
      EngineVersion: 6.x
      MultiAZEnabled: true
      NumNodeGroups: 1 # NodeGroups are Shards. This replication group will always use cluster mode due to the parameter group.
      ReplicasPerNodeGroup: 1 # **Update requires replacement** Replicas are nodes. N replicas will result in N+1 Nodes Per Shard.
      ReplicationGroupDescription: !Sub Shared ${EnvironmentType} Redis
      SecurityGroupIds:
        - !GetAtt RedisSecurityGroup.GroupId
      SnapshotRetentionLimit: 0 # 0 = automatic backups are disabled
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  RedisMemoryLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [Common] Redis <${EnvironmentTypeAbbreviation}> HIGH MEMORY USAGE
      AlarmDescription: !Sub >-
        ${EnvironmentType} shared Redis's database memory usage has exceeded
        the recommended safe level
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: CacheClusterId
          Value: !Ref RedisReplicationGroup
      EvaluationPeriods: 2
      MetricName: DatabaseMemoryUsagePercentage
      Namespace: AWS/ElastiCache
      Period: 120
      Statistic: Maximum
      Threshold: 0.85
      TreatMissingData: notBreaching
      Unit: Percent
  RedisMemoryLowAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt RedisMemoryLowAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  RedisMemoryVeryLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Common] Redis <${EnvironmentTypeAbbreviation}> VERY HIGH MEMORY USAGE
      AlarmDescription: !Sub >-
        ${EnvironmentType} shared Redis's database memory usage has reached a
        critically high level
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: CacheClusterId
          Value: !Ref RedisReplicationGroup
      EvaluationPeriods: 2
      MetricName: DatabaseMemoryUsagePercentage
      Namespace: AWS/ElastiCache
      Period: 120
      Statistic: Maximum
      Threshold: 0.93
      TreatMissingData: notBreaching
      Unit: Percent
  RedisMemoryVeryLowAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt RedisMemoryVeryLowAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

Outputs:
  ReplicationGroupName:
    Value: !Ref RedisReplicationGroup
  ReplicationGroupEndpointAddress:
    Description: Cluster endpoint hostname
    Value: !GetAtt RedisReplicationGroup.ConfigurationEndPoint.Address
  ReplicationGroupEndpointPort:
    Description: Cluster endpoint port
    Value: !GetAtt RedisReplicationGroup.ConfigurationEndPoint.Port
