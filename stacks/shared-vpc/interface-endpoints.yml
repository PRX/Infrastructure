# stacks/shared-vpc/interface-endpoints.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates various Interface VPC endpoints in the shared VPC. These are
  primarily intended to support access for instances and tasks in private
  networks, but are also utilized by instances and tasks in public networks by
  virtue of how the Endpoints function.

Parameters:
  EnvironmentType: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  PublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  PublicSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  PublicSubnet3Id: { Type: AWS::EC2::Subnet::Id }

# !!!! IMPORTANT !!!!
#
# When creating an interfae endpoint with PrivateDnsEnabled enabled, ALL
# subnets in the VPC in the AZs of subnets listed on the Endpoint will start
# using private DNS for the endpoints in question.
#
# For example, if you add PrivateSubnet1 (us-east-1z) to the ECS endpoint, all
# other subnets in us-east-1z will resolve the ECS hostname to a private IP.
# Instances and tasks in PublicSubnet1 that could previously reach the ECS API
# over the public internet will start accessing it via the private IP via the
# Endpoint.
#
# Ensure that NACLs and security groups for any resources, in all subnets, that
# could be effected by a new VPC Endpoint are updated prior to establishing the
# Endpoint.

# https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html
Resources:
  EcsLaunchEndpointsAccessSecurityGroup:
    # This security group is intented to be used by EC2 instances, ECS
    # services, etc. Resources that belong to this group will be able to send
    # traffic to the services needed to launch tasks in ECS.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Allows outbound HTTPS traffic to flow to VPC Endpoints required for
        launching ECS tasks and services in ${EnvironmentType}
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !GetAtt EcsLaunchEndpointsInboundTrafficSecurityGroup.GroupId
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-vpc_ecs-interface-access" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      VpcId: !Ref VpcId

  EcsLaunchEndpointsInboundTrafficSecurityGroup:
    # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/vpc-endpoints.html#ecs-vpc-endpoint-considerations
    # This security group should be added to any VPC Endpoints that are
    # necessary when launching ECS tasks and services in an environment that
    # does not have internet access, such as private subnets and Fargate. This
    # includes services like ECR, ECS, CloudWatch Logs, and S3.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Allows HTTPS traffic from the EcsLaunchEndpointsAccessSecurityGroup
        to flow into VPC Endpoints for AWS services required for launching ECS
        tasks and services in ${EnvironmentType}
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-vpc_ecs-interface-inbound" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      VpcId: !Ref VpcId
  EcsLaunchEndpointsInboundTrafficSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 443
      GroupId: !GetAtt EcsLaunchEndpointsInboundTrafficSecurityGroup.GroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt EcsLaunchEndpointsAccessSecurityGroup.GroupId
      ToPort: 443

  KmsEndpointAccessSecurityGroup:
    # This security group is intented to be used by EC2 instances, ECS
    # services, etc. Resources that belong to this group will be able to send
    # traffic to the KMS service.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Allows outbound HTTPS traffic to flow to KMS VPC Endpoints in
        ${EnvironmentType}
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !GetAtt EcsLaunchEndpointsInboundTrafficSecurityGroup.GroupId
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-vpc_kms-interface-access" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      VpcId: !Ref VpcId

  KmsEndpointInboundTrafficSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Allows HTTPS traffic from the KmsEndpointAccessSecurityGroup
        to flow into the KMS VPC Endpoint in ${EnvironmentType}
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-vpc_kms-interface-inbound" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      VpcId: !Ref VpcId
  KmsEndpointInboundTrafficSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 443
      GroupId: !GetAtt KmsEndpointInboundTrafficSecurityGroup.GroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt KmsEndpointAccessSecurityGroup.GroupId
      ToPort: 443

  EcrDockerVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html#ecr-vpc-endpoint-considerations
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EcsLaunchEndpointsInboundTrafficSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        - !Ref PublicSubnet3Id
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
  EcrApiVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html#ecr-vpc-endpoint-considerations
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EcsLaunchEndpointsInboundTrafficSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        - !Ref PublicSubnet3Id
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  EcsAgentVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EcsLaunchEndpointsInboundTrafficSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs-agent
      SubnetIds:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        - !Ref PublicSubnet3Id
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
  EcsTelemetryVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EcsLaunchEndpointsInboundTrafficSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs-telemetry
      SubnetIds:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        - !Ref PublicSubnet3Id
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
  EcsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EcsLaunchEndpointsInboundTrafficSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs
      SubnetIds:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        - !Ref PublicSubnet3Id
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  CloudWatchLogsVpcEndpoint:
    # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/cloudwatch-logs-and-interface-VPC.html#create-VPC-endpoint-for-CloudWatchLogs
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EcsLaunchEndpointsInboundTrafficSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        - !Ref PublicSubnet3Id
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

  KmsVpcEndpoint:
    # https://docs.aws.amazon.com/kms/latest/developerguide/kms-vpc-endpoint.html
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref KmsEndpointInboundTrafficSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kms
      SubnetIds:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        - !Ref PublicSubnet3Id
      VpcEndpointType: Interface
      VpcId: !Ref VpcId

Outputs:
  EcsLaunchEndpointsAccessSecurityGroupId:
    Value: !GetAtt EcsLaunchEndpointsAccessSecurityGroup.GroupId
  KmsEndpointAccessSecurityGroupId:
    Value: !GetAtt KmsEndpointAccessSecurityGroup.GroupId
