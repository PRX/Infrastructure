# stacks/shared-vpc/private-network-acl.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates a Network ACL and rules for subnets of the private subnets in the
  shared VPC.

Parameters:
  EnvironmentType: { Type: String }
  RootStackName: { Type: String }
  VpcId: { Type: "AWS::EC2::VPC::Id" }
  VpcCidrBlock: { Type: String }
  VpcIpv6CidrBlocks: { Type: CommaDelimitedList }

Resources:
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared_private" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  # INGRESS 140
  # Allows inbound traffic on high-numbered ports from all IPs. This generally
  # is for return HTTP(S) traffic from requests made from hosts within the VPC.
  # Some of the ports in this range may be denied by other rules.
  # This assumes that the HTTP requests are originating from Linux host, and
  # use the common ephemeral port range for that operating system.
  # These are also the dynamic ports used with ECS port mapping, allowing
  # traffic between the load balancer and ECS instances.
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
  InboudIpV4TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 140
  InboudIpV6TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 141

  # INGRESS 520
  # Allows inbound Redis traffic from all IPs within the VPC
  InboundIpV4RedisNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: false
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 6379
        To: 6379
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 520
  InboundIpV6RedisNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 6379
        To: 6379
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 521

  # INGRESS 620
  # Allows inbound Memcached traffic from all IPs within the VPC
  InboundIpV4MemcachedNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: false
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 11211
        To: 11211
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 620
  InboundIpV6MemcachedNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 11211
        To: 11211
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 621

  # INGRESS 720
  # Allows inbound Elasticsearch traffic from all IPs within the VPC
  InboundIpV4ElasticsearchNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: false
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 9200
        To: 9200
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 720
  InboundIpV6ElasticsearchNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 9200
        To: 9200
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 721

  # EGRESS 120
  # Allows outbound traffic on high-numbered ports to the VPC. This generally
  # is for return traffic to clients on ephemeral ports. Some of the
  # ports in this range may be denied by other rules.
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
  OutboudIpV4TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Egress: true
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
  OutboudIpV6TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: !Select [0, !Ref VpcIpv6CidrBlocks]
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 121

  # EGRESS 130
  # Allows outbound HTTPS web requests originating from hosts within the VPC
  # to all IPs
  OutboundIpV4HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 130
  OutboundIpV6HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PrivateNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 131

Outputs:
  NetworkAclName:
    Description: The resource name of the private network ACL
    Value: !Ref PrivateNetworkAcl
