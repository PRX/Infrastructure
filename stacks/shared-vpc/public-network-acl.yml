# stacks/shared-vpc/public-network-acl.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: Public network ACL

Parameters:
  EnvironmentType: { Type: String }
  VpcId: { Type: "AWS::EC2::VPC::Id" }

Resources:
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Project
          Value: platform.prx.org # TODO
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType} # TODO Better name
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId

  # INGRESS 120
  # Allows inbound user traffic for standard HTTPS web requests from all IPs
  InboundIpV4HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 120
  InboundIpV6HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 121

  # INGRESS 130
  # Allows inbound user traffic for insecure HTTP web requests from all IPs
  InboundIpV4HttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 130
  InboundIpV6HttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 131

  # INGRESS 140
  # Allows inbound traffic on high-numbered ports from all IPs. This generally
  # is for return HTTP(S) traffic from requests made from hosts within the VPC.
  # Some of the ports in this range may be denied by other rules.
  # This assumes that the HTTP requests are originating from Linux host, and
  # use the common ephemeral port range for that operating system.
  # These are also the dynamic ports used with ECS port mapping, allowing
  # traffic between the load balancer and ECS instances.
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
  InboudIpV4TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 140
  InboudIpV6TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 141

  # INGRESS 150
  # Allows inbound echo reply ICMP traffic, mainly to allow PING traffic back
  # from pings originating from within the VPC
  InboundIpV4IcmpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      Icmp:
        Code: -1
        Type: 0 # Echo reply
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: 1 # ICMP
      RuleAction: allow
      RuleNumber: 150
  InboundIpV6IcmpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Icmp:
        Code: -1
        Type: 0 # Echo reply
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: 1 # ICMP
      RuleAction: allow
      RuleNumber: 151

  # INGRESS 160
  # Allows inbound NTP traffic from all IPs
  InboundIpV4NtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 160
  InboundIpV6NtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 161

  # INGRESS 170
  # Allows inbound SSH traffic from all IPs
  InboundIpV4SshNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TPC
      RuleAction: allow
      RuleNumber: 170
  InboundIpV6SshNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 171

  # EGRESS 120
  # Allows outbound traffic on high-numbered ports to all IPs. This generally
  # is for HTTP(S) return traffic to clients on ephemeral ports. Some of the
  # ports in this range may be denied by other rules. Also used to connect to
  # databases and other services within the VPC.
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports
  OutboudIpV4TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
  OutboudIpV6TcpEphemeralPortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 121

  # EGRESS 130
  # Allows outbound HTTPS web requests originating from hosts within the VPC
  # to all IPs
  OutboundIpV4HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 130
  OutboundIpV6HttpsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 131

  # EGRESS 140
  # Allows outbound insecure HTTP web requests originating from hosts within
  # the VPC to all IPs
  OutboundIpV4HttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 140
  OutboundIpV6HttpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 141

  # EGRESS 150
  # Allows outbound echo request ICMP traffic, mainly to allow PING from hosts
  # within the VPC to test reachability
  OutboundIpV4IcmpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Icmp:
        Code: -1
        Type: 8 # Echo
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: 1 # ICMP
      RuleAction: allow
      RuleNumber: 150
  OutboundIpV6IcmpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Icmp:
        Code: -1
        Type: 8 # Echo
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: 1 # ICMP
      RuleAction: allow
      RuleNumber: 151

  # EGRESS 160
  # Allows outbound NTP traffic to all IPs
  OutboundIpV4NtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 160
  OutboundIpV6NtpNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PublicNetworkAcl
      PortRange:
        From: 123
        To: 123
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 161

Outputs:
  NetworkAclName:
    Description: The resource name of the public network ACL
    Value: !Ref PublicNetworkAcl
