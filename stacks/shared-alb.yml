# stacks/shared-alb.yml
AWSTemplateFormatVersion: "2010-09-09"

# TODO Launching this is blocked by needing to manually add DNS records for
# - !Sub "*.${EnvironmentTypeAbbreviation}-${VpcId}.prx.tech"
# - !Sub "*.cdn.${EnvironmentTypeAbbreviation}-${VpcId}.prx.tech"
# in the certificate. See if there's a way to eliminate that

Description: >-
  Creates application load balancers that can be reused for multiple
  applications, using host- and path-based routing rules.

Mappings:
  ElbService:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    us-east-1:
      AccountId: "127311923021"
    us-east-2:
      AccountId: "033677994240"
    us-west-1:
      AccountId: "027434742980"
    us-west-2:
      AccountId: "797873946194"
    af-south-1:
      AccountId: "098369216593"
    ca-central-1:
      AccountId: "985666609251"
    eu-central-1:
      AccountId: "054676820928"
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-south-1:
      AccountId: "635631232127"
    eu-west-3:
      AccountId: "009996457667"
    eu-north-1:
      AccountId: "897822967062"
    ap-east-1:
      AccountId: "754344448648"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-northeast-3:
      AccountId: "383597477331"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    me-south-1:
      AccountId: "076674570225"
    sa-east-1:
      AccountId: "507241528517"

Parameters:
  EnvironmentType:
    Type: String
  EnvironmentTypeAbbreviation:
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
  VpcPublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
  VpcPublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id
  VpcPublicSubnet3Id:
    Type: AWS::EC2::Subnet::Id

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "*.prx.org"
      SubjectAlternativeNames:
        - "*.prxu.org"
        - "*.staging.prxu.org"
        - "*.prx.tech"
        - "*.staging.prx.tech"
        - "*.prx.mx"
        - "*.pri.org"
        - !Sub "*.${EnvironmentTypeAbbreviation}-${VpcId}.prx.tech"
        - !Sub "*.cdn.${EnvironmentTypeAbbreviation}-${VpcId}.prx.tech" # TODO Remove
      Tags:
        - Key: Project
          Value: platform.prx.org # TODO
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub ${EnvironmentType} ${VpcId} wildcard # TODO
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      ValidationMethod: DNS

  TargetInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Allows inbound traffic to ECS instances handling traffic from target
        groups on the load balancer, on ports used for ECS dynamic port
        mapping, ${EnvironmentType} ALB/ASG/ECS EC2 instances
      Tags:
        - Key: Project
          Value: platform.prx.org # TODO
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-LB-web_ssh # TODO
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      VpcId: !Ref VpcId
  TargetInstanceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 32768
      GroupId: !GetAtt TargetInstanceSecurityGroup.GroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt LoadBalancerInboundForwardingSecurityGroup.GroupId
      ToPort: 60999

  LoadBalancerInboundForwardingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Allows inbound traffic from all IPs on the load balancer HTTP
        listener ports, and outbound traffic from the load balancer to EC2
        instances in the target instance security group on ECS dynamic port
        mapping ports, for the ${EnvironmentType} shared ALB
      SecurityGroupEgress:
        - DestinationSecurityGroupId: !GetAtt TargetInstanceSecurityGroup.GroupId
          FromPort: 32768
          IpProtocol: tcp
          ToPort: 60999
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: ::/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIpv6: ::/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Project
          Value: platform.prx.org # TODO
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-LB-web_ssh # TODO
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
      VpcId: !Ref VpcId

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: !If
              - IsProduction
              - 14
              - 3
            Status: Enabled
      Tags:
        - Key: Project
          Value: platform.prx.org # TODO
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId
  AccessLogsBucketPolicy:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !GetAtt AccessLogsBucket.Arn
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
          - Action: s3:PutObject
            Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${ElbAccountId}:root
                - ElbAccountId: !FindInMap [ElbService, !Ref "AWS::Region", AccountId]
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
        Version: "2012-10-17"

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - AccessLogsBucketPolicy # Don't try to create the ALB until the bucket grants logging permissions
    Properties:
      IpAddressType: dualstack
      LoadBalancerAttributes:
        # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes
        - Key: idle_timeout.timeout_seconds
          Value: "150"
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerInboundForwardingSecurityGroup
      Subnets:
        - !Ref VpcPublicSubnet1Id
        - !Ref VpcPublicSubnet2Id
        - !Ref VpcPublicSubnet3Id
      Tags:
        - Key: Project
          Value: platform.prx.org # TODO
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId

  HttpListener:
    # Generally all HTTP traffic is redirected to HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: HTTPS
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - FixedResponseConfig:
            StatusCode: "404"
          Type: fixed-response
      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS

  # TODO Create a HTTPCode_ELB_5XX_Count alarm
  # TODO Maybe create a response time alarm

  WildcardUtilityRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Record sets for dualstack web traffic to a metrics instance
      HostedZoneName: prx.tech.
      RecordSets:
        - Type: AAAA
          Name: !Sub "*.${EnvironmentTypeAbbreviation}-${VpcId}.prx.tech."
          AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
        - Type: A
          Name: !Sub "*.${EnvironmentTypeAbbreviation}-${VpcId}.prx.tech."
          AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID

Outputs:
  AlbArn:
    Description: The Amazon Resource Name (ARN) of the load balancer
    Value: !Ref Alb
  AlbName:
    Description: >-
      The full name of the load balancer. For example, my-load-balancer
    Value: !GetAtt Alb.LoadBalancerName
  AlbFullName:
    Description: >-
      The full name of the load balancer. For example,
      app/my-load-balancer/50dc6c495c0c9188
    Value: !GetAtt Alb.LoadBalancerFullName
  AlbDnsName:
    Description: >-
      The DNS name for the load balancer. For example,
      my-load-balancer-424835706.us-west-2.elb.amazonaws.com
    Value: !GetAtt Alb.DNSName
  AlbDualstackDnsName:
    Description: >-
      The dualstack DNS name for the load balancer. For example,
      dualstack.my-load-balancer-424835706.us-west-2.elb.amazonaws.com
    Value: !Sub dualstack.${Alb.DNSName}
  AlbCanonicalHostedZoneId:
    Description: >-
      The ID of the Amazon Route 53 hosted zone associated with the load
      balancer. For example, Z2P70J7EXAMPLE
    Value: !GetAtt Alb.CanonicalHostedZoneID
  HttpsListenerArn:
    Description: The Amazon Resource Name (ARN) of the listener
    Value: !Ref HttpsListener
  TargetInstanceSecurityGroupId:
    Description: The group ID of the ALB target instance security group
    Value: !GetAtt TargetInstanceSecurityGroup.GroupId
