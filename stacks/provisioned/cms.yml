# stacks/provisioned/metrics.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: metrics.prx.org application running in Docker # TODO

Parameters:
  kWebContainerName:
    Type: String
    Default: cms-web
  kWorkerContainerName:
    Type: String
    Default: cms-worker
  kApplicationPort:
    Type: Number
    Default: 3000
  #######
  AlbFullName: { Type: String }
  AlbHttpsListenerArn: { Type: String }
  EcsClusterArn: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  VpcId: { Type: "AWS::EC2::VPC::Id" }
  SecretsBase: { Type: String }
  EcrRegion: { Type: String }
  EcrImageTag: { Type: String }
  SecretsVersion: { Type: String }
  AlbListenerRulePriorityPrefix: { Type: String }
  SecretsStackName: { Type: String }
  NotificationsStackName: { Type: String }
  SharedMemcachedEndpointAddress: { Type: String }
  VpcPublicSubnet1Id: { Type: "AWS::EC2::Subnet::Id" }
  VpcPublicSubnet2Id: { Type: "AWS::EC2::Subnet::Id" }
  EcsAsgOutboundTrafficSecurityGroupId: { Type: "AWS::EC2::SecurityGroup::Id" }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  HostHeaderListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - cms.*
      ListenerArn: !Ref AlbHttpsListenerArn
      Priority: !Join ["", [!Ref AlbListenerRulePriorityPrefix, "00"]]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /api/v1
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  TargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      ActionsEnabled: true
      AlarmName: "[Metrics v2][ALB][Error] Target 5XX" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      AlarmDescription: >- # TODO
        5XX server errors originating from the metrics target group exceeded 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref AlbFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceDecryptPolicyArn
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceAccessPolicyArn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }

  WebEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: true
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Ref kWebContainerName
          ContainerPort: !Ref kApplicationPort
          TargetGroupArn: !Ref TargetGroup
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TaskDefinition: !Ref WebTaskDefinition
  WorkerEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2 # TODO
      EnableECSManagedTags: true
      LaunchType: EC2
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TaskDefinition: !Ref WorkerTaskDefinition

  WebTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: cms
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: MEMCACHE_SERVERS
              Value: !Ref SharedMemcachedEndpointAddress
            - Name: ELASTICSEARCH_URL
              Value: !Sub https://${ElasticsearchDomain.DomainEndpoint}:9200
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/cms.prx.org:${EcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWebContainerName
          PortMappings:
            - ContainerPort: !Ref kApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TaskRoleArn: !GetAtt TaskRole.Arn

  WorkerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - worker
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: cms
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: MEMCACHE_SERVERS
              Value: !Ref SharedMemcachedEndpointAddress
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/cms.prx.org:${EcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WorkerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWorkerContainerName
          PortMappings:
            - ContainerPort: !Ref kApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      TaskRoleArn: !GetAtt TaskRole.Arn

  ElasticsearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub CMS ${EnvironmentType} Elasticsearch security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9200
          SourceSecurityGroupId: !Ref EcsAsgOutboundTrafficSecurityGroupId
          ToPort: 9200
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      # AccessPolicies: Json
      AdvancedSecurityOptions:
        Enabled: false
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10 # GiB
        VolumeType: gp2
      ElasticsearchClusterConfig:
        InstanceCount: !If [IsProduction, 2, 1]
        InstanceType: t3.small.elasticsearch
        ZoneAwarenessEnabled: !If [IsProduction, true, false]
      ElasticsearchVersion: "7.9"
      EncryptionAtRestOptions:
        Enabled: false
      NodeToNodeEncryptionOptions:
        Enabled: false
      SnapshotOptions:
        AutomatedSnapshotStartHour: 8 # UTC
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: CMS }
      VPCOptions:
        SecurityGroupIds:
          - !GetAtt ElasticsearchSecurityGroup.GroupId
        SubnetIds:
          - !Ref VpcPublicSubnet1Id
          - !If [IsProduction, !Ref VpcPublicSubnet2Id, !Ref "AWS::NoValue"]

  # TODO
  # # callback queues are being slow
  # CmsAudioCallbackSlowAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     ActionsEnabled: true
  #     AlarmName: !Sub "[CMS][Worker][SQS] - ${EnvironmentType} Audio Callbacks Slow"
  #     AlarmActions:
  #       - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
  #     InsufficientDataActions:
  #       - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
  #     OKActions:
  #       - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
  #     AlarmDescription: Audio callbacks are behind
  #     ComparisonOperator: GreaterThanThreshold
  #     EvaluationPeriods: 3
  #     MetricName: ApproximateAgeOfOldestMessage
  #     Namespace: AWS/SQS
  #     Period: 60
  #     Statistic: Average
  #     Threshold: 60
  #     TreatMissingData: notBreaching
  #     Dimensions:
  #       - Name: QueueName
  #         Value: !Ref AudioSqsCallbackName
  # CmsImageCallbackSlowAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     ActionsEnabled: true
  #     AlarmName: !Sub "[CMS][Worker][SQS] - ${EnvironmentType} Image Callbacks Slow"
  #     AlarmActions:
  #       - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
  #     InsufficientDataActions:
  #       - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
  #     OKActions:
  #       - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
  #     AlarmDescription: Image callbacks are behind
  #     ComparisonOperator: GreaterThanThreshold
  #     EvaluationPeriods: 3
  #     MetricName: ApproximateAgeOfOldestMessage
  #     Namespace: AWS/SQS
  #     Period: 60
  #     Statistic: Average
  #     Threshold: 60
  #     TreatMissingData: notBreaching
  #     Dimensions:
  #       - Name: QueueName
  #         Value: !Ref ImageSqsCallbackName
  # # callback queues likely aren't processing
  # CmsAudioCallbackFatalAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     ActionsEnabled: true
  #     AlarmName: !Sub "[CMS][Worker][SQS] - ${EnvironmentType} Audio Callbacks Not Processing"
  #     AlarmActions:
  #       - !Ref OpsFatalMessagesSnsTopicArn
  #     InsufficientDataActions:
  #       - !Ref OpsFatalMessagesSnsTopicArn
  #     OKActions:
  #       - !Ref OpsFatalMessagesSnsTopicArn
  #     AlarmDescription: Audio callbacks are maybe not processing
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     EvaluationPeriods: 1
  #     MetricName: ApproximateAgeOfOldestMessage
  #     Namespace: AWS/SQS
  #     Period: 60
  #     Statistic: Average
  #     Threshold: 300
  #     TreatMissingData: notBreaching
  #     Dimensions:
  #       - Name: QueueName
  #         Value: !Ref AudioSqsCallbackName
  # CmsImageCallbackFatalAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     ActionsEnabled: true
  #     AlarmName: !Sub "[CMS][Worker][SQS] - ${EnvironmentType} Image Callbacks Not Processing"
  #     AlarmActions:
  #       - !Ref OpsFatalMessagesSnsTopicArn
  #     InsufficientDataActions:
  #       - !Ref OpsFatalMessagesSnsTopicArn
  #     OKActions:
  #       - !Ref OpsFatalMessagesSnsTopicArn
  #     AlarmDescription: Image callbacks are maybe not processing
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     EvaluationPeriods: 1
  #     MetricName: ApproximateAgeOfOldestMessage
  #     Namespace: AWS/SQS
  #     Period: 60
  #     Statistic: Average
  #     Threshold: 300
  #     TreatMissingData: notBreaching
  #     Dimensions:
  #       - Name: QueueName
  #         Value: !Ref ImageSqsCallbackName
