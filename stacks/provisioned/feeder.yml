# stacks/provisioned/metrics.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >- # TODO
  Creates an ECS service for Metrics, along with target group and listener rule
  for the shared ALB.

Mappings:
  ElbService:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    us-east-1:
      AccountId: "127311923021"
    us-east-2:
      AccountId: "033677994240"
    us-west-1:
      AccountId: "027434742980"
    us-west-2:
      AccountId: "797873946194"
    af-south-1:
      AccountId: "098369216593"
    ca-central-1:
      AccountId: "985666609251"
    eu-central-1:
      AccountId: "054676820928"
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-south-1:
      AccountId: "635631232127"
    eu-west-3:
      AccountId: "009996457667"
    eu-north-1:
      AccountId: "897822967062"
    ap-east-1:
      AccountId: "754344448648"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-northeast-3:
      AccountId: "383597477331"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    me-south-1:
      AccountId: "076674570225"
    sa-east-1:
      AccountId: "507241528517"

Parameters:
  kWebContainerName:
    Type: String
    Default: feeder-web
  kWorkerContainerName:
    Type: String
    Default: feeder-worker
  kWebApplicationPort:
    Type: Number
    Default: 3000
  #######
  EcsClusterArn: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  EchoServiceToken: { Type: String }
  VpcId: { Type: "AWS::EC2::VPC::Id" }
  SecretsBase: { Type: String }
  EcrRegion: { Type: String }
  EcrImageTag: { Type: String }
  SecretsVersion: { Type: String }
  SecretsStackName: { Type: String }
  NotificationsStackName: { Type: String }
  VpcPublicSubnet1Id: { Type: "AWS::EC2::Subnet::Id" }
  VpcPublicSubnet2Id: { Type: "AWS::EC2::Subnet::Id" }
  VpcPublicSubnet3Id: { Type: "AWS::EC2::Subnet::Id" }
  SharedEcsAsgInstanceSecurityGroupId: { Type: "AWS::EC2::SecurityGroup::Id" }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  Constants:
    Type: Custom::Echo
    Properties:
      ServiceToken: !Ref EchoServiceToken
      VanityAlbDomain: !Sub feeder.dualstack.${Alb.DNSName}.${EnvironmentTypeAbbreviation}.prx.tech

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If [IsProduction, feeder.prx.org, feeder.staging.prx.tech]
      SubjectAlternativeNames:
        - !GetAtt Constants.VanityAlbDomain
        - !If [IsProduction, feeder.prx.tech, !Ref "AWS::NoValue"]
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_feeder_${Alb.LoadBalancerName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      ValidationMethod: DNS

  VanityAlbDomainRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub >-
        Record sets for dualstack traffic to the Feeder ${EnvironmentType} ALB
      HostedZoneName: prx.tech.
      RecordSets:
        - Type: AAAA
          Name: !GetAtt Constants.VanityAlbDomain
          AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
        - Type: A
          Name: !GetAtt Constants.VanityAlbDomain
          AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: !If
              - IsProduction
              - 3
              - 1
            Status: Enabled
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
  AccessLogsBucketPolicy:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !GetAtt AccessLogsBucket.Arn
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
          - Action: s3:PutObject
            Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${ElbAccountId}:root
                - ElbAccountId: !FindInMap [ElbService, !Ref "AWS::Region", AccountId]
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
        Version: "2012-10-17"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Security group for the ${EnvironmentType} Feeder ALB. Only the ALB
        should belong to it. Controls traffic into the ALB (i.e., internet) and
        from the ALB to targets (EC2 instances, etc), By default, allows all
        HTTP inbound traffic.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: ::/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIpv6: ::/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-alb_inbound_forwarding" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      VpcId: !Ref VpcId
  LoadBalancerSecurityGroupInstanceEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: >-
        Allow all egress traffic from the Feeder LB SG to the instance SG.
      # Based on the following recommednation
      # https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-unhealthy-checks-ecs/#Correctly_configure_the_security_groups_attached_to_your_load_balancer_and_container_instance
      DestinationSecurityGroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
      FromPort: 0
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      IpProtocol: tcp
      ToPort: 65535

  # This adds a rule to the instance security group defined in
  # shared-ecs-asg.yml
  InstanceSecurityGroupAlbDynamicPortIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: >-
        Allow ingress traffic from the Feeder LB SG to the instance SG on ports
        used by ECS task dynamic port mapping.
      FromPort: 32768
      GroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      ToPort: 60999

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: dualstack
      LoadBalancerAttributes:
        # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes
        - Key: idle_timeout.timeout_seconds
          Value: "150"
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets:
        - !Ref VpcPublicSubnet1Id
        - !Ref VpcPublicSubnet2Id
        - !Ref VpcPublicSubnet3Id
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
  Alb5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      ActionsEnabled: true
      AlarmName: "[][ALB][Error] LB 5XX" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      AlarmDescription: | # TODO
        5XX load balancer errors originating from the load balancer
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt Alb.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
  AlbResponseTimeP95Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      ActionsEnabled: true
      AlarmName: "[][ALB][TargetResponseTime] P95 extremely slow" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      AlarmDescription: | # TODO
        Target response time value for ___ load balancer targets at 95th
        percentile higher than expected
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt Alb.LoadBalancerFullName
      EvaluationPeriods: 2
      ExtendedStatistic: p95
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 300
      Threshold: 0.2
      TreatMissingData: notBreaching

  HttpListener:
    # Generally all HTTP traffic is redirected to HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: HTTPS
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceDecryptPolicyArn
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceAccessPolicyArn
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sqs:*
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*_feeder_*
            Version: "2012-10-17"
          PolicyName: SqsFullApplicationAccess
        - PolicyDocument:
            Statement:
              - Action: sns:*
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*_announce_feed_*
                  - !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*_announce_story_*
              - Action: sns:Publish
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: SnsFullApplicationAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:Get*
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListBucketVersions
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectVersionAcl
                Effect: Allow
                Resource: !If # TODO Better multi-region support
                  - IsProduction
                  - ["arn:aws:s3:::prx-feed/*", "arn:aws:s3:::prx-feed"]
                  - ["arn:aws:s3:::staging-prx-feed/*", "arn:aws:s3:::staging-prx-feed"]
            Version: "2012-10-17"
          PolicyName: S3FeedBucketAccess
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: Alb
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /api/v1
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_feeder" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  WebTargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      ActionsEnabled: true
      AlarmName: "[Metrics v2][ALB][Error] Target 5XX" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      AlarmDescription: >- # TODO
        5XX server errors originating from the metrics target group exceeded 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt Alb.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt WebTargetGroup.TargetGroupFullName
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  WebEcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpListener
      - HttpsListener
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsProduction, 5, 2]
      EnableECSManagedTags: true
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Ref kWebContainerName
          ContainerPort: !Ref kWebApplicationPort
          TargetGroupArn: !Ref WebTargetGroup
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      TaskDefinition: !Ref WebTaskDefinition
  WebTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: feeder
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/feeder.prx.org:${EcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWebContainerName
          PortMappings:
            - ContainerPort: !Ref kWebApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      TaskRoleArn: !GetAtt TaskRole.Arn

  WorkerEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsProduction, 1, 1]
      EnableECSManagedTags: true
      LaunchType: EC2
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      TaskDefinition: !Ref WorkerTaskDefinition
  WorkerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - worker
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: feeder
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/feeder.prx.org:${EcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WorkerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWorkerContainerName
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      TaskRoleArn: !GetAtt TaskRole.Arn

Outputs:
  VanityAlbDomain:
    Description: >-
      The vanity wildcard domain configured for the ALB's certificate, and
      registered in the DNS hosted zone
    Value: !GetAtt Constants.VanityAlbDomain
  AlbName:
    Description: >-
      The full name of the load balancer. For example, my-load-balancer
    Value: !GetAtt Alb.LoadBalancerName
