# stacks/provisioned/networks.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates an ECS service for the public Networks web server, along with target
  group and listener rule for the shared ALB. Also creates an ECS service for
  the internal Networks Sphinx server, along with a network load balancer, and
  target groups and listeners for web and Sphinx traffic on the NLB. The NLB
  and Sphinx service run in the private subnet of the shared VPC. A new TLS
  certificate is created for the NLB.

Parameters:
  kWebContainerName:
    Type: String
    Default: networks-web
  kWebApplicationPort:
    Type: Number
    Default: 3000
  kSphinxContainerName:
    Type: String
    Default: networks-sphinx
  kSphinxPort:
    Type: Number
    Default: 9312
  #######
  AlbFullName: { Type: String }
  AlbHttpsListenerArn: { Type: String }
  EcsClusterArn: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  VpcId: { Type: "AWS::EC2::VPC::Id" }
  VpcCidrBlock: { Type: String }
  VpcIpv6CidrBlocks: { Type: String }
  SecretsBase: { Type: String }
  EcrRegion: { Type: String }
  EcrImageTag: { Type: String }
  SecretsVersion: { Type: String }
  AlbListenerRulePriorityPrefix: { Type: String }
  SecretsStackName: { Type: String }
  NotificationsStackName: { Type: String }
  VpcPrivateSubnet1Id: { Type: "AWS::EC2::Subnet::Id" }
  VpcPrivateSubnet2Id: { Type: "AWS::EC2::Subnet::Id" }
  VpcPrivateSubnet3Id: { Type: "AWS::EC2::Subnet::Id" }
  UploadSigningEndpointUrl: { Type: String }
  UploadSigningAccessKeyId: { Type: String }
  SharedMemcachedEndpointAddress: { Type: String }
  SharedMemcachedEndpointPort: { Type: String }
  EchoServiceToken: { Type: String }
  EcsLaunchEndpointsAccessSecurityGroupId: { Type: "AWS::EC2::SecurityGroup::Id" }
  KmsEndpointAccessSecurityGroupId: { Type: "AWS::EC2::SecurityGroup::Id" }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  Constants:
    Type: Custom::Echo
    Properties:
      ServiceToken: !Ref EchoServiceToken
      SphinxBaseUrl: !Sub https://${Nlb.LoadBalancerName}.${AWS::Region}.prx.tech/
      VanityNlbDomain: !Sub ${Nlb.LoadBalancerName}.${AWS::Region}.prx.tech

  # INTERNET-FACING WEB SERVER #################################################

  PublicWebHostHeaderSharedAlbListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref PublicWebTargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - networks.*
      ListenerArn: !Ref AlbHttpsListenerArn
      Priority: !Join ["", [!Ref AlbListenerRulePriorityPrefix, "00"]]

  PublicWebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /sessions/new
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_networks" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  PublicWebTargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      ActionsEnabled: true
      AlarmName: "[Metrics v2][ALB][Error] Target 5XX" # TODO
      AlarmActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      OKActions:
        - Fn::ImportValue: !Sub ${NotificationsStackName}-OpsErrorMessagesSnsTopicArn
      AlarmDescription: >- # TODO
        5XX server errors originating from the metrics target group exceeded 0
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref AlbFullName
        - Name: TargetGroup
          Value: !GetAtt PublicWebTargetGroup.TargetGroupFullName

  # This is the Rails app running in client mode, meaning it will connect to a
  # remote Sphinx server and run the public-facing web server. It receives
  # HTTPS traffic via the shared application load balancer.
  PublicWebEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: true
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Ref kWebContainerName
          ContainerPort: !Ref kWebApplicationPort
          TargetGroupArn: !Ref PublicWebTargetGroup
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      TaskDefinition: !Ref PublicWebTaskDefinition

  PublicWebTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  PublicWebExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
  PublicWebTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceDecryptPolicyArn
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceAccessPolicyArn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
  PublicWebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: networks
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: SIGNER_URL
              Value: !Ref UploadSigningEndpointUrl
            - Name: SIGNER_ACCESS_KEY
              Value: !Ref UploadSigningAccessKeyId
            - Name: MEMCACHED_PORT_11211_TCP_ADDR
              Value: !Ref SharedMemcachedEndpointAddress
            - Name: MEMCACHED_PORT_11211_TCP_PORT
              Value: !Ref SharedMemcachedEndpointPort
            - Name: SPHINX_SERVER
              Value: !GetAtt Constants.VanityNlbDomain
            - Name: SPHINX_PORT
              Value: !Ref kSphinxPort
            - Name: SPHINX_BASE_URL
              Value: !GetAtt Constants.SphinxBaseUrl
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/networks.prx.org:${EcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PublicWebTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWebContainerName
          PortMappings:
            - ContainerPort: !Ref kWebApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt PublicWebExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      TaskRoleArn: !GetAtt PublicWebTaskRole.Arn

  # # INTERNAL SPHINX SERVER #####################################################

  Nlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internal
      Subnets:
        - !Ref VpcPrivateSubnet1Id
        - !Ref VpcPrivateSubnet2Id
        - !Ref VpcPrivateSubnet3Id
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      Type: network

  NlbCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !GetAtt Constants.VanityNlbDomain
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_networks_${Nlb.LoadBalancerName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      ValidationMethod: DNS

  SphinxServerSearchdTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: Nlb
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      Port: !Ref kSphinxPort
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      TargetType: ip
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  SphinxServerSearchdNlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref SphinxServerSearchdTargetGroup
          Type: forward
      LoadBalancerArn: !Ref Nlb
      Port: !Ref kSphinxPort
      Protocol: TCP

  SphinxServerWebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: Nlb
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: "3000"
      HealthyThresholdCount: 3
      Port: 80
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      TargetType: ip
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  SphinxServerWebNlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref NlbCertificate
      LoadBalancerArn: !Ref Nlb
      Port: 443
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-2016-08
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SphinxServerWebTargetGroup

  SphinxServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Allows web and Sphinx traffic into the Sphinx server service, and MySQL
        traffic out
      SecurityGroupEgress:
        # - CidrIp: 0.0.0.0/0
        #   IpProtocol: "-1"
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIpv6: ::/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
        - CidrIpv6: ::/0
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
      SecurityGroupIngress:
        # - CidrIp: 0.0.0.0/0
        #   IpProtocol: "-1"
        - CidrIp: !Ref VpcCidrBlock
          IpProtocol: tcp
          FromPort: !Ref kWebApplicationPort
          ToPort: !Ref kWebApplicationPort
        - CidrIpv6: !Ref VpcIpv6CidrBlocks
          IpProtocol: tcp
          FromPort: !Ref kWebApplicationPort
          ToPort: !Ref kWebApplicationPort
        - CidrIp: !Ref VpcCidrBlock
          IpProtocol: tcp
          FromPort: !Ref kSphinxPort
          ToPort: !Ref kSphinxPort
        - CidrIpv6: !Ref VpcIpv6CidrBlocks
          IpProtocol: tcp
          FromPort: !Ref kSphinxPort
          ToPort: !Ref kSphinxPort
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_networks_sphinx" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      VpcId: !Ref VpcId

  # This is the Sphinx server. It runs both the Networks Rails app, and the
  # Sphinx processes for handling search queries and indexing. It recieves
  # HTTP and Sphinx traffic via the network load balancer (defined in this
  # template). The LOCAL_SPHINX environment variable is responsible for making
  # the image act as a Sphinx server.
  SphinxServerEcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - SphinxServerSearchdNlbListener
      - SphinxServerWebNlbListener
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 0
      EnableECSManagedTags: true
      LoadBalancers:
        - ContainerName: !Ref kSphinxContainerName
          ContainerPort: !Ref kWebApplicationPort
          TargetGroupArn: !Ref SphinxServerWebTargetGroup
        - ContainerName: !Ref kSphinxContainerName
          ContainerPort: !Ref kSphinxPort
          TargetGroupArn: !Ref SphinxServerSearchdTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !GetAtt SphinxServerSecurityGroup.GroupId
            - !Ref EcsLaunchEndpointsAccessSecurityGroupId
            - !Ref KmsEndpointAccessSecurityGroupId
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref VpcPrivateSubnet1Id
            - !Ref VpcPrivateSubnet2Id
            - !Ref VpcPrivateSubnet3Id
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      TaskDefinition: !Ref SphinxServerTaskDefinition

  SphinxServerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  SphinxServerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
  SphinxServerTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceDecryptPolicyArn
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceAccessPolicyArn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
  SphinxServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: networks
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: SIGNER_URL
              Value: !Ref UploadSigningEndpointUrl
            - Name: SIGNER_ACCESS_KEY
              Value: !Ref UploadSigningAccessKeyId
            - Name: MEMCACHED_PORT_11211_TCP_ADDR
              Value: !Ref SharedMemcachedEndpointAddress
            - Name: MEMCACHED_PORT_11211_TCP_PORT
              Value: !Ref SharedMemcachedEndpointPort
            - Name: SPHINX_SERVER
              Value: !GetAtt Constants.VanityNlbDomain
            - Name: SPHINX_PORT
              Value: !Ref kSphinxPort
            - Name: SPHINX_BASE_URL
              Value: !GetAtt Constants.SphinxBaseUrl
            - Name: LOCAL_SPHINX
              Value: "true"
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${EcrRegion}.amazonaws.com/networks.prx.org:${EcrImageTag}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SphinxServerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kSphinxContainerName
          PortMappings:
            - ContainerPort: !Ref kWebApplicationPort
            - ContainerPort: !Ref kSphinxPort
      ExecutionRoleArn: !GetAtt SphinxServerExecutionRole.Arn
      NetworkMode: awsvpc
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Networks }
      TaskRoleArn: !GetAtt SphinxServerTaskRole.Arn
