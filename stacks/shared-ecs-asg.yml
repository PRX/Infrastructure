# stacks/shared-ecs-asg.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates an Auto Scaling Group that launches EC2 instances into the shared ECS
  cluster. Also creates a capacity provider associated with the shared ECS
  cluster that helps manage the size of the ASG. Instances launched from the
  ASG allow all outbound traffic. Inbound traffic is permitted using several
  security groups. Instances in the ASG are launched in public subnets.

Parameters:
  EnvironmentType: { Type: String }
  RootStackName: { Type: String }
  KeyPairName: { Type: "AWS::EC2::KeyPair::KeyName" }
  VpcId: { Type: "AWS::EC2::VPC::Id" }
  VpcPublicSubnet1Id: { Type: "AWS::EC2::Subnet::Id" }
  VpcPublicSubnet2Id: { Type: "AWS::EC2::Subnet::Id" }
  VpcPublicSubnet3Id: { Type: "AWS::EC2::Subnet::Id" }
  EcsClusterName: { Type: String }
  AlbTargetInstanceSecurityGroupId: { Type: "AWS::EC2::SecurityGroup::Id" }
  EcsLaunchEndpointsAccessSecurityGroupId: { Type: "AWS::EC2::SecurityGroup::Id" }
  KmsEndpointAccessSecurityGroupId: { Type: "AWS::EC2::SecurityGroup::Id" }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: DockerDiskUsagePolicy
          PolicyDocument:
            Statement:
              - Action: cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
        - PolicyName: ModifyCreditSpecificationPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - ec2:ModifyInstanceCreditSpecification
                  - ec2:DescribeInstanceCreditSpecifications
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  InboundSshTrafficSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub >-
        Allows inbound SSH traffic to ${EnvironmentType} ECS ASG instances
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIpv6: ::/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-asg_instance-ssh" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  OutboundTrafficSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub >-
        Allows ALL outbound traffic from ${EnvironmentType} ECS ASG instances
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-asg_instance-outbound" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }

  # If the logical ID of this resource changes, it needs to be changed in the
  # user data and metadata as well
  Ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings: # TODO
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 30
              VolumeType: gp3
          - DeviceName: /dev/xvdcz
            Ebs:
              DeleteOnTermination: true
              VolumeSize: !If
                - IsProduction
                - 80
                - 30
              VolumeType: gp3
        CreditSpecification:
          CpuCredits: unlimited
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: ami-09a3cad575b7eabaa # TODO Make multi-region aware
        InstanceType: !If
          - IsProduction
          - t3a.medium
          - t3a.small
        KeyName: !Ref KeyPairName
        Monitoring:
          Enabled: false # Specifies whether detailed monitoring is enabled
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - !GetAtt OutboundTrafficSecurityGroup.GroupId
              - !GetAtt InboundSshTrafficSecurityGroup.GroupId
              - !Ref AlbTargetInstanceSecurityGroupId
              - !Ref EcsLaunchEndpointsAccessSecurityGroupId
              - !Ref KmsEndpointAccessSecurityGroupId
            Ipv6AddressCount: 1
        # TagSpecifications:
        UserData:
          # User data runs commands on EC2 instances when they are launched. To
          # support configuration updates on running EC2 instance, the user
          # data should primarily be used to run cfn-init. Any further launch
          # scripts or tasks should be defined in the resource metadata that
          # cfn-init loads, and that cfn-hup watches for changes.
          # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html
          # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#multi-part_user_data
          Fn::Base64:
            Fn::Sub: |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              MIME-Version: 1.0

              --==BOUNDARY==
              Content-Type: text/cloud-boothook; charset="us-ascii"

              # Set Docker daemon options
              # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#cloud-init-per
              # At this time, only ECS Containers based on Amazon Linux AMIs (not Amazon Linux 2 AMIs) support cloud-init-per.
              # cloud-init-per once docker_options echo 'OPTIONS="${!OPTIONS}"' >> /etc/sysconfig/docker

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash
              yum install -y aws-cfn-bootstrap

              # --resource is the logical ID of the resource in a CloudFormation stack (generally a stack launched from
              # this template) that includes AWS::CloudFormation::Init metadata. That resource is likely the same
              # resource where this user data script is defined.
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
              /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource Ec2LaunchTemplate

              # Use to the return status of calling cfn-init to signal if there's an issue with initialization
              # --resource is the logical ID of the resource that contains the creation policy to signal
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-signal.html
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html
              /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource Asg
              --==BOUNDARY==--
      # TagSpecifications:
      #   - TagSpecification
    Metadata:
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      # This AWS::CloudFormation::Init metadata is queried by cfn-init, which
      # is installed and run as part of the launch template's user data
      AWS::CloudFormation::Init:
        config:
          # packages:
          #   yum:
          #     aws-cli: []
          #     bc: []
          #     jq: []
          files:
            /etc/cfn/cfn-hup.conf:
              # Create a configuration file for cfn-hup
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-hup.html#cfn-hup-config-file
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              # Define the actions to run when the resource metadata (found at
              # the given path) changes during a stack update.
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-hup.html#cfn-hup-hook-file
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Ec2LaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource Ec2LaunchTemplate
                runas=root
          commands:
            01_configure_ecs_container_agent:
              # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html
              command: !Sub |-
                #!/bin/bash
                echo "Configuring ECS container agent"
                echo "Launching instance into cluster: ${EcsClusterName}"
                echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config
          services:
            sysvinit:
              cfn-hup:
                # Starts the cfn-hup service, and restarts the service if
                # cfn-init modifies the specified configuration files
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  # If the logical ID of this resource changes, it must also be changed in the
  # arguments of cfn-signal in the launch template's user data
  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: false
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT0S
        # SuspendProcesses:
        #   - List of processes
        WaitOnResourceSignals: false
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Properties:
      Cooldown: "240"
      HealthCheckGracePeriod: 512
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2LaunchTemplate
        Version: !GetAtt Ec2LaunchTemplate.LatestVersionNumber
      # TODO LifecycleHookSpecificationList
      MaxInstanceLifetime: 1209600 # 14 days
      MaxSize: !If [IsProduction, "50", "20"]
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: !If [IsProduction, "7", "0"]
      NewInstancesProtectedFromScaleIn: true
      # TODO NotificationConfigurations
      Tags:
        - { PropagateAtLaunch: true, Key: Name, Value: !Sub "${RootStackName}_shared-asg" }
        - { PropagateAtLaunch: true, Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { PropagateAtLaunch: true, Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { PropagateAtLaunch: true, Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { PropagateAtLaunch: true, Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { PropagateAtLaunch: true, Key: prx:dev:application, Value: Common }
      TerminationPolicies:
        - Default
        - OldestInstance
      VPCZoneIdentifier:
        - !Ref VpcPublicSubnet1Id
        - !Ref VpcPublicSubnet2Id
        - !Ref VpcPublicSubnet3Id

  DefaultCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref Asg
        ManagedScaling:
          MaximumScalingStepSize: 10
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: !If
            - IsProduction
            - 72
            - 100
        ManagedTerminationProtection: ENABLED
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
  ClusterCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsClusterName
      CapacityProviders:
        - !Ref DefaultCapacityProvider
      DefaultCapacityProviderStrategy:
        # With only one default capacity provider, the base and weight won't
        # factor into scheduling; everything will be even within the ASG
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref DefaultCapacityProvider

Outputs:
  OutboundTrafficSecurityGroupId:
    Description: >-
      The group ID of the security group that allows all outbound traffic for
      ECS ASG instances
    Value: !GetAtt OutboundTrafficSecurityGroup.GroupId
