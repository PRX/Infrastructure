# stacks/serverless/dovetail-counts-lambda.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Dovetail counts lambda function
Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  IsStaging: !Equals [!Ref EnvironmentType, Staging]
  HasRedisBackupUrl: !Not [!Equals [!Ref RedisBackupUrl, ""]]
Parameters:
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  OpsFatalMessagesSnsTopicArn:
    Type: String
  CodeS3Bucket:
    Type: String
  CodeS3ObjectKey:
    Type: String
  EnvironmentType:
    Type: String
  EnvironmentTypeAbbreviation:
    Type: String
  VPCSecurityGroup:
    Type: "AWS::EC2::SecurityGroup::Id"
  VPCSubnet1:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet2:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet3:
    Type: "AWS::EC2::Subnet::Id"
  ArrangementsDynamodbAccessRole:
    Type: AWS::SSM::Parameter::Value<String>
  ArrangementsDynamodbRegion:
    Type: AWS::SSM::Parameter::Value<String>
  ArrangementsDynamodbTable:
    Type: AWS::SSM::Parameter::Value<String>
  KinesisIn:
    Type: AWS::SSM::Parameter::Value<String>
  KinesisOut:
    Type: AWS::SSM::Parameter::Value<String>
  RedisBackupUrl:
    Type: AWS::SSM::Parameter::Value<String>
  RedisUrl:
    Type: AWS::SSM::Parameter::Value<String>
  S3Bucket:
    Type: AWS::SSM::Parameter::Value<String>
  S3Prefix:
    Type: AWS::SSM::Parameter::Value<String>
Resources:
  DovetailCountsLambdaExecutionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: DynamodbAssumeRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Ref ArrangementsDynamodbAccessRole
        - PolicyName: KinesisWritePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:PutRecord"
                  - "kinesis:PutRecords"
                Resource:
                  - !Ref KinesisOut
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
      Tags:
        - Key: Project
          Value: Dovetail
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  DovetailCountsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3ObjectKey
      Description: Dovetail bytes sent counter
      Environment:
        Variables:
          ARRANGEMENTS_DDB_ACCESS_ROLE: !Ref ArrangementsDynamodbAccessRole
          ARRANGEMENTS_DDB_REGION: !Ref ArrangementsDynamodbRegion
          ARRANGEMENTS_DDB_TABLE: !Ref ArrangementsDynamodbTable
          KINESIS_IMPRESSION_STREAM: !Ref KinesisOut
          REDIS_BACKUP_URL: !If [HasRedisBackupUrl, !Ref RedisBackupUrl, !Ref "AWS::NoValue"]
          REDIS_URL: !Ref RedisUrl
          S3_BUCKET: !Ref S3Bucket
          S3_PREFIX: !Ref S3Prefix
          PROCESS_UNTIL: !If [IsStaging, "1635276000", ""]
      Handler: index.handler
      Layers: !If
        - IsProduction
        - - !Sub arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:12
        - !Ref AWS::NoValue
      MemorySize: 2000
      Role: !GetAtt DovetailCountsLambdaExecutionIAMRole.Arn
      Runtime: nodejs14.x
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCSecurityGroup
        SubnetIds:
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
          - !Ref VPCSubnet3
      Tags:
        - Key: Project
          Value: Dovetail
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Dovetail-Counts-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  DovetailCountsKinesisTrigger:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !Ref KinesisIn
      FunctionName: !Ref DovetailCountsLambdaFunction
      StartingPosition: "LATEST"
  # log metrics
  DovetailCountsLambdaWarnsMetric:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{ $._logLevel = "warn" }'
      LogGroupName: !Sub "/aws/lambda/${DovetailCountsLambdaFunction}"
      MetricTransformations:
        - MetricName: !Sub "dovetail_counts_warns_${EnvironmentTypeAbbreviation}"
          MetricNamespace: LogMetrics
          MetricValue: "1"
  DovetailCountsLambdaErrorsMetric:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{ $._logLevel = "error" }'
      LogGroupName: !Sub "/aws/lambda/${DovetailCountsLambdaFunction}"
      MetricTransformations:
        - MetricName: !Sub "dovetail_counts_errors_${EnvironmentTypeAbbreviation}"
          MetricNamespace: LogMetrics
          MetricValue: "1"
  DovetailCountsMissingArrangementMetric:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{ $.errorName = "ArrangementNotFoundError" }'
      LogGroupName: !Sub "/aws/lambda/${DovetailCountsLambdaFunction}"
      MetricTransformations:
        - MetricName: !Sub "dovetail_counts_missing_arrangement_${EnvironmentTypeAbbreviation}"
          MetricNamespace: LogMetrics
          MetricValue: "1"
  DovetailCountsKinesisFailureMetric:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{ $.errorName = "KinesisPutError" }'
      LogGroupName: !Sub "/aws/lambda/${DovetailCountsLambdaFunction}"
      MetricTransformations:
        - MetricName: !Sub "dovetail_counts_kinesis_failure_${EnvironmentTypeAbbreviation}"
          MetricNamespace: LogMetrics
          MetricValue: "$.count"
  # alarms
  DovetailCountsMissingArrangementAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Dovetail][Counts][ArrangementsMissing] ${EnvironmentType}"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: Arrangement JSON not found in S3, for some reason? Crazy!
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: !Sub "dovetail_counts_missing_arrangement_${EnvironmentTypeAbbreviation}"
      Namespace: LogMetrics
      Period: 300
      Statistic: Sum
      Threshold: 100
      TreatMissingData: notBreaching
  DovetailCountsKinesisFailureAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Dovetail][Counts][KinesisFailures] ${EnvironmentType}"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: Kinesis PUTs failing and getting retried on the dovetail counts lambda
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 5
      MetricName: !Sub "dovetail_counts_kinesis_failure_${EnvironmentTypeAbbreviation}"
      Namespace: LogMetrics
      Period: 60
      Statistic: Sum
      Threshold: 100
      TreatMissingData: notBreaching
  DovetailCountsLoggedErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Dovetail][Counts][LogErrors] ${EnvironmentType}"
      AlarmActions:
        - !If [IsProduction, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      InsufficientDataActions:
        - !If [IsProduction, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      OKActions:
        - !If [IsProduction, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      AlarmDescription: Logged errors on the dovetail counts lambda
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      MetricName: !Sub "dovetail_counts_errors_${EnvironmentTypeAbbreviation}"
      Namespace: LogMetrics
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  DovetailCountsErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Dovetail][Counts][Errors] ${EnvironmentType}"
      AlarmActions:
        - !If [IsProduction, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      InsufficientDataActions:
        - !If [IsProduction, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      OKActions:
        - !If [IsProduction, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      AlarmDescription: Too many dovetail counts lambda errors
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref DovetailCountsLambdaFunction
  DovetailCountsIteratorAgeWarnAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Dovetail][Counts][IteratorAge] ${EnvironmentType} > 15 minutes"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: Dovetail Counts Lambda processing is slightly behind
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 900000
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref DovetailCountsLambdaFunction
  DovetailCountsIteratorAgeFatalAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[Dovetail][Counts][IteratorAge] ${EnvironmentType} > 1 Hour"
      AlarmActions:
        - !If [IsProduction, !Ref OpsFatalMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      InsufficientDataActions:
        - !If [IsProduction, !Ref OpsFatalMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      OKActions:
        - !If [IsProduction, !Ref OpsFatalMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      AlarmDescription: Dovetail Counts Lambda processing is very behind
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 3600000
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref DovetailCountsLambdaFunction
