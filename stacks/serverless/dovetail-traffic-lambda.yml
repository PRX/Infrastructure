# stacks/serverless/dovetail-traffic-lambda.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: Dovetail traffic lambda function
Parameters:
  CodeS3Bucket:
    Type: String
  CodeS3ObjectVersion:
    Type: String
  DownloaderBatchSize:
    Type: AWS::SSM::Parameter::Value<String>
  ScheduleIntervalMinutes:
    Type: AWS::SSM::Parameter::Value<String>
  MetricsKinesisStream:
    Type: AWS::SSM::Parameter::Value<String>
Resources:
  #
  # lambda function
  #
  DovetailTrafficLambdaExecutionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
      Path: "/"
      Policies:
        - PolicyName: SqsWritePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "sqs:SendMessage"
                Resource: !GetAtt DovetailTrafficSqsQueue.Arn
      Tags:
        - Key: Project
          Value: Dovetail
        - Key: Environment
          Value: Staging
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  DovetailTrafficLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: lambda/PRX-dovetail-traffic-lambda.zip
        S3ObjectVersion: !Ref CodeS3ObjectVersion
      Description: Dovetail traffic generator
      Environment:
        Variables:
          DOWNLOADER_BATCH_SIZE: !Ref DownloaderBatchSize
          SCHEDULE_INTERVAL_MINUTES: !Ref ScheduleIntervalMinutes
          SQS_QUEUE_URL: !Ref DovetailTrafficSqsQueue
          SQS_QUEUE_REGION: !Ref AWS::Region
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt DovetailTrafficLambdaExecutionIAMRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Tags:
        - Key: Project
          Value: Dovetail
        - Key: Environment
          Value: Staging
        - Key: Name
          Value: "Dovetail-Traffic-Staging"
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  #
  # Downloads SQS queue and trigger
  #
  DovetailTrafficSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 7200
      QueueName: staging_dovetail_traffic
      Tags:
        - Key: Project
          Value: Dovetail
        - Key: Environment
          Value: Staging
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  DovetailTrafficSqsTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt DovetailTrafficSqsQueue.Arn
      FunctionName: !Ref DovetailTrafficLambdaFunction
  #
  # Kinesis cloned podcast scheduler
  #
  DovetailTrafficKinesisTrigger:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      # use a large batch size. since we only care about a very small subset of
      # records matching certain podcast ids, we end up discarding most.
      BatchSize: 1000
      Enabled: true
      EventSourceArn: !Ref MetricsKinesisStream
      FunctionName: !Ref DovetailTrafficLambdaFunction
      StartingPosition: "LATEST"
  #
  # Cron to trigger the scheduler
  #
  DovetailTrafficSchedulerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt DovetailTrafficLambdaFunction.Arn
      Tags:
        - Key: Project
          Value: Dovetail
        - Key: Environment
          Value: Staging
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  DovetailTrafficSchedulerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DovetailTrafficLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DovetailTrafficSchedulerTrigger.Arn
  DovetailTrafficSchedulerTrigger:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        Runs the dovetail traffic lambda scheduler
      RoleArn: !GetAtt DovetailTrafficSchedulerRole.Arn
      ScheduleExpression: !Join ["", ["rate(", !Ref ScheduleIntervalMinutes, " minutes)"]]
      State: ENABLED
      Targets:
        - Arn: !GetAtt DovetailTrafficLambdaFunction.Arn
          Id: "Staging-Dovetail-Traffic-Scheduler"
