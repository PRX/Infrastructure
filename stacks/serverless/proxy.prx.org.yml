# stacks/proxy.prx.org.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >-
  Creates a serverless app to handle traffic to various domains that needs to
  be proxied or redirected based on rule sets. In staging, it only handles
  proxy.staging.prx.org. In production, the API is also mapped to the domains
  it's designed to proxy, such as prx.org and pri.org.

Parameters:
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  CodeS3Bucket:
    Type: String
  CodeS3ObjectKey:
    Type: String
  EnvironmentType:
    Type: String
  EnvironmentTypeAbbreviation:
    Type: String
  RootStackName:
    Type: String

Mappings:
  EnvironmentTypeMap:
    Testing:
      DomainName: "proxy.test.prx.tech"
      HostedZoneName: "prx.tech."
      CorporateHost: "corporate.prx.tech"
      ExchangeHost: "exchange.test.prx.tech"
      PrxSessionKey: "_prx_session_test"
    Staging:
      DomainName: "proxy.staging.prx.tech"
      HostedZoneName: "prx.tech."
      CorporateHost: "corporate.prx.tech"
      ExchangeHost: "exchange.staging.prx.tech"
      PrxSessionKey: "_prx_session_staging"
    Production:
      DomainName: "proxy.prx.org"
      HostedZoneName: "prx.org."
      CorporateHost: "corporate.prx.tech"
      ExchangeHost: "exchange.prx.org"
      PrxSessionKey: "_prx_session"

Conditions:
  CreateStagingResources: !Equals [!Ref EnvironmentType, Staging]
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]

Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If [CreateProductionResources, www.prx.org, proxy.staging.prx.tech]
      SubjectAlternativeNames: !If
        - CreateProductionResources
        - - prx.org
          - proxy.prx.tech
        - !Ref AWS::NoValue
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_proxy" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Proxy }
      ValidationMethod: DNS

  ProxyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: !Sub ${EnvironmentType} proxy service
      DisableExecuteApiEndpoint: false
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Proxy
  ProxyHttpLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub ${EnvironmentType} proxy server
      Environment:
        Variables:
          CORPORATE_HOST: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, CorporateHost]
          EXCHANGE_HOST: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, ExchangeHost]
          PRX_SESSION_KEY: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, PrxSessionKey]
      Events:
        ApiRootRequest:
          Properties:
            ApiId: !Ref ProxyHttpApi
            Method: any
            Path: /
            PayloadFormatVersion: "1.0"
          Type: HttpApi
        ApiDeepRequest:
          Properties:
            ApiId: !Ref ProxyHttpApi
            Method: any
            Path: /{proxy+}
            PayloadFormatVersion: "1.0"
          Type: HttpApi
      Handler: index.handler
      MemorySize: 192
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Proxy
      Timeout: 30
  ProxyHttpLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProxyHttpLambdaFunction}
      RetentionInDays: 60

  # Create an association between proxy.prx.tech (or staging.proxy.prx.tech)
  # and the API Gateway. The API is a regional API, so the domain can be
  # associated with one API in each AWS region. DNS records are also created in
  # each region, which creates a latency-based routing policy for DNS queries
  # of the domain.
  UtilityDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: CreateProductionResources
    Properties:
      DomainName: !If [CreateProductionResources, proxy.prx.tech, proxy.staging.prx.tech]
      DomainNameConfigurations:
        - CertificateArn: !Ref Certificate
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Proxy
  UtilityApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: CreateProductionResources
    Properties:
      ApiId: !Ref ProxyHttpApi
      DomainName: !Ref UtilityDomainName
      Stage: $default
  UtilityDomainNameRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateProductionResources
    Properties:
      Comment: Record sets for proxy server API
      HostedZoneName: prx.tech.
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt UtilityDomainName.RegionalDomainName
            EvaluateTargetHealth: true # TODO Add health check
            HostedZoneId: !GetAtt UtilityDomainName.RegionalHostedZoneId
          Name: !If [CreateProductionResources, proxy.prx.tech, proxy.staging.prx.tech]
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: A
        - AliasTarget:
            DNSName: !GetAtt UtilityDomainName.RegionalDomainName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt UtilityDomainName.RegionalHostedZoneId
          Name: !If [CreateProductionResources, proxy.prx.tech, proxy.staging.prx.tech]
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: AAAA

  # In production, create associations between prx.org and www.prx.org and the
  # API Gateway. These are also regional, and need to exist in each region the
  # API is deployed to. There will only be a single DNS record for each domain,
  # though, which will point to proxy.prx.tech.
  # There are no counterparts to these domains in staging.
  PrxOrgDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: CreateProductionResources
    Properties:
      DomainName: prx.org
      DomainNameConfigurations:
        - CertificateArn: !Ref Certificate
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Proxy
  PrxOrgApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: CreateProductionResources
    Properties:
      ApiId: !Ref ProxyHttpApi
      DomainName: !Ref PrxOrgDomainName
      Stage: $default
  WwwPrxOrgDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: CreateProductionResources
    Properties:
      DomainName: www.prx.org
      DomainNameConfigurations:
        - CertificateArn: !Ref Certificate
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Proxy
  WwwPrxOrgApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: CreateProductionResources
    Properties:
      ApiId: !Ref ProxyHttpApi
      DomainName: !Ref WwwPrxOrgDomainName
      Stage: $default
