# stacks/serverless/pixel.prx.org.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: API Gateway pixel tracker
Conditions:
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
Parameters:
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  CodeS3Bucket:
    Type: String
  CodeS3ObjectVersion:
    Type: String
  EnvironmentType:
    Type: String
Mappings:
  EnvironmentTypeMap:
    Testing:
      DomainName: "pixel.test.prx.tech"
      HostedZoneName: "prx.tech."
      ValidationDomain: "prx.tech"
    Staging:
      DomainName: "pixel.staging.prx.tech"
      HostedZoneName: "prx.tech."
      ValidationDomain: "prx.tech"
    Production:
      DomainName: "pixel.prx.org"
      HostedZoneName: "prx.org."
      ValidationDomain: "prx.org"
Resources:
  Certificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DomainName]
      DomainValidationOptions:
        - ValidationDomain: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, ValidationDomain]
          DomainName: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DomainName]
      Tags:
        - Key: Project
          Value: pixel.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub PixelPrxOrg-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  PixelLambdaIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  PixelLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: lambda/PRX-pixel.prx.org.zip
        S3ObjectVersion: !Ref CodeS3ObjectVersion
      Description: API Gateway pixel tracker
      Handler: index.handler
      MemorySize: 192
      Role: !GetAtt PixelLambdaIamRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Tags:
        - Key: Project
          Value: pixel.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub PixelPrxOrg-${EnvironmentType}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  PixelRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${AWS::StackName} API"
      Description: "API used by PRX Pixel Tracker Lambda"
      BinaryMediaTypes:
        - "image/gif"
  PixelRestApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt PixelRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref PixelRestApi
  PixelRestApiRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PixelLambdaFunction.Arn}/invocations
      RestApiId: !Ref PixelRestApi
      ResourceId: !GetAtt PixelRestApi.RootResourceId
  PixelRestApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PixelLambdaFunction.Arn}/invocations
      RestApiId: !Ref PixelRestApi
      ResourceId: !Ref PixelRestApiResource
  PixelRestApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - PixelRestApiRootMethod
      - PixelRestApiMethod
    Properties:
      RestApiId: !Ref PixelRestApi
  PixelRestApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref PixelRestApiDeployment
      Description: Pixel tracker lambda API gateway integration
      RestApiId: !Ref PixelRestApi
      StageName: prod
  PixelRestApiLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref PixelLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PixelRestApi}/${PixelRestApiStage}/*"
  PixelRestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DomainName]
  PixelRestApiBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      DomainName: !Ref PixelRestApiDomainName
      RestApiId: !Ref PixelRestApi
      Stage: prod
  PixelRestApiDomainNameRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      Comment: Record sets for pixel tracker server API
      HostedZoneName: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, HostedZoneName]
      RecordSets:
        - Type: AAAA
          Name: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DomainName]
          AliasTarget:
            DNSName: !GetAtt PixelRestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: A
          Name: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DomainName]
          AliasTarget:
            DNSName: !GetAtt PixelRestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
  ProductionRedirectRestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Condition: CreateProductionResources
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: prx.org
  ProductionRedirectRestApiBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Condition: CreateProductionResources
    Properties:
      DomainName: !Ref ProductionRedirectRestApiDomainName
      RestApiId: !Ref PixelRestApi
      Stage: prod
  ProductionRestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Condition: CreateProductionResources
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: www.prx.org
  ProductionRestApiBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Condition: CreateProductionResources
    Properties:
      DomainName: !Ref ProductionRestApiDomainName
      RestApiId: !Ref PixelRestApi
      Stage: prod
  ApiGateway5XXAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[pixel.prx.org][${EnvironmentType}] 5XXErrors"
      AlarmActions:
        - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      InsufficientDataActions:
        - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      OKActions:
        - !If [CreateProductionResources, !Ref OpsErrorMessagesSnsTopicArn, !Ref OpsWarnMessagesSnsTopicArn]
      AlarmDescription: >
        Too many 500 errors from the pixel tracker
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "${AWS::StackName} API"
      EvaluationPeriods: 3
      MetricName: 5xxError
      Namespace: AWS/ApiGateway
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
Outputs:
  ApiDomainName:
    Description: The custom API domain name
    Value: !Ref PixelRestApiDomainName
  DistributionDomainName:
    Description: The Amazon CloudFront distribution domain name that's mapped to the custom domain name
    Value: !GetAtt PixelRestApiDomainName.DistributionDomainName
