# stacks/serverless/upload.prx.org.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: File upload Lambda function
Conditions:
  CreateStagingResources: !Equals [!Ref EnvironmentType, Staging]
  CreateProductionResources: !Equals [!Ref EnvironmentType, Production]
Parameters:
  OpsErrorMessagesSnsTopicArn:
    Type: String
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsFatalMessagesSnsTopicArn:
    Type: String
  CodeS3Bucket:
    Type: String
  CodeS3ObjectVersion:
    Type: String
  PRXUploadAccessKey:
    Type: String
  EnvironmentType:
    Type: String
  WildcardCertificateArn:
    Type: String
Resources:
  UploadHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
        AllowMethods:
          - GET
          - OPTIONS
        AllowOrigins:
          - "*"
      Description: !Sub ${EnvironmentType} S3 upload signing API
      Tags:
        Project: upload.radiotopia.fm
        Environment: !Ref EnvironmentType
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
  UploadHttpLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: lambda/PRX-upload.prx.org.zip
        Version: !Ref CodeS3ObjectVersion
      Description: File upload Lambda function
      Events:
        ApiRequest:
          Properties:
            ApiId: !Ref UploadHttpApi
            Method: get
            Path: /signature
          Type: HttpApi
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs14.x
      Tags:
        Project: upload.prx.org
        Environment: !Ref EnvironmentType
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
      Timeout: 5
  UploadHttpLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UploadHttpLambdaFunction}
      RetentionInDays: 60
  UploadHttpSigningUser:
    Type: AWS::IAM::User
    Properties:
      Tags:
        - Key: Project
          Value: upload.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: prx:cloudformation:stack-name
          Value: !Ref AWS::StackName
        - Key: prx:cloudformation:stack-id
          Value: !Ref AWS::StackId

  #
  #
  #
  #
  #
  #
  #
  #
  #

  # API Gateway
  UploadRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Ref AWS::StackName
      Description: !Sub "${EnvironmentType} API used by PRX Upload Lambda"
      Tags:
        - Key: Project
          Value: upload.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  UploadRestApiSignatureResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref UploadRestApi
      ParentId: !GetAtt UploadRestApi.RootResourceId
      PathPart: "signature"
  UploadRestApiSignatureMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref UploadRestApi
      ResourceId: !Ref UploadRestApiSignatureResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadLambdaFunction.Arn}/invocations
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
            StatusCode: "200"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
  UploadRestApiOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref UploadRestApi
      ResourceId: !Ref UploadRestApiSignatureResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
            StatusCode: "200"
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
  UploadRestApiDeployment02:
    DependsOn:
      - UploadRestApiSignatureMethod
      - UploadRestApiOptionsMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref UploadRestApi
  UploadRestApiStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: !If [CreateProductionResources, prod, stag]
      Description: !Sub "${EnvironmentType} stage for upload lambda gateway integration"
      RestApiId: !Ref UploadRestApi
      DeploymentId: !Ref UploadRestApiDeployment02
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          MetricsEnabled: true
          ResourcePath: "/*"
      TracingEnabled: true
  # Custom Domain
  UploadRestApiDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      CertificateArn: !Ref WildcardCertificateArn
      DomainName: !Join ["", ["upload-", !Ref UploadRestApi, "-", !Ref "AWS::Region", !If [CreateStagingResources, ".staging", ""], ".prx.tech"]]
      Tags:
        - Key: Project
          Value: upload.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  UploadRestApiBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      DomainName: !Ref UploadRestApiDomainName
      RestApiId: !Ref UploadRestApi
      Stage: !If [CreateProductionResources, prod, stag]
  UploadRestApiDomainNameRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      Comment: Record sets for upload signing API
      HostedZoneName: prx.tech.
      RecordSets:
        - Type: AAAA
          Name: !Join ["", ["upload-", !Ref UploadRestApi, "-", !Ref "AWS::Region", !If [CreateStagingResources, ".staging", ""], ".prx.tech"]]
          AliasTarget:
            DNSName: !GetAtt UploadRestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: A
          Name: !Join ["", ["upload-", !Ref UploadRestApi, "-", !Ref "AWS::Region", !If [CreateStagingResources, ".staging", ""], ".prx.tech"]]
          AliasTarget:
            DNSName: !GetAtt UploadRestApiDomainName.DistributionDomainName
            HostedZoneId: Z2FDTNDATAQYW2
  # Upload signing
  UploadLambdaIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
      Tags:
        - Key: Project
          Value: upload.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  UploadLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: lambda/PRX-upload.prx.org.zip
        S3ObjectVersion: !Ref CodeS3ObjectVersion
      Description: File upload Lambda function
      Environment:
        Variables:
          ACCESS_KEY: !Ref PRXUploadAccessKey
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt UploadLambdaIamRole.Arn
      Runtime: nodejs12.x
      Tags:
        - Key: Project
          Value: upload.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 5
  UploadRestApiLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref UploadLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UploadRestApi}/${UploadRestApiStage}/*"
  UploadLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UploadLambdaFunction}
      RetentionInDays: 60
  # Lambda Alarms
  UploadLambdaElevatedErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda] Elevated error volume"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: Signing function has encountered an invocation error
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadLambdaFunction
  UploadLambdaDangerousErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda] Dangerous error volume"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: Signing function has encountered several invocation errors
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 2
      EvaluationPeriods: 10
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadLambdaFunction
  UploadLambdaElevatedThrottleAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda] Elevated invocation throttling"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: Signing function invocations are being throttled
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadLambdaFunction
  UploadLambdaElevatedMaxDurationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda] Elevated maximum duration"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: Several signing function invocations were unusually slow
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 2
      EvaluationPeriods: 3
      MetricName: Duration
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 225
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadLambdaFunction
  UploadLambdaElevatedVolumeAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda] Elevated invocation volume"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: The number of signing function invocations has been unusually high for
        several periods
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 2
      EvaluationPeriods: 3
      MetricName: Invocations
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 100
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref UploadLambdaFunction
  UploadLambdaDangerousErrorRateAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda] Dangerous error rate"
      AlarmActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      OKActions:
        - !Ref OpsErrorMessagesSnsTopicArn
      AlarmDescription: Short-term error rate has reached a dangerous level
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 2
      EvaluationPeriods: 3
      Metrics:
        - Id: errors
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UploadLambdaFunction
              MetricName: Errors
              Namespace: AWS/Lambda
            Period: 120
            Stat: Sum
          ReturnData: false
        - Id: invocations
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UploadLambdaFunction
              MetricName: Invocations
              Namespace: AWS/Lambda
            Period: 120
            Stat: Sum
          ReturnData: false
        - Id: error_rate
          Expression: "errors / invocations"
          ReturnData: true
      Threshold: 0.3
      TreatMissingData: notBreaching
  UploadLambdaCriticalErrorRateAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: CreateProductionResources
    Properties:
      ActionsEnabled: true
      AlarmName: "[Upload][Lambda] Critical error rate"
      AlarmActions:
        - !Ref OpsFatalMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsFatalMessagesSnsTopicArn
      OKActions:
        - !Ref OpsFatalMessagesSnsTopicArn
      AlarmDescription: Short-term error rate has reached a critical level
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Metrics:
        - Id: errors
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UploadLambdaFunction
              MetricName: Errors
              Namespace: AWS/Lambda
            Period: 60
            Stat: Sum
          ReturnData: false
        - Id: invocations
          MetricStat:
            Metric:
              Dimensions:
                - Name: FunctionName
                  Value: !Ref UploadLambdaFunction
              MetricName: Invocations
              Namespace: AWS/Lambda
            Period: 60
            Stat: Sum
          ReturnData: false
        - Id: error_rate
          Expression: "errors / invocations"
          ReturnData: true
      Threshold: 0.6
      TreatMissingData: notBreaching
Outputs:
  ApiDomainName:
    Description: The custom API domain name
    Value: !Ref UploadRestApiDomainName
  DistributionDomainName:
    Description: >
      The Amazon CloudFront distribution domain name that's mapped to the
      custom domain name
    Value: !GetAtt UploadRestApiDomainName.DistributionDomainName
