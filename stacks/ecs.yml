# NOTE EC2 Key Pairs cannot be created by CloudFormation templates, and are
# region specific, so you need to create them before launching a stack, and
# pass the name in as a parameter
# TODO ASG sizing should get handled as more explicit parameters, so that when
# an update occurs, the real (current) size of the group can be rolled over,
# rather than it resetting to a baked-in value
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates an ESC cluster and an associated Auto Scaling group into which
  Docker applications can be deployed
Parameters:
  KeyPairName:
    Description: >
     The EC2 key pair used for instances in the Auto Scaling
     group (region-specific)
    Type: "AWS::EC2::KeyPair::KeyName"
  EnvironmentType:
    Description: >
      The kind of environment this cluster is being used for (eg
      Production, Staging, etc)
    Type: String
  VPC:
    Type: "AWS::EC2::VPC::Id"
  VPCSubnet1:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet2:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet1AZ:
    Type: "AWS::EC2::AvailabilityZone::Name"
  VPCSubnet2AZ:
    Type: "AWS::EC2::AvailabilityZone::Name"
  OpsDebugMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  SecretsBase:
    Type: String
  SecretsKey:
    Type: String
Mappings:
  InstanceTypeMap:
    Staging:
      InstanceType: t2.micro
    Production:
      InstanceType: t2.small
  ASGSizingMap:
    Testing:
      MinSize: "1"
      DefaultDesiredCapacity: "1"
      WarningThreshold: "2"
      MaxSize: "3"
    Staging:
      MinSize: "1"
      DefaultDesiredCapacity: "1"
      WarningThreshold: "1"
      MaxSize: "1"
    Production:
      MinSize: "4"
      DefaultDesiredCapacity: "8"
      WarningThreshold: "100"
      MaxSize: "128"
  RegionMap:
    # AMI's as of 2016-12-19
    # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    us-east-1:
      ImageId: ami-b2df2ca4
    us-east-2:
      ImageId: ami-832b0ee6
    us-west-1:
      ImageId: ami-dd104dbd
    us-west-2:
      ImageId: ami-022b9262
    eu-west-1:
      ImageId: ami-a7f2acc1
    eu-west-2:
      ImageId: ami-3fb6bc5b
    eu-central-1:
      ImageId: ami-ec2be583
    ap-northeast-1:
      ImageId: ami-c393d6a4
    ap-southeast-1:
      ImageId: ami-a88530cb
    ap-southeast-2:
      ImageId: ami-8af8ffe9
    ca-central-1:
      ImageId: ami-ead5688e
Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
  ECSServiceIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - "sts:AssumeRole"
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
  ECSServiceAutoscaleIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com # TODO Docs don't seem to think this is necessary
                # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
            Action:
              - "sts:AssumeRole"
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        # TODO This inline policy may not be necessary
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-auto-scaling.html
        # Docs include actions that the managed policy doesn't
        - PolicyName: EC2ContainerServiceAutoscaleAdditionalPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
  ECSInstanceIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Sub key-${SecretsBase}-secrets-instance-decrypt-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - Sub! arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${SecretsKey}
        - PolicyName: !Sub key-${SecretsBase}-secrets-instance-access-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${SecretsBase}-secrets/*
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
  ECSInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref ECSInstanceIAMRole
  ECSInstanceWebTrafficSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable web traffic on cluster instances
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} ECS instances web
  ECSInstanceSSHSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH traffic on cluster instances
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} ECS instances SSH
  ECSInstanceReturnTrafficSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable return traffic on cluster instances
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 1024
          ToPort: 65535
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} ECS instances return traffic
  ECSInstanceOutboundSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable outbound traffic on cluster instances
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} ECS instances outbound
  ECSClusterASGLaunchConfiguration:
    # TODO Finish config
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSClusterASGLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ECSClusterASGLaunchConfiguration --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", ImageId]
      IamInstanceProfile: !Ref ECSInstanceProfile
      InstanceType: !FindInMap [InstanceTypeMap, !Ref EnvironmentType, InstanceType]
      InstanceMonitoring: false
      SecurityGroups:
        - !Ref ECSInstanceWebTrafficSecurityGroup
        - !Ref ECSInstanceSSHSecurityGroup
        - !Ref ECSInstanceReturnTrafficSecurityGroup
        - !Ref ECSInstanceOutboundSecurityGroup
      KeyName: !Ref KeyPairName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ECSClusterASGLaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSClusterASG --region ${AWS::Region}
  ECSClusterASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        - !Ref VPCSubnet1AZ
        - !Ref VPCSubnet2AZ
      Cooldown: "240"
      DesiredCapacity: !FindInMap [ASGSizingMap, !Ref EnvironmentType, DefaultDesiredCapacity]
      HealthCheckGracePeriod: 512
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref ECSClusterASGLaunchConfiguration
      MaxSize: !FindInMap [ASGSizingMap, !Ref EnvironmentType, MaxSize]
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: !FindInMap [ASGSizingMap, !Ref EnvironmentType, MinSize]
      NotificationConfigurations:
        - TopicARN: !Ref OpsDebugMessagesSnsTopicArn
          NotificationTypes:
            - "autoscaling:EC2_INSTANCE_LAUNCH"
            - "autoscaling:EC2_INSTANCE_TERMINATE"
            - "autoscaling:TEST_NOTIFICATION"
        - TopicARN: !Ref OpsErrorMessagesSnsTopicArn
          NotificationTypes:
            - "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
            - "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
      Tags:
        - Key: Project
          Value: platform.prx.org
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentType
          PropagateAtLaunch: true
        - Key: Name
          Value: !Ref ECSCluster
          PropagateAtLaunch: true
      #  TerminationPolicies:
        # - String
      VPCZoneIdentifier:
        - !Ref VPCSubnet1
        - !Ref VPCSubnet2
Outputs:
  ECSCluster:
    Description: >
      The resource name of the ECS cluster (eg MyStack-MyCluster-NT5EUXTN176T)
    Value: !Ref ECSCluster
  ECSServiceAutoscaleIAMRoleArn:
    Description: >
      The ARN of the IAM role used for service auto scaling
    Value: !GetAtt ECSServiceAutoscaleIAMRole.Arn
  ECSServiceIAMRole:
    Description: >
      The resource name of the IAM role used by ECS services
    Value: !Ref ECSServiceIAMRole
