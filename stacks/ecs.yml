# stacks/ecs.yml
# NOTE EC2 Key Pairs cannot be created by CloudFormation templates, and are
# region specific, so you need to create them before launching a stack, and
# pass the name in as a parameter
# TODO ASG sizing should get handled as more explicit parameters, so that when
# an update occurs, the real (current) size of the group can be rolled over,
# rather than it resetting to a baked-in value
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates an ESC cluster and an associated Auto Scaling group into which
  Docker applications can be deployed
Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
Parameters:
  InfrastructureStorageStackName:
    Type: String
  NotificationsStackName:
    Type: String
  KeyPairName:
    Description: >
     The EC2 key pair used for instances in the Auto Scaling
     group (region-specific)
    Type: "AWS::EC2::KeyPair::KeyName"
  EnvironmentType:
    Description: >
      The kind of environment this cluster is being used for (eg
      Production, Staging, etc)
    Type: String
  NewRelicLicenseKey:
    Description: An optional New Relic license key for the Infrastructure agent
    Type: String
    Default: ""
  VPC:
    Type: "AWS::EC2::VPC::Id"
  VPCSubnet1:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet2:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet3:
    Type: "AWS::EC2::Subnet::Id"
  VPCSubnet1AZ:
    Type: "AWS::EC2::AvailabilityZone::Name"
  VPCSubnet2AZ:
    Type: "AWS::EC2::AvailabilityZone::Name"
  VPCSubnet3AZ:
    Type: "AWS::EC2::AvailabilityZone::Name"
  OpsDebugMessagesSnsTopicArn:
    Type: String
  OpsWarnMessagesSnsTopicArn:
    Type: String
  OpsErrorMessagesSnsTopicArn:
    Type: String
  SlackMessageRelaySnsTopicArn:
    Type: String
  SecretsInstanceDecryptPolicyArn:
    Type: String
  SecretsInstanceAccessPolicyArn:
    Type: String
Mappings:
  EnvironmentTypeMap:
    Testing:
      InstanceType: t2.micro
      InstanceStorage: 22
      AmiName: "amzn-ami-2018.03.20191114-amazon-ecs-optimized"
      MinSize: "1"
      DefaultDesiredCapacity: "1"
      WarningThreshold: "2"
      MaxSize: "3"
    Staging:
      InstanceType: t2.small
      InstanceStorage: 22
      AmiName: "amzn-ami-2018.03.20191114-amazon-ecs-optimized"
      MinSize: "2"
      DefaultDesiredCapacity: "5"
      WarningThreshold: "9"
      MaxSize: "20"
    Production:
      InstanceType: t2.medium
      InstanceStorage: 72
      AmiName: "amzn-ami-2018.03.20191114-amazon-ecs-optimized"
      MinSize: "4"
      DefaultDesiredCapacity: "5"
      WarningThreshold: "35"
      MaxSize: "40"
Resources:
  # AMI Lookup Custom Resource
  LambdaExecutionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: XrayTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource:
                  - "*"
        - PolicyName: EC2Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeImages"
                Resource:
                  - "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSAmiLookupFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: utility/ecs-ami-lookup.zip
      Description: Finds AMI ID for ECS optimized images in a given region
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionIAMRole.Arn
      Runtime: nodejs8.10
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 90
  ECSAmiInfo:
    Type: "Custom::EcsAmiLookup"
    Properties:
      ServiceToken: !GetAtt ECSAmiLookupFunction.Arn
      Region: !Ref AWS::Region
      AmiName: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, AmiName]
  # ECS Cluster and ASG
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSServiceIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - "sts:AssumeRole"
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSServiceAutoscaleIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com # TODO Docs don't seem to think this is necessary
                # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
            Action:
              - "sts:AssumeRole"
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        # TODO This inline policy may not be necessary
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-auto-scaling.html
        # Docs include actions that the managed policy doesn't
        - PolicyName: EC2ContainerServiceAutoscaleAdditionalPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSInstanceIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: DockerDiskUsagePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:DescribeTags"
                Resource: "*"
        - PolicyName: ModifyCreditSpecificationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:ModifyInstanceCreditSpecification
                  - ec2:DescribeInstanceCreditSpecifications
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        - !Ref SecretsInstanceDecryptPolicyArn
        - !Ref SecretsInstanceAccessPolicyArn
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref ECSInstanceIAMRole
  ECSInstanceWebTrafficSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable web traffic on cluster instances
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-ECS-instances-web
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSInstanceSSHSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH traffic on cluster instances
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-ECS-instances-SSH
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSInstanceReturnTrafficSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable return traffic on cluster instances
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: udp
          FromPort: 123
          ToPort: 123
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 1024
          ToPort: 65535
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-ECS-instances-inbound
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSInstanceOutboundSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable outbound traffic on cluster instances
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Name
          Value: !Sub Platform-${EnvironmentType}-ECS-instances-outbound
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSClusterASGLaunchConfiguration:
    # TODO Finish config
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              aws-cli: []
              bc: []
              jq: []
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSClusterASGLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ECSClusterASGLaunchConfiguration --region ${AWS::Region}
                runas=root
            "/root/cwdiskusage.sh":
              content: |
                #!/bin/bash
                AWSREGION=`curl -ss http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region`
                AWSINSTANCEID=`curl -ss http://169.254.169.254/latest/meta-data/instance-id`
                AWSASG=`aws ec2 describe-tags --region=$AWSREGION --filters Name=resource-type,Values=instance,Name=resource-id,Values=$AWSINSTANCEID | jq -r '.Tags[] | select(.Key == "aws:autoscaling:groupName") | .Value'`
                function convertUnits {
                  if [ "$1" == "b" ] ; then echo $2;
                  elif [ "$1" == "kb" ] ; then echo "$2*1000" | bc | awk '{print $1}' FS=".";
                  elif [ "$1" == "mb" ] ; then echo "$2*1000*1000" | bc | awk '{print $1}' FS=".";
                  elif [ "$1" == "gb" ] ; then echo "$2*1000*1000*1000" | bc | awk '{print $1}' FS=".";
                  elif [ "$1" == "tb" ] ; then echo "$2*1000*1000*1000*1000" | bc | awk '{print $1}' FS=".";
                  else echo "Unknown unit $1"; exit 1; fi
                }
                function getMetric {
                  if [ "$1" == "Data" ] || [ "$1" == "Metadata" ] ; then echo $(docker info | grep "$1 Space Available" | sed 's/\([0-9]\+\)\([a-zA-Z]\+\)/\1 \2/' | awk '{print tolower($5), $4}');
                  else echo "Metric must be either 'Data' or 'Metadata'"; exit 1; fi
                }
                data=$(convertUnits `getMetric Data`)
                aws cloudwatch put-metric-data --namespace EC2 --dimensions InstanceId=$AWSINSTANCEID --value $data --unit Bytes --metric-name DockerAvailableSpace --region $AWSREGION
                aws cloudwatch put-metric-data --namespace EC2 --dimensions AutoScalingGroup=$AWSASG --value $data --unit Bytes --metric-name DockerAvailableSpace --region $AWSREGION
                data=$(convertUnits `getMetric Metadata`)
                aws cloudwatch put-metric-data --namespace EC2 --dimensions InstanceId=$AWSINSTANCEID --value $data --unit Bytes --metric-name DockerMetadataSpace --region $AWSREGION
                aws cloudwatch put-metric-data --namespace EC2 --dimensions AutoScalingGroup=$AWSASG --value $data --unit Bytes --metric-name DockerMetadataSpace --region $AWSREGION
              mode: "000755"
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=10m >> /etc/ecs/ecs.config
            02_cloudwatch_disk_usage:
              # monitor actual thin pool usage
              command: "(crontab -uroot -l 2> /dev/null; echo '* * * * * /root/cwdiskusage.sh') | crontab -u root -"
            03_fstrim_reclaim_disk:
              # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/CannotCreateContainerError.html
              command: "(crontab -uroot -l 2> /dev/null; echo '*/5 * * * * docker ps -qa | xargs docker inspect --format=\"{{ .State.Pid }}\" | xargs -IZ /sbin/fstrim /proc/Z/root/') | crontab -u root -"
            04_set_t2_unlimited:
              command: |
                #!/bin/bash
                AWSREGION=`curl -ss http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region`
                AWSINSTANCEID=`curl -ss http://169.254.169.254/latest/meta-data/instance-id`
                AWSINSTANCETYPE=`curl -ss http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .instanceType`
                if [[ "$AWSINSTANCETYPE" =~ ^t2.* ]]; then
                  JSON="[{\"InstanceId\": \"${AWSINSTANCEID}\",\"CpuCredits\": \"unlimited\"}]"
                  aws --region=$AWSREGION ec2 modify-instance-credit-specification --instance-credit-specification "${JSON}"
                fi
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !GetAtt ECSAmiInfo.Id
      IamInstanceProfile: !Ref ECSInstanceProfile
      InstanceType: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, InstanceType]
      InstanceMonitoring: false
      SecurityGroups:
        - !Ref ECSInstanceWebTrafficSecurityGroup
        - !Ref ECSInstanceSSHSecurityGroup
        - !Ref ECSInstanceReturnTrafficSecurityGroup
        - !Ref ECSInstanceOutboundSecurityGroup
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 8
            VolumeType: "gp2"
        - DeviceName: "/dev/xvdcz"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, InstanceStorage]
            VolumeType: "gp2"
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              MIME-Version: 1.0
              --==BOUNDARY==
              Content-Type: text/cloud-boothook; charset="us-ascii"
              cloud-init-per once docker_options echo 'OPTIONS="${!OPTIONS} --storage-opt dm.basesize=${BaseSize}G"' >> /etc/sysconfig/docker
              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              yum install -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ECSClusterASGLaunchConfiguration --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSClusterASG --region ${AWS::Region}
              --==BOUNDARY==--
            - { BaseSize: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, InstanceStorage] }
  ECSClusterASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        - !Ref VPCSubnet1AZ
        - !Ref VPCSubnet2AZ
        - !Ref VPCSubnet3AZ
      Cooldown: "240"
      # DesiredCapacity: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, DefaultDesiredCapacity]
      HealthCheckGracePeriod: 512
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref ECSClusterASGLaunchConfiguration
      MaxSize: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, MaxSize]
      MetricsCollection:
        - Granularity: 1Minute
      MinSize: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, MinSize]
      NotificationConfigurations:
        - TopicARN:
            Fn::ImportValue:
                !Sub ${NotificationsStackName}-ASGNotificationSnsTopic
          NotificationTypes:
            # TODO The error notifications should be handled differently by the
            # lambda
            - "autoscaling:EC2_INSTANCE_LAUNCH"
            - "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
            - "autoscaling:EC2_INSTANCE_TERMINATE"
            - "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            - "autoscaling:TEST_NOTIFICATION"
        - TopicARN: !Ref ECSDrainSNSTopic
          NotificationTypes:
            - "autoscaling:EC2_INSTANCE_LAUNCH"
            - "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
            - "autoscaling:EC2_INSTANCE_TERMINATE"
            - "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
      Tags:
        - Key: Project
          Value: platform.prx.org
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentType
          PropagateAtLaunch: true
        - Key: Name
          Value: !Ref ECSCluster
          PropagateAtLaunch: true
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
          PropagateAtLaunch: true
      #  TerminationPolicies:
        # - String
      VPCZoneIdentifier:
        - !Ref VPCSubnet1
        - !Ref VPCSubnet2
        - !Ref VPCSubnet3
  # ASG Alarms
  ECSClusterASGNetworkOutAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsProduction
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[${VPC}][ASG][NetworkOut] Unusually high traffic"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >
        ECS Cluster ASG outbound network traffic is unusually high
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: NetworkOut
      Namespace: AWS/EC2
      Period: 300
      Statistic: Sum
      Threshold: 25000000000
      TreatMissingData: missing
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ECSClusterASG
  ECSClusterASGNetworkInAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsProduction
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "[${VPC}][ASG][NetworkIn] Unusually high traffic"
      AlarmActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      InsufficientDataActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      OKActions:
        - !Ref OpsWarnMessagesSnsTopicArn
      AlarmDescription: >
        ECS Cluster ASG inbound network traffic is unusually high
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: NetworkIn
      Namespace: AWS/EC2
      Period: 300
      Statistic: Sum
      Threshold: 25000000000
      TreatMissingData: missing
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ECSClusterASG
  # ECS task draining
  ECSDrainSNSTopic:
    Type: "AWS::SNS::Topic"
  ECSDrainFunctionSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt ECSDrainFunction.Arn
      Protocol: lambda
      TopicArn: !Ref ECSDrainSNSTopic
  ECSDrainSNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSDrainLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - PolicyName: "drain-lambda-inline"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeHosts
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeTasks
                  - ecs:ListContainerInstances
                  - ecs:ListTasks
                  - sns:ListSubscriptions
              - Effect: "Allow"
                Resource: "*" # TODO: how to get an ASG ARN?
                Action:
                  - autoscaling:CompleteLifecycleAction
              - Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSCluster}"
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/*"
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container/*"
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*"
                Action:
                  - ecs:SubmitContainerStateChange
                  - ecs:SubmitTaskStateChange
                  - ecs:UpdateContainerInstancesState
              - Effect: "Allow"
                Resource: !Ref ECSDrainSNSTopic
                Action:
                  - sns:Publish
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"
      Tags:
        - Key: Project
          Value: platform.prx.org
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ECSDrainHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    DependsOn: "ECSDrainSNSTopic"
    Properties:
      AutoScalingGroupName: !Ref ECSClusterASG
      DefaultResult: "ABANDON"
      HeartbeatTimeout: 900
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      NotificationTargetARN: !Ref ECSDrainSNSTopic
      RoleARN: !GetAtt ECSDrainSNSRole.Arn
  ECSDrainLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref ECSDrainFunction
      Action: lambda:InvokeFunction
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref ECSDrainSNSTopic
  ECSDrainFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: utility/ecs-drain-tasks.zip
      Description: Drain tasks off ECS instances before allowing them to terminate
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt ECSDrainLambdaRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 300
  # Autoscaling
  ASGSizerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ASGSizerLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - ec2:DescribeInstances
                  - ec2:TerminateInstances
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:ListContainerInstances
                  - ecs:ListServices
              - Effect: "Allow"
                Resource: "*" # TODO: how to get an ASG ARN?
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:SetDesiredCapacity
        - PolicyName: SnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref SlackMessageRelaySnsTopicArn
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ASGSizerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${InfrastructureStorageStackName}-InfrastructureSupportBucket
        S3Key: utility/ecs-asg-sizer.zip
      Description: Make an ASG the perfect size for an ECS cluster
      Environment:
        Variables:
          ASG_NAME: !Ref ECSClusterASG
          ECS_CLUSTER: !Ref ECSCluster
          SLACK_SNS_TOPIC: !Ref SlackMessageRelaySnsTopicArn
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt ASGSizerRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      Timeout: 30
  ASGSizerTriggerIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt ASGSizerFunction.Arn
      Tags:
        - Key: Project
          Value: Infrastructure
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  ASGSizerInvokeFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ASGSizerFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ASGSizerFunctionEventTrigger.Arn
  ASGSizerFunctionEventTrigger:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        Runs the ECS ASG sizer periodically
      RoleArn: !GetAtt ASGSizerTriggerIAMRole.Arn
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt ASGSizerFunction.Arn
          Id: !Sub "${EnvironmentType}-ECS-ASG-Sizing"
Outputs:
  ECSCluster:
    Description: >
      The resource name of the ECS cluster (eg MyStack-MyCluster-NT5EUXTN176T)
    Value: !Ref ECSCluster
  ECSClusterArn:
    Description: >
      The Arn of the ECS cluster
    Value: !GetAtt ECSCluster.Arn
  ECSServiceAutoscaleIAMRoleArn:
    Description: >
      The ARN of the IAM role used for service auto scaling
    Value: !GetAtt ECSServiceAutoscaleIAMRole.Arn
  ECSServiceIAMRole:
    Description: >
      The resource name of the IAM role used by ECS services
    Value: !Ref ECSServiceIAMRole
  ECSServiceIAMRoleArn:
    Description: >
      The Arn of the IAM role used by ECS services
    Value: !GetAtt ECSServiceIAMRole.Arn
