# stacks/root.yml
# Generally this template is used to launch stacks from the bootstrapping
# CodePipeline. Primarily is is simply a wrapper around individial app- and
# service-specific templates, which get nested into this template and are
# launched when this one is. The CodePiple also passes in a template
# configuration file, which includes parameter values for this and all nested
# templates. This root template MUST define all parameters that are included in
# the config file. It can then pass along select values to nested stacks that
# require them.
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Launches stacks for a number of applications and services that are maintained
  in separate templates.
Conditions:
  IsUsEast1: !Equals [!Ref "AWS::Region", us-east-1]
Parameters:
  AwsOrganizationId:
    Type: String
  AsgKeyPairName:
    Description: >
      The EC2 key pair used for instances in the Auto Scaling
      group (region-specific)
    Type: "AWS::EC2::KeyPair::KeyName"
  EcrRegion:
    Type: String
  EnvironmentType:
    Type: String
    AllowedValues:
      - Staging
      - Production
  NewRelicLicenseKey:
    Type: String
    Default: ""
  # Application Specific
  MetricsEcrImageTag:
    Type: String
  MetricsSecretsVersion:
    Type: String
  JingleEcrImageTag:
    Type: String
  JingleSecretsVersion:
    Type: String
  CastleEcrImageTag:
    Type: String
  CastleSecretsVersion:
    Type: String
  CmsEcrImageTag:
    Type: String
  CmsSecretsVersion:
    Type: String
  CrierEcrImageTag:
    Type: String
  CrierSecretsVersion:
    Type: String
  DovetailEcrImageTag:
    Type: String
  DovetailSecretsVersion:
    Type: String
  ExchangeEcrImageTag:
    Type: String
  ExchangeSecretsVersion:
    Type: String
  FeederEcrImageTag:
    Type: String
  FeederSecretsVersion:
    Type: String
  IdEcrImageTag:
    Type: String
  IdSecretsVersion:
    Type: String
  PlayEcrImageTag:
    Type: String
  PlaySecretsVersion:
    Type: String
  PublishEcrImageTag:
    Type: String
  PublishSecretsVersion:
    Type: String
  FourohfourEcrImageTag:
    Type: String
  UploadLambdaCodeS3ObjectVersion:
    Type: String
  AnalyticsIngestLambdaCodeS3ObjectVersion:
    Type: String
  DovetailStitchLambdaCodeS3ObjectVersion:
    Type: String
  DovetailBytesLambdaCodeS3ObjectVersion:
    Type: String
  DovetailCountsLambdaCodeS3ObjectVersion:
    Type: String
  CmsAudioLambdaCodeS3ObjectVersion:
    Type: String
  CmsImageLambdaCodeS3ObjectVersion:
    Type: String
  ProxyPrxOrgCodeS3ObjectVersion:
    Type: String
  PRXUploadAccessKey:
    Type: String
  RadiotopiaRadioArchiveS3ObjectVersion:
    Type: String
  BetaPrxOrgArchiveS3ObjectVersion:
    Type: String
  # Parameter Overrides
  InfrastructureStorageStackName:
    Type: String
  NotificationsStackName:
    Type: String
  SecretsStackName:
    Type: String
  InfrastructureGitCommit:
    Type: String
  PipelineExecutionNonce:
    Type: String
Mappings:
  EnvironmentTypeMap:
    Testing:
      abbreviation: test
    Beta:
      abbreviation: beta
    Staging:
      abbreviation: stag
    Production:
      abbreviation: prod
  ECSReservationMap:
    Staging:
      BackendCpu: 128
      BackendMemory: 1000
      BackendMemoryReservation: 500
      FrontendCpu: 64
      FrontendMemory: 200
      DovetailCpu: 128
      DovetailMemory: 400
    Production:
      BackendCpu: 200
      BackendMemory: 2000
      BackendMemoryReservation: 1000
      FrontendCpu: 100
      FrontendMemory: 400
      DovetailCpu: 700
      DovetailMemory: 1000
  # Each app should be given a listener rule priority prefix between 10 and 49.
  # In nested stacks, listener rule priorities are created by combining the
  # prefix with either two (eg 01) or three (eg 765) more digits. Wildcard rules
  # should use two digits, and VPC-based domains should use three digits.
  #
  # Higher-traffic apps should be given a higher priority (lower number) to
  # reduce the number of rules evaluations needed for more common requests
  ALBListenerRulePriorityMap:
    Exchange:
      prefix: 13
    ExchangeApi:
      prefix: 14
    Cms:
      prefix: 15
    Play:
      prefix: 21
    Id:
      prefix: 24
    Publish:
      prefix: 28
    Castle:
      prefix: 35
    Metrics:
      prefix: 36
    Jingle:
      prefix: 38
    Crier:
      prefix: 42
    StripeProxy:
      prefix: 46
Resources:
  # Root stacks
  StaticSitesRootStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        InfrastructureStorageStackName: !Ref InfrastructureStorageStackName
        InfrastructureNotificationsStackName: !Ref NotificationsStackName
        TemplateUrlPrefix: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/static-sites/"]]
        EnvironmentType: !Ref EnvironmentType
        RadiotopiaRadioArchiveS3ObjectVersion: !Ref RadiotopiaRadioArchiveS3ObjectVersion
        BetaPrxOrgArchiveS3ObjectVersion: !Ref BetaPrxOrgArchiveS3ObjectVersion
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/static-sites/root.yml"]]
      TimeoutInMinutes: 5
  ServerlessRootStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        InfrastructureStorageStackName: !Ref InfrastructureStorageStackName
        InfrastructureNotificationsStackName: !Ref NotificationsStackName
        VPCSecurityGroup: !GetAtt VPCStack.Outputs.SecurityGroup
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        TemplateUrlPrefix: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/serverless/"]]
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        WildcardCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        PRXUploadAccessKey: !Ref PRXUploadAccessKey
        UploadLambdaCodeS3ObjectVersion: !Ref UploadLambdaCodeS3ObjectVersion
        DovetailBytesLambdaCodeS3ObjectVersion: !Ref DovetailBytesLambdaCodeS3ObjectVersion
        DovetailCountsLambdaCodeS3ObjectVersion: !Ref DovetailCountsLambdaCodeS3ObjectVersion
        CmsAudioLambdaCodeS3ObjectVersion: !Ref CmsAudioLambdaCodeS3ObjectVersion
        CmsImageLambdaCodeS3ObjectVersion: !Ref CmsImageLambdaCodeS3ObjectVersion
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/serverless/root.yml"]]
      TimeoutInMinutes: 5
  LegacySupportRootStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        InfrastructureStorageStackName: !Ref InfrastructureStorageStackName
        InfrastructureNotificationsStackName: !Ref NotificationsStackName
        TemplateUrlPrefix: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/legacy-support/"]]
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerStripeProxyPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, StripeProxy, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        EcrRegion: !Ref EcrRegion
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/legacy-support/root.yml"]]
      TimeoutInMinutes: 5
  ContainerAppsRootStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        InfrastructureNotificationsStackName: !Ref NotificationsStackName
        TemplateUrlPrefix: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/container-apps/"]]
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        EcrRegion: !Ref EcrRegion
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemory]
        ContainerMemoryReservation: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemoryReservation]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendCpu]
        # Exchange
        ExchangePlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Exchange, prefix]
        ExchangeApiPlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, ExchangeApi, prefix]
        ExchangeEcrImageTag: !Ref ExchangeEcrImageTag
        ExchangeSecretsVersion: !Ref ExchangeSecretsVersion
        # Cms
        CmsPlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Cms, prefix]
        CmsEcrImageTag: !Ref CmsEcrImageTag
        CmsSecretsVersion: !Ref CmsSecretsVersion
        # Jingle
        JinglePlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Jingle, prefix]
        JingleEcrImageTag: !Ref JingleEcrImageTag
        JingleSecretsVersion: !Ref JingleSecretsVersion
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/container-apps/root.yml"]]
      TimeoutInMinutes: 5
  # App and shared resource stacks
  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        EnvironmentType: !Ref EnvironmentType
        AwsOrganizationId: !Ref AwsOrganizationId
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/vpc.yml"]]
      TimeoutInMinutes: 5
  CertificateStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        VPC: !GetAtt VPCStack.Outputs.VPC
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/certificate.yml"]]
      TimeoutInMinutes: 5
  ECSClusterStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: VPCStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        InfrastructureStorageStackName: !Ref InfrastructureStorageStackName
        NotificationsStackName: !Ref NotificationsStackName
        KeyPairName: !Ref AsgKeyPairName
        EnvironmentType: !Ref EnvironmentType
        NewRelicLicenseKey: !Ref NewRelicLicenseKey
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        VPCSubnet1AZ: !GetAtt VPCStack.Outputs.Subnet1AvailabilityZone
        VPCSubnet2AZ: !GetAtt VPCStack.Outputs.Subnet2AvailabilityZone
        VPCSubnet3AZ: !GetAtt VPCStack.Outputs.Subnet3AvailabilityZone
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsWarnMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsWarnMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        SlackMessageRelaySnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-SlackMessageRelaySnsTopicArn"
        SecretsInstanceDecryptPolicyArn:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsInstanceDecryptPolicyArn"
        SecretsInstanceAccessPolicyArn:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsInstanceAccessPolicyArn"
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/ecs.yml"]]
      TimeoutInMinutes: 5
  LoadBalancersStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        VPCCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        OpsWarnMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsWarnMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/load-balancers.yml"]]
      TimeoutInMinutes: 5
  FourohfourStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      # NotificationARNs:
      #   - Fn::ImportValue:
      #       !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        PlatformALBDefaultTargetGroupArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBDefaultTargetGroupArn
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        EcrRegion: !Ref EcrRegion
        FourohfourEcrImageTag: !Ref FourohfourEcrImageTag
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, FrontendMemory]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, FrontendCpu]
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/fourohfour.prx.org.yml"]]
      TimeoutInMinutes: 5
  PublishStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Publish, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        PublishEcrImageTag: !Ref PublishEcrImageTag
        PublishSecretsVersion: !Ref PublishSecretsVersion
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, FrontendMemory]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, FrontendCpu]
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/publish.prx.org.yml"]]
      TimeoutInMinutes: 5
  CastleStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Castle, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        CastleEcrImageTag: !Ref CastleEcrImageTag
        CastleSecretsVersion: !Ref CastleSecretsVersion
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemory]
        ContainerMemoryReservation: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemoryReservation]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendCpu]
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/castle.prx.org.yml"]]
      TimeoutInMinutes: 5
  UploadLambdaStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        PRXUploadAccessKey: !Ref PRXUploadAccessKey
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        WildcardCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        CodeS3Bucket:
          Fn::ImportValue:
            !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket"
        CodeS3ObjectVersion: !Ref UploadLambdaCodeS3ObjectVersion
        LogGroupRetentionPolicyFunctionArn: "/prx/infrastructure/log-group-retention-policy-function-arn"
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/upload.prx.org.yml"]]
      TimeoutInMinutes: 5
  PlayStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Play, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        PlayEcrImageTag: !Ref PlayEcrImageTag
        PlaySecretsVersion: !Ref PlaySecretsVersion
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, FrontendMemory]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, FrontendCpu]
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/play.prx.org.yml"]]
      TimeoutInMinutes: 5
  CrierStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Crier, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        EcrRegion: !Ref EcrRegion
        EcrImageTag: !Ref CrierEcrImageTag
        SecretsVersion: !Ref CrierSecretsVersion
        AppName: "crier"
        CreateWorker: "true"
        ContainerPort: "3000"
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemory]
        ContainerMemoryReservation: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemoryReservation]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendCpu]
        HealthCheckPath: "/api/v1"
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/container-apps/web-application.yml"]]
      TimeoutInMinutes: 5
  FeederStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        VPCCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsWarnMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsWarnMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        EcrRegion: !Ref EcrRegion
        EcrImageTag: !Ref FeederEcrImageTag
        SecretsVersion: !Ref FeederSecretsVersion
        AppName: "feeder"
        CreateWorker: "true"
        DesiredWebsProduction: "6"
        DesiredWorkersProduction: "1"
        ContainerPort: "3000"
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemory]
        ContainerMemoryReservation: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemoryReservation]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendCpu]
        HealthCheckPath: "/api/v1"
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/web-alb-application.yml"]]
      TimeoutInMinutes: 5
  DovetailStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        VPCCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsWarnMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsWarnMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        InfrastructureStorageStackName: !Ref InfrastructureStorageStackName
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        PipelineExecutionNonce: !Ref PipelineExecutionNonce
        EcrRegion: !Ref EcrRegion
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        DovetailEcrImageTag: !Ref DovetailEcrImageTag
        DovetailSecretsVersion: !Ref DovetailSecretsVersion
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, DovetailMemory]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, DovetailCpu]
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/dovetail.prx.org.yml"]]
      TimeoutInMinutes: 5
  IdStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Id, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        EcrRegion: !Ref EcrRegion
        EcrImageTag: !Ref IdEcrImageTag
        SecretsVersion: !Ref IdSecretsVersion
        AppName: "id"
        CreateWorker: "false"
        ContainerPort: "3000"
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemory]
        ContainerMemoryReservation: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendMemoryReservation]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, BackendCpu]
        HealthCheckPath: "/api/v1/certs"
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/container-apps/web-application.yml"]]
      TimeoutInMinutes: 5
  MetricsStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Metrics, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsBaseRegion"
        MetricsEcrImageTag: !Ref MetricsEcrImageTag
        MetricsSecretsVersion: !Ref MetricsSecretsVersion
        ContainerMemory: !FindInMap [ECSReservationMap, !Ref EnvironmentType, FrontendMemory]
        ContainerCpu: !FindInMap [ECSReservationMap, !Ref EnvironmentType, FrontendCpu]
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/metrics.prx.org.yml"]]
      TimeoutInMinutes: 5
  AnalyticsIngestLambdaStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        OpsWarnMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsWarnMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        CodeS3Bucket:
          Fn::ImportValue:
            !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket"
        CodeS3ObjectVersion: !Ref AnalyticsIngestLambdaCodeS3ObjectVersion
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/analytics-ingest-lambda.yml"]]
      TimeoutInMinutes: 5
  DovetailStitchLambdaStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        OpsWarnMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsWarnMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        CodeS3Bucket:
          Fn::ImportValue:
            !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket"
        CodeS3ObjectVersion: !Ref DovetailStitchLambdaCodeS3ObjectVersion
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/dovetail-stitch-lambda.yml"]]
      TimeoutInMinutes: 5
  ProxyPrxOrgStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-CloudFormationNotificationSnsTopic"
      Parameters:
        OpsWarnMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsWarnMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        CodeS3Bucket:
          Fn::ImportValue:
            !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket"
        CodeS3ObjectVersion: !Ref ProxyPrxOrgCodeS3ObjectVersion
      Tags:
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/proxy.prx.org.yml"]]
      TimeoutInMinutes: 5
Outputs:
  VPCCertificateArn:
    Description: The ARN for the wildcard certificate for the VPC
    Value: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
  PlatformALBDNSName:
    Description: The DNS name for the platform application load balancer
    Value: !GetAtt LoadBalancersStack.Outputs.PlatformALBDNSName
  PlatformALBDualstackDNSName:
    Description: >
      The dualstack DNS name for the platform application load balancer
    Value: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
