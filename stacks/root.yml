# Generally this template is used to launch stacks from the bootstrapping
# CodePipeline. Primarily is is simply a wrapper around individial app- and
# service-specific templates, which get nested into this template and are
# launched when this one is. The CodePiple also passes in a template
# configuration file, which includes parameter values for this and all nested
# templates. This root template MUST define all parameters that are included in
# the config file. It can then pass along select values to nested stacks that
# require them.
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Launches stacks for a number of applications and services that are maintained
  in separate templates.
Parameters:
  NotificationsStackName:
    Type: String
  InfrastructureCodeBucket:
    Type: String
  EnvironmentType:
    Type: String
  InfrastructureGitCommit:
    Type: String
Resources:
  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue: !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      TemplateURL: !Sub "http://s3-${AWS::Region}.amazonaws.com/${InfrastructureCodeBucket}/sync/Infrastructure/${InfrastructureGitCommit}/stacks/vpc.yml"
      TimeoutInMinutes: "5"



#
#
# Mappings:
#   EnvironmentTypeAbbreviationMap:
#     Testing:
#       abbreviation: test
#     Beta:
#       abbreviation: beta
#     Staging:
#       abbreviation: stag
#     Production:
#       abbreviation: prod
#   ALBListenerRulePriorityMap:
#     Publish:
#       http: 1
#       https: 1
#     Audiogram:
#       http: 2
#       https: 2
#     Castle:
#       http: 3
#       https: 3
# Conditions:
#   CreateSingletonStacks: !And
#     - !Equals [!Ref RootEnvironmentType, Staging]
#     - !Equals [!Ref "AWS::Region", !Ref SingletonStackRegion]
# Parameters:
#   ASGKeyPairName:
#     Description: >
#       The EC2 key pair used for instances in the Auto Scaling
#       group (region-specific)
#     Type: "AWS::EC2::KeyPair::KeyName"
#   BootstrapStackName:
#     Description: The name of the bootstrapping stack in this AWS region
#     Type: String
#   RootEnvironmentType:
#     Description: A string indentifying the type of enviroment being launched
#     Type: String
#     AllowedValues:
#       - Staging
#       - Production
#   RootStackTemplateConfigBucket:
#     Description: >
#       S3 bucket that holds CloudFormation template configuration JSON files
#     Type: String
#   RootStackTemplateConfigArchive:
#     Description: >
#       The file name of the zip files that holds template configuration files
#     Type: String
#   SingletonStackRegion:
#     Description: >
#       The region that stacks considered singleton stacks should launch in
#     Type: String
#   OpsStatusMessagesSNSTopicArn:
#     Type: String
#   AutoScalingSlackWebhookURL:
#     Type: String
#   CloudWatchSlackWebhookURL:
#     Type: String
#   CloudFormationSlackWebhookURL:
#     Type: String
#   CodePipelineSlackWebhookURL:
#     Type: String
#   IkeSlackVerificationToken:
#     Type: String
#   IkeSlackSlackWebhookURL:
#     Type: String
#   GitHubOAuthToken:
#     Description: >
#       A GitHub access token that has permissions for any repositories being
#       accessed by these stacks
#     Type: String
#   ECRRegion:
#     Type: String
#   ##############################################################################
#   ## SHARED ENVs ###############################################################
#   ##############################################################################
#   EnvCmsHost:
#     Type: String
#   EnvPlayHost:
#     Type: String
#   EnvIdHost:
#     Type: String
#   EnvFeederHost:
#     Type: String
#   EnvMetaHost:
#     Type: String
#   EnvPrxHost:
#     Type: String
#   ##############################################################################
#   ##############################################################################
#   ##############################################################################
#   AudiogramECRImageTag:
#     Type: String
#   PublishECRImageTag:
#     Type: String
#   PublishCodecovToken:
#     Type: String
#   PublishEnvAuthClientId:
#     Type: String
#   PublishEnvAwsKey:
#     Type: String
#   PublishEnvAwsUrl:
#     Type: String
#   PublishEnvBucketFolder:
#     Type: String
#   PublishEnvBucketName:
#     Type: String
#   PublishEnvGaKey:
#     Type: String
#   PublishEnvNewRelicAppName:
#     Type: String
#   PublishEnvNewRelicLicenseKey:
#     Type: String
#   PublishEnvSignUrl:
#     Type: String
#   PublishEnvUseCloudfront:
#     Type: String
#   CmsAudioLambdaZipName:
#     Type: String
#   CmsImageLambdaZipName:
#     Type: String
#   UploadLambdaZipName:
#     Type: String
#   PRXUploadAccessKey:
#     Type: String
# Resources:
#   CodePipelineArtifactStore:
#     # The bucket used to store artifacts generated by CodePipeline actions.
#     # This bucket is to be used exclusively by AWS; don't use it to store any
#     # app, infrastructure, or user data.
#     Type: "AWS::S3::Bucket"
#     DeletionPolicy: Retain
#     Properties:
#       LifecycleConfiguration:
#         Rules:
#           - ExpirationInDays: 365
#             Status: Enabled
#       Tags:
#         - Key: Project
#           Value: Infrastructure
#   NotificationsStack:
#     Type: "AWS::CloudFormation::Stack"
#     Properties:
#       Parameters:
#         BootstrapStackName: !Ref BootstrapStackName
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         OpsStatusMessagesSNSTopicArn: !Ref OpsStatusMessagesSNSTopicArn
#         AutoScalingSlackWebhookURL: !Ref AutoScalingSlackWebhookURL
#         CloudWatchSlackWebhookURL: !Ref CloudWatchSlackWebhookURL
#         CloudFormationSlackWebhookURL: !Ref CloudFormationSlackWebhookURL
#         CodePipelineSlackWebhookURL: !Ref CodePipelineSlackWebhookURL
#         IkeSlackSlackWebhookURL: !Ref IkeSlackSlackWebhookURL
#         IkeSlackVerificationToken: !Ref IkeSlackVerificationToken
#         TemplateBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket"]]
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/notifications.yml"]]
#       TimeoutInMinutes: "2"
#   VPCStack:
#     Type: "AWS::CloudFormation::Stack"
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/vpc.yml"]]
#       TimeoutInMinutes: "5"
#   CertificateStack:
#     Type: "AWS::CloudFormation::Stack"
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         VPC: !GetAtt VPCStack.Outputs.VPC
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/certificate.yml"]]
#       TimeoutInMinutes: "5"
#   ECSClusterStack:
#     Type: "AWS::CloudFormation::Stack"
#     DependsOn: VPCStack
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         KeyPairName: !Ref ASGKeyPairName
#         EnvironmentType: !Ref RootEnvironmentType
#         VPC: !GetAtt VPCStack.Outputs.VPC
#         VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
#         VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
#         VPCSubnet1AZ: !GetAtt VPCStack.Outputs.Subnet1AvailabilityZone
#         VPCSubnet2AZ: !GetAtt VPCStack.Outputs.Subnet2AvailabilityZone
#         OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#         OpsErrorMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsErrorMessagesSNSTopicArn
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/ecs.yml"]]
#       TimeoutInMinutes: "5"
#   LoadBalancersStack:
#     Type: "AWS::CloudFormation::Stack"
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         VPC: !GetAtt VPCStack.Outputs.VPC
#         VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
#         VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
#         VPCCertificateArn: !GetAtt CertificateStack.Outputs.CertificateArn
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/load-balancers.yml"]]
#       TimeoutInMinutes: "5"
#   AudiogramPipelineStack:
#     Type: "AWS::CloudFormation::Stack"
#     Condition: CreateSingletonStacks
#     DependsOn: ECSClusterStack
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         CodePipelineArtifactStore: !Ref CodePipelineArtifactStore
#         GitHubOAuthToken: !Ref GitHubOAuthToken
#         RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
#         RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         ECRRegion: !Ref ECRRegion
#         AudiogramECRImageTag: !Ref AudiogramECRImageTag
#         OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/audiogram/pipeline.yml"]]
#       TimeoutInMinutes: "5"
#   AudiogramStack:
#     Type: "AWS::CloudFormation::Stack"
#     DependsOn: ECSClusterStack
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         VPC: !GetAtt VPCStack.Outputs.VPC
#         RootStackName: !Ref AWS::StackName
#         PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDNSName
#         PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
#         PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
#         PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
#         PlatformALBHTTPListenerPriority: !FindInMap [ALBListenerRulePriorityMap, Audiogram, http]
#         PlatformALBHTTPSListenerPriority: !FindInMap [ALBListenerRulePriorityMap, Audiogram, https]
#         ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
#         ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
#         ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         ECRRegion: !Ref ECRRegion
#         AudiogramECRImageTag: !Ref AudiogramECRImageTag
#         OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/audiogram/audiogram.yml"]]
#       TimeoutInMinutes: "5"
# ################################################################################
# #### CASTLE ####################################################################
# ################################################################################
#   CastlePipelineStack:
#     Type: "AWS::CloudFormation::Stack"
#     Condition: CreateSingletonStacks
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         CodePipelineArtifactStore: !Ref CodePipelineArtifactStore
#         OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#         GitHubOAuthToken: !Ref GitHubOAuthToken
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
#         RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
#         ECRRegion: !Ref ECRRegion
#         CastleECRImageTag: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleECRImageTag"]]
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/castle.prx.org/pipeline.yml"]]
#       TimeoutInMinutes: "5"
#   CastleStack:
#     Type: "AWS::CloudFormation::Stack"
#     DependsOn: ECSClusterStack
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         VPC: !GetAtt VPCStack.Outputs.VPC
#         RootStackName: !Ref AWS::StackName
#         OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#         ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
#         ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
#         ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
#         PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDNSName
#         PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
#         PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
#         PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
#         PlatformALBHTTPListenerPriority: !FindInMap [ALBListenerRulePriorityMap, Castle, http]
#         PlatformALBHTTPSListenerPriority: !FindInMap [ALBListenerRulePriorityMap, Castle, https]
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         ECRRegion: !Ref ECRRegion
#         CastleECRImageTag: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleECRImageTag"]]
#         CastleEnvBasicAuthPass: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBasicAuthPass"]]
#         CastleEnvBasicAuthUser: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBasicAuthUser"]]
#         CastleEnvBqClientEmail: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBqClientEmail"]]
#         CastleEnvBqDataset: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBqDataset"]]
#         CastleEnvBqDownloadsTable: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBqDownloadsTable"]]
#         CastleEnvBqImpressionsTable: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBqImpressionsTable"]]
#         CastleEnvBqPrivateKey1: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBqPrivateKey1"]]
#         CastleEnvBqPrivateKey2: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBqPrivateKey2"]]
#         CastleEnvBqProjectId: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvBqProjectId"]]
#         CastleEnvRedisHost: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvRedisHost"]]
#         CastleEnvRedisPoolSize: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvRedisPoolSize"]]
#         CastleEnvRedisPort: !Join ["", ["Fn::ImportValue": !Sub "${AWS::Region}-${RootEnvironmentType}-CastleEnvRedisPort"]]
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/castle.prx.org/castle.prx.org.yml"]]
#       TimeoutInMinutes: "5"
#   # CmsPipelineStack:
#   #   Type: "AWS::CloudFormation::Stack"
#   #   Condition: CreateSingletonStacks
#   #   DependsOn: ECSClusterStack
#   #   Properties:
#   #     NotificationARNs:
#   #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #     Parameters:
#   #       CodePipelineArtifactStore: !Ref CodePipelineArtifactStore
#   #       GitHubOAuthToken: !Ref GitHubOAuthToken
#   #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#   #       RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
#   #       RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
#   #       ECRRegion: !Ref ECRRegion
#   #       CmsECRRepositoryName: !Ref CmsECRRepositoryName
#   #       CmsECRImageTag: !Ref CmsECRImageTag
#   #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms.prx.org/pipeline.yml"]]
#   #     TimeoutInMinutes: "5"
#   # CmsStack:
#   #   Type: "AWS::CloudFormation::Stack"
#   #   DependsOn: ECSClusterStack
#   #   Properties:
#   #     NotificationARNs:
#   #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #     Parameters:
#   #       VPC: !GetAtt VPCStack.Outputs.VPC
#   #       VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
#   #       VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
#   #       VPCCertificateArn: !GetAtt CertificateStack.Outputs.CertificateArn
#   #       RootStackName: !Ref AWS::StackName
#   #       ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
#   #       ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
#   #       ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
#   #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#   #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #       ECRRegion: !Ref ECRRegion
#   #       CmsECRImageTag: !Ref CmsECRImageTag
#   #       CmsEnvAwsAccessKeyId: !Ref CmsEnvAwsAccessKeyId
#   #       CmsEnvAwsBucket: !Ref CmsEnvAwsBucket
#   #       CmsEnvAwsRegion: !Ref CmsEnvAwsRegion
#   #       CmsEnvAwsSecretAccessKey: !Ref CmsEnvAwsSecretAccessKey
#   #       EnvCmsHost: !Ref EnvCmsHost
#   #       CmsEnvDatabasePoolSize: !Ref CmsEnvDatabasePoolSize
#   #       CmsEnvDbEnvMysqlDatabase: !Ref CmsEnvDbEnvMysqlDatabase
#   #       CmsEnvDbEnvMysqlPassword: !Ref CmsEnvDbEnvMysqlPassword
#   #       CmsEnvDbEnvMysqlUser: !Ref CmsEnvDbEnvMysqlUser
#   #       CmsEnvDbPort3306TcpAddr: !Ref CmsEnvDbPort3306TcpAddr
#   #       CmsEnvDbPort3306TcpPort: !Ref CmsEnvDbPort3306TcpPort
#   #       EnvFeederHost: !Ref EnvFeederHost
#   #       EnvIdHost: !Ref EnvIdHost
#   #       CmsEnvMemcacheServers: !Ref CmsEnvMemcacheServers
#   #       EnvMetaHost: !Ref EnvMetaHost
#   #       CmsEnvMysqlAllowEmptyPassword: !Ref CmsEnvMysqlAllowEmptyPassword
#   #       CmsEnvNewRelicKey: !Ref CmsEnvNewRelicKey
#   #       CmsEnvNewRelicName: !Ref CmsEnvNewRelicName
#   #       EnvPrxHost: !Ref EnvPrxHost
#   #       CmsEnvPrxSecret: !Ref CmsEnvPrxSecret
#   #       CmsEnvPublicAssetSecret: !Ref CmsEnvPublicAssetSecret
#   #       CmsEnvRailsEnv: !Ref CmsEnvRailsEnv
#   #       CmsEnvRailsSecretKey: !Ref CmsEnvRailsSecretKey
#   #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms.prx.org/cms.prx.org.yml"]]
#   #     TimeoutInMinutes: "5"
# ################################################################################
# #### PUBLISH ###################################################################
# ################################################################################
#   PublishPipelineStack:
#     Type: "AWS::CloudFormation::Stack"
#     Condition: CreateSingletonStacks
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         CodePipelineArtifactStore: !Ref CodePipelineArtifactStore
#         OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#         GitHubOAuthToken: !Ref GitHubOAuthToken
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
#         RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
#         ECRRegion: !Ref ECRRegion
#         PublishECRImageTag: !Ref PublishECRImageTag
#         PublishCodecovToken: !Ref PublishCodecovToken
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/publish.prx.org/pipeline.yml"]]
#       TimeoutInMinutes: "5"
#   PublishStack:
#     Type: "AWS::CloudFormation::Stack"
#     DependsOn: ECSClusterStack
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         VPC: !GetAtt VPCStack.Outputs.VPC
#         RootStackName: !Ref AWS::StackName
#         OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#         ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
#         ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
#         ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
#         PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDNSName
#         PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
#         PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
#         PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
#         PlatformALBHTTPListenerPriority: !FindInMap [ALBListenerRulePriorityMap, Publish, http]
#         PlatformALBHTTPSListenerPriority: !FindInMap [ALBListenerRulePriorityMap, Publish, https]
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         ECRRegion: !Ref ECRRegion
#         EnvCmsHost: !Ref EnvCmsHost
#         EnvIdHost: !Ref EnvIdHost
#         EnvPlayHost: !Ref EnvPlayHost
#         PublishECRImageTag: !Ref PublishECRImageTag
#         PublishEnvAuthClientId: !Ref PublishEnvAuthClientId
#         PublishEnvAwsKey: !Ref PublishEnvAwsKey
#         PublishEnvAwsUrl: !Ref PublishEnvAwsUrl
#         PublishEnvBucketFolder: !Ref PublishEnvBucketFolder
#         PublishEnvBucketName: !Ref PublishEnvBucketName
#         PublishEnvGaKey: !Ref PublishEnvGaKey
#         PublishEnvNewRelicAppName: !Ref PublishEnvNewRelicAppName
#         PublishEnvNewRelicLicenseKey: !Ref PublishEnvNewRelicLicenseKey
#         PublishEnvSignUrl: !Ref PublishEnvSignUrl
#         PublishEnvUseCloudfront: !Ref PublishEnvUseCloudfront
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/publish.prx.org/publish.prx.org.yml"]]
#       TimeoutInMinutes: "5"
#   # CmsAudioLambdaPipelineStack:
#   #   Type: "AWS::CloudFormation::Stack"
#   #   Condition: CreateSingletonStacks
#   #   Properties:
#   #     NotificationARNs:
#   #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #     Parameters:
#   #       CodePipelineArtifactStore: !Ref CodePipelineArtifactStore
#   #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #       GitHubOAuthToken: !Ref GitHubOAuthToken
#   #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#   #       RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
#   #       RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
#   #       CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
#   #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms-audio-lambda/pipeline.yml"]]
#   #     TimeoutInMinutes: "5"
#   # CmsAudioLambdaStack:
#   #   Type: "AWS::CloudFormation::Stack"
#   #   Properties:
#   #     NotificationARNs:
#   #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #     Parameters:
#   #       CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
#   #       LambdaFunctionCodeS3Key: !Ref CmsAudioLambdaZipName
#   #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms-audio-lambda/cms-audio-lambda.yml"]]
#   #     TimeoutInMinutes: "5"
#   # CmsImageLambdaPipelineStack:
#   #   Type: "AWS::CloudFormation::Stack"
#   #   Condition: CreateSingletonStacks
#   #   Properties:
#   #     NotificationARNs:
#   #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #     Parameters:
#   #       CodePipelineArtifactStore: !Ref CodePipelineArtifactStore
#   #       OpsDebugMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #       GitHubOAuthToken: !Ref GitHubOAuthToken
#   #       EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#   #       RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
#   #       RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
#   #       CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
#   #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms-image-lambda/pipeline.yml"]]
#   #     TimeoutInMinutes: "5"
#   # CmsImageLambdaStack:
#   #   Type: "AWS::CloudFormation::Stack"
#   #   Properties:
#   #     NotificationARNs:
#   #       - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#   #     Parameters:
#   #       CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
#   #       LambdaFunctionCodeS3Key: !Ref CmsImageLambdaZipName
#   #     TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/cms-image-lambda/cms-image-lambda.yml"]]
#   #     TimeoutInMinutes: "5"
#   UploadLambdaPipelineStack:
#     Type: "AWS::CloudFormation::Stack"
#     Condition: CreateSingletonStacks
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         CodePipelineArtifactStore: !Ref CodePipelineArtifactStore
#         GitHubOAuthToken: !Ref GitHubOAuthToken
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         RootStackTemplateConfigBucket: !Ref RootStackTemplateConfigBucket
#         RootStackTemplateConfigArchive: !Ref RootStackTemplateConfigArchive
#         CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
#         PRXUploadAccessKey: !Ref PRXUploadAccessKey
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/upload.prx.org/pipeline.yml"]]
#       TimeoutInMinutes: "5"
#   UploadLambdaStack:
#     Type: "AWS::CloudFormation::Stack"
#     Properties:
#       NotificationARNs:
#         - !GetAtt NotificationsStack.Outputs.OpsDebugMessagesSNSTopicArn
#       Parameters:
#         OpsWarnMessagesSNSTopicArn: !GetAtt NotificationsStack.Outputs.OpsWarnMessagesSNSTopicArn
#         BootstrapStackName: !Ref BootstrapStackName
#         PRXUploadAccessKey: !Ref PRXUploadAccessKey
#         EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref RootEnvironmentType, abbreviation]
#         CodeBucket: !Join ["", ["Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-CodeBucket"]]
#         LambdaFunctionCodeS3Key: !Ref UploadLambdaZipName
#       TemplateURL: !Join ["", ["http://s3-", !Ref "AWS::Region", ".amazonaws.com/", "Fn::ImportValue": !Sub "${BootstrapStackName}-${RootEnvironmentType}-TemplateBucket", "/upload.prx.org/upload.prx.org.yml"]]
#       TimeoutInMinutes: "5"
# Outputs:
#   VPCCertificateArn:
#     Description: The ARN for the wildcard certificate for the VPC
#     Value: !GetAtt CertificateStack.Outputs.CertificateArn
#   AudiogramHostedZoneDNSName:
#     Description: Domain name for audiogram app
#     Value: !GetAtt AudiogramStack.Outputs.HostedZoneDNSName
#   PublishHostedZoneDNSName:
#     Description: Domain name for publish app
#     Value: !GetAtt PublishStack.Outputs.HostedZoneDNSName
#     Export:
#       Name: !Sub "${AWS::StackName}-PublishHostedZoneDNSName"
#   # CmsHostedZoneDNSName:
#   #   Description: Domain name for CMS app
#   #   Value: !GetAtt CmsStack.Outputs.HostedZoneDNSName
