# Generally this template is used to launch stacks from the bootstrapping
# CodePipeline. Primarily is is simply a wrapper around individial app- and
# service-specific templates, which get nested into this template and are
# launched when this one is. The CodePiple also passes in a template
# configuration file, which includes parameter values for this and all nested
# templates. This root template MUST define all parameters that are included in
# the config file. It can then pass along select values to nested stacks that
# require them.
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Launches stacks for a number of applications and services that are maintained
  in separate templates.
Conditions:
  IsUsEast1: !Equals [!Ref "AWS::Region", us-east-1]
  IsStaging: !Equals [!Ref EnvironmentType, Staging]
  IsProduction: !Equals [!Ref EnvironmentType, Production]
Parameters:
  AsgKeyPairName:
    Description: >
      The EC2 key pair used for instances in the Auto Scaling
      group (region-specific)
    Type: "AWS::EC2::KeyPair::KeyName"
  EcrRegion:
    Type: String
  EnvironmentType:
    Type: String
    AllowedValues:
      - Staging
      - Production
  NewRelicLicenseKey:
    Type: String
    Default: ""
  # Application Specific
  JingleEcrImageTag:
    Type: String
  JingleSecretsVersion:
    Type: String
  CastleEcrImageTag:
    Type: String
  CastleSecretsVersion:
    Type: String
  CmsEcrImageTag:
    Type: String
  CmsSecretsVersion:
    Type: String
  CrierEcrImageTag:
    Type: String
  CrierSecretsVersion:
    Type: String
  DovetailEcrImageTag:
    Type: String
  DovetailSecretsVersion:
    Type: String
  FeederEcrImageTag:
    Type: String
  FeederSecretsVersion:
    Type: String
  IdEcrImageTag:
    Type: String
  IdSecretsVersion:
    Type: String
  PlayEcrImageTag:
    Type: String
  PlaySecretsVersion:
    Type: String
  PublishEcrImageTag:
    Type: String
  PublishSecretsVersion:
    Type: String
  FourohfourEcrImageTag:
    Type: String
  UploadLambdaCodeS3ObjectVersion:
    Type: String
  PRXUploadAccessKey:
    Type: String
  # Parameter Overrides
  InfrastructureStorageStackName:
    Type: String
  NotificationsStackName:
    Type: String
  SecretsStackName:
    Type: String
  InfrastructureGitCommit:
    Type: String
  PipelineExecutionNonce:
    Type: String
Mappings:
  EnvironmentTypeMap:
    Testing:
      abbreviation: test
    Beta:
      abbreviation: beta
    Staging:
      abbreviation: stag
    Production:
      abbreviation: prod
  # Each app should be given a listener rule priority prefix between 10 and 49.
  # In nested stacks, listener rule priorities are created by combining the
  # prefix with either two (eg 01) or three (eg 765) more digits. Wildcard rules
  # should use two digits, and VPC-based domains should use three digits.
  #
  # Higher-traffic apps should be given a higher priority (lower number) to
  # reduce the number of rules evaluations needed for more common requests
  ALBListenerRulePriorityMap:
    Cms:
      prefix: 15
    Play:
      prefix: 21
    Id:
      prefix: 24
    Publish:
      prefix: 28
    Castle:
      prefix: 35
    Jingle:
      prefix: 38
    Crier:
      prefix: 42
Resources:
  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        EnvironmentType: !Ref EnvironmentType
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/vpc.yml"]]
      TimeoutInMinutes: "5"
  CertificateStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        VPC: !GetAtt VPCStack.Outputs.VPC
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/certificate.yml"]]
      TimeoutInMinutes: "5"
  ECSClusterStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: VPCStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        InfrastructureStorageStackName: !Ref InfrastructureStorageStackName
        KeyPairName: !Ref AsgKeyPairName
        EnvironmentType: !Ref EnvironmentType
        NewRelicLicenseKey: !Ref NewRelicLicenseKey
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        VPCSubnet1AZ: !GetAtt VPCStack.Outputs.Subnet1AvailabilityZone
        VPCSubnet2AZ: !GetAtt VPCStack.Outputs.Subnet2AvailabilityZone
        VPCSubnet3AZ: !GetAtt VPCStack.Outputs.Subnet3AvailabilityZone
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        SecretsInstanceDecryptPolicyArn:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsInstanceDecryptPolicyArn"
        SecretsInstanceAccessPolicyArn:
          Fn::ImportValue:
            !Sub "${SecretsStackName}-SecretsInstanceAccessPolicyArn"
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/ecs.yml"]]
      TimeoutInMinutes: "5"
  LoadBalancersStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        VPCCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/load-balancers.yml"]]
      TimeoutInMinutes: "5"
  # MediaRadiotopiaFmStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     NotificationARNs:
  #       - Fn::ImportValue:
  #           !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
  #     Parameters:
  #       RadiotopiaCertificateArn: !GetAtt CertificateStack.Outputs.RadiotopiaCertificateArn
  #     TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/media.radiotopia.fm.yml"]]
  #     TimeoutInMinutes: "15"
  # RadioRadiotopiaFmStack:
  #   Type: "AWS::CloudFormation::Stack"
  #   Properties:
  #     NotificationARNs:
  #       - Fn::ImportValue:
  #           !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
  #     Parameters:
  #       RadiotopiaCertificateArn: !GetAtt CertificateStack.Outputs.RadiotopiaCertificateArn
  #     TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/radio.radiotopia.fm.yml"]]
  #     TimeoutInMinutes: "15"
  #### FOUROHFOUR ##############################################################
  FourohfourStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        PlatformALBDefaultTargetGroupArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBDefaultTargetGroupArn
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        EcrRegion: !Ref EcrRegion
        FourohfourEcrImageTag: !Ref FourohfourEcrImageTag
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/fourohfour.prx.org.yml"]]
      TimeoutInMinutes: "5"
  #### PUBLISH #################################################################
  PublishStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Publish, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        PublishEcrImageTag: !Ref PublishEcrImageTag
        PublishSecretsVersion: !Ref PublishSecretsVersion
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/publish.prx.org.yml"]]
      TimeoutInMinutes: "5"
  #### CASTLE ##################################################################
  CastleStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Castle, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        CastleEcrImageTag: !Ref CastleEcrImageTag
        CastleSecretsVersion: !Ref CastleSecretsVersion
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/castle.prx.org.yml"]]
      TimeoutInMinutes: "5"
  #### JINGLE ##################################################################
  JingleStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: IsStaging # Staging only, for now
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Jingle, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        JingleEcrImageTag: !Ref JingleEcrImageTag
        JingleSecretsVersion: !Ref JingleSecretsVersion
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/jingle.prx.org.yml"]]
      TimeoutInMinutes: "5"
  ##############################################################################
  # upload.prx.org #############################################################
  ##############################################################################
  # TODO TemplateURL needs to look in InfrastructureCodeBucket for some object
  #  labeled with the lambda code version (probably git commit sha)
  UploadLambdaStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        OpsWarnMessagesSnsTopicArn:
          - Fn::ImportValue:
              !Sub "${NotificationsStackName}-OpsWarnMessagesSnsTopicArn"
        PRXUploadAccessKey: !Ref PRXUploadAccessKey
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeAbbreviationMap, !Ref EnvironmentType, abbreviation]
        CodeS3Bucket:
          - Fn::ImportValue:
              !Sub "${InfrastructureStorageStackName}-InfrastructureApplicationCodeBucket"
        CodeS3ObjectVersion: !Ref UploadLambdaCodeS3ObjectVersion
        TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/upload.prx.org.yml"]]

      TimeoutInMinutes: "5"
  #### PLAY ####################################################################
  PlayStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Play, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        PlayEcrImageTag: !Ref PlayEcrImageTag
        PlaySecretsVersion: !Ref PlaySecretsVersion
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/play.prx.org.yml"]]
      TimeoutInMinutes: "5"
  #### CRIER ###################################################################
  CrierStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Crier, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        EcrRegion: !Ref EcrRegion
        EcrImageTag: !Ref CrierEcrImageTag
        SecretsVersion: !Ref CrierSecretsVersion
        AppName: "crier"
        CreateWorker: "true"
        ContainerPort: 3000
        ContainerMemory: 500
        ContainerCpu: 128
        HealthCheckPath: "/api/v1"
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/web-application.yml"]]
      TimeoutInMinutes: "5"
  #### FEEDER ##################################################################
  FeederStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        VPCCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        EcrRegion: !Ref EcrRegion
        EcrImageTag: !Ref FeederEcrImageTag
        SecretsVersion: !Ref FeederSecretsVersion
        AppName: "feeder"
        CreateWorker: "true"
        DesiredWebsProduction: 6
        DesiredWorkersProduction: 1
        ContainerPort: 3000
        ContainerMemory: 500
        ContainerCpu: 128
        HealthCheckPath: "/api/v1"
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/web-alb-application.yml"]]
      TimeoutInMinutes: "5"
  #### DOVETAIL ################################################################
  DovetailStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        VPCSubnet1: !GetAtt VPCStack.Outputs.Subnet1
        VPCSubnet2: !GetAtt VPCStack.Outputs.Subnet2
        VPCSubnet3: !GetAtt VPCStack.Outputs.Subnet3
        VPCCertificateArn: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        EcrRegion: !Ref EcrRegion
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        DovetailEcrImageTag: !Ref DovetailEcrImageTag
        DovetailSecretsVersion: !Ref DovetailSecretsVersion
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/dovetail.prx.org.yml"]]
      TimeoutInMinutes: "5"
  #### CMS #####################################################################
  CmsStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: IsStaging # Staging only, for now
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Cms, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        EcrRegion: !Ref EcrRegion
        EcrImageTag: !Ref CmsEcrImageTag
        SecretsVersion: !Ref CmsSecretsVersion
        AppName: "cms"
        CreateWorker: "true"
        ContainerPort: 3000
        ContainerMemory: 768
        ContainerCpu: 128
        HealthCheckPath: "/api/v1"
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/web-application.yml"]]
      TimeoutInMinutes: "5"
  #### ID ######################################################################
  IdStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: IsStaging # Staging only, for now
    DependsOn: ECSClusterStack
    Properties:
      NotificationARNs:
        - Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
      Parameters:
        VPC: !GetAtt VPCStack.Outputs.VPC
        PlatformALBDNSName: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
        PlatformALBFullName: !GetAtt LoadBalancersStack.Outputs.PlatformALBFullName
        PlatformALBCanonicalHostedZoneID: !GetAtt LoadBalancersStack.Outputs.PlatformALBCanonicalHostedZoneID
        PlatformALBHTTPListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPListenerArn
        PlatformALBHTTPSListenerArn: !GetAtt LoadBalancersStack.Outputs.PlatformALBHTTPSListenerArn
        PlatformALBListenerPriorityPrefix: !FindInMap [ALBListenerRulePriorityMap, Id, prefix]
        ECSCluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
        ECSServiceAutoscaleIAMRoleArn: !GetAtt ECSClusterStack.Outputs.ECSServiceAutoscaleIAMRoleArn
        ECSServiceIAMRole: !GetAtt ECSClusterStack.Outputs.ECSServiceIAMRole
        OpsDebugMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsDebugMessagesSnsTopicArn"
        OpsErrorMessagesSnsTopicArn:
          Fn::ImportValue:
            !Sub "${NotificationsStackName}-OpsErrorMessagesSnsTopicArn"
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
        SecretsBase:
            Fn::ImportValue:
              !Sub "${SecretsStackName}-SecretsBaseRegion"
        EcrRegion: !Ref EcrRegion
        EcrImageTag: !Ref IdEcrImageTag
        SecretsVersion: !Ref IdSecretsVersion
        AppName: "id"
        CreateWorker: "false"
        ContainerPort: 3000
        ContainerMemory: 512
        ContainerCpu: 128
        HealthCheckPath: "/api/v1/certs"
      TemplateURL: !Join ["", ["http://s3", !If [IsUsEast1, "", "-"], !If [IsUsEast1, "", !Ref "AWS::Region"], ".amazonaws.com/", "Fn::ImportValue": !Sub "${InfrastructureStorageStackName}-InfrastructureSourceBucket", "/", !Ref InfrastructureGitCommit, "/stacks/web-application.yml"]]
      TimeoutInMinutes: "5"
Outputs:
  VPCCertificateArn:
    Description: The ARN for the wildcard certificate for the VPC
    Value: !GetAtt CertificateStack.Outputs.WildcardCertificateArn
  PlatformALBDNSName:
    Description: The DNS name for the platform application load balancer
    Value: !GetAtt LoadBalancersStack.Outputs.PlatformALBDNSName
  PlatformALBDualstackDNSName:
    Description: >
      The dualstack DNS name for the platform application load balancer
    Value: !GetAtt LoadBalancersStack.Outputs.PlatformALBDualstackDNSName
  CastleHostedZoneDNSName:
    Description: Domain name for castle app
    Value: !GetAtt CastleStack.Outputs.HostedZoneDNSName
  JingleHostedZoneDNSName:
    Condition: IsStaging
    Description: Domain name for jingle app
    Value: !GetAtt JingleStack.Outputs.HostedZoneDNSName
  PublishHostedZoneDNSName:
    Description: Domain name for publish app
    Value: !GetAtt PublishStack.Outputs.HostedZoneDNSName
  PlayHostedZoneDNSName:
    Description: Domain name for play app
    Value: !GetAtt PlayStack.Outputs.HostedZoneDNSName
  CrierHostedZoneDNSName:
    Description: Domain name for crier app
    Value: !GetAtt CrierStack.Outputs.HostedZoneDNSName
  FeederHostedZoneDNSName:
    Description: Domain name for feeder app
    Value: !GetAtt FeederStack.Outputs.HostedZoneDNSName
  DovetailHostedZoneDNSName:
    Description: Domain name for dovetail app
    Value: !GetAtt DovetailStack.Outputs.HostedZoneDNSName
  CmsHostedZoneDNSName:
    Condition: IsStaging
    Description: Domain name for cms app
    Value: !GetAtt CmsStack.Outputs.HostedZoneDNSName
  IdHostedZoneDNSName:
    Condition: IsStaging
    Description: Domain name for id app
    Value: !GetAtt IdStack.Outputs.HostedZoneDNSName
