# stacks/apps/theworld-search.yml
# 100A
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates an API Gateway and Lambda function for The World search API

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Parameters:
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CloudWatchLogGroupTaggerServiceToken: { Type: String }
  CodeS3Bucket: { Type: String }
  CodeS3ObjectKey: { Type: String }
  TheWorldSearchGoogleCustomSearchEngineId: { Type: String }
  TheWorldSearchGoogleCustomSearchApiKey: { Type: String }
  TheWorldSearchHostname: { Type: String }
  TheWorldSearchInternalHostname: { Type: String }

Resources:
  ExternalCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref TheWorldSearchHostname
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_the-world_search" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: The World }
        - { Key: prx:dev:application, Value: Search }
      ValidationMethod: DNS

  # API
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
        AllowMethods:
          - GET
          - OPTIONS
        AllowOrigins:
          - "*"
      Description: !Sub >-
        ${EnvironmentType} The World search API
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: The World
        prx:dev:application: Search

  SearchEndpointFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: The World search API
      Events:
        ApiRequest:
          Properties:
            ApiId: !Ref HttpApi
            Method: get
            Path: /query
          Type: HttpApi
      Environment:
        Variables:
          ENGINE_ID: !Ref TheWorldSearchGoogleCustomSearchEngineId
          CSE_API_KEY: !Ref TheWorldSearchGoogleCustomSearchApiKey
      Handler: index.handler
      MemorySize: 192
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: The World
        prx:dev:application: Search
      Timeout: 16

  SearchEndpointFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [The World-Search] API Handler <${EnvironmentTypeAbbreviation}> ELEVATED FUNCTION ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} The World search endpoint Lambda function is
        experiencing function errors, thrown by the code or runtime. The
        invocations likely origintated from API Gateway and will not be
        retried.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SearchEndpointFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
  SearchEndpointFunctionErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt SearchEndpointFunctionErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: The World }
        - { Key: prx:dev:application, Value: Search }
  SearchEndpointFunctionThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub INFO [The World-Search] API Handler <${EnvironmentTypeAbbreviation}> INVOCATIONS BEING THROTTLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} The World search endpoint Lambda function has
        reached maximum concurrency and requests are failing. This is a 429
        status code for the Lambda invocation, but results in a 5XX error for
        the API Gateway.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref SearchEndpointFunction
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  SearchEndpointFunctionThrottleAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt SearchEndpointFunctionThrottleAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: The World }
        - { Key: prx:dev:application, Value: Search }

  SearchEndpointFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SearchEndpointFunction}
      RetentionInDays: 14
  SearchEndpointFunctionLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref SearchEndpointFunctionLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: The World }
        - { Key: prx:dev:application, Value: Search }

  # Creates an association between search.theworld.org and the production
  # API Gateway. This association can be created once per region.
  # This association allows for a CNAME to be made between search.theworld.org
  # and search.theworld.prx.tech, the latter of which provides latency-based
  # routing for the app between regions.
  ExternalDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref TheWorldSearchHostname
      DomainNameConfigurations:
        - CertificateArn: !Ref ExternalCertificate
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: The World
        prx:dev:application: Search
  ExternalApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref HttpApi
      DomainName: !Ref ExternalDomainName
      Stage: $default

  # Creates DNS records for search.theworld.prx.tech, which alias to the
  # regional domain name for the domain association for search.theworld.org.
  # This allows for search.theworld.org to resolve to search.theworld.prx.tech,
  # and have search.theworld.prx.tech return the IP for an endpoint that
  # is associated with search.theworld.org.
  # There is no API Gateway domain association for search.theworld.prx.tech
  # itself, so that domain is not functional, in any way other than as a DNS
  # CNAME target.
  InternalDomainNameRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Record sets for proxy server API
      HostedZoneName: prx.tech.
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt ExternalDomainName.RegionalDomainName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt ExternalDomainName.RegionalHostedZoneId
          Name: !Ref TheWorldSearchInternalHostname
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: A
        - AliasTarget:
            DNSName: !GetAtt ExternalDomainName.RegionalDomainName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt ExternalDomainName.RegionalHostedZoneId
          Name: !Ref TheWorldSearchInternalHostname
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: AAAA

Outputs:
  ApiId:
    Value: !Ref HttpApi
  ApiEndpoint:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
