# stacks/apps/dovetail-legacy.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates an ECS service for the Node.js Dovetail web server (i.e.. Dovetail
  version 2), along with target group and listener rule for the dedicated ALB.

Parameters:
  kContainerName:
    Type: String
    Default: dovetail-express
  kApplicationPort:
    Type: Number
    Default: 8080
  #######
  EcsClusterArn: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  SecretsBase: { Type: String }
  EcrImageTag: { Type: String }
  SecretsVersion: { Type: String }
  SecretsStackName: { Type: String }
  AlbLoadBalancerFullName: { Type: String }
  AlbHttpListenerArn: { Type: String }
  AlbHttpsListenerArn: { Type: String }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  HttpHostHeaderListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - dovetail.*
      ListenerArn: !Ref AlbHttpListenerArn
      Priority: 100
  HttpsHostHeaderListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - dovetail.*
      ListenerArn: !Ref AlbHttpsListenerArn
      Priority: 100

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /ping
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "20"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_dovetail_legacy" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Node.js }
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
  TargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Dovetail-V2] Web server <${EnvironmentTypeAbbreviation}> RETURNING 5XX ERRORS
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail V2's Restify server is returning 5XX
        errors from the ECS service to the load balancer.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref AlbLoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsProduction, 10, 3]
      EnableECSManagedTags: true
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Ref kContainerName
          ContainerPort: !Ref kApplicationPort
          TargetGroupArn: !Ref TargetGroup
      PlacementStrategies:
        - Field: instanceId
          Type: spread
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Node.js }
      TaskDefinition: !Ref TaskDefinition

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Node.js }
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceDecryptPolicyArn
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceAccessPolicyArn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Node.js }
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 700, 128]
          Environment:
            - Name: APP_NAME
              Value: dovetail
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
          Essential: true
          Image: !Ref EcrImageTag
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 1000, 400]
          Name: !Ref kContainerName
          PortMappings:
            - ContainerPort: !Ref kApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Node.js }
      TaskRoleArn: !GetAtt TaskRole.Arn

  # log metric filters
  LogAdzerkCachedMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.msg = "Adzerk cached" }'
      LogGroupName: !Ref TaskLogGroup
      MetricTransformations:
        - MetricName: !Sub AdzerkCached${EnvironmentType}
          MetricNamespace: PRX/DovetailLegacy
          MetricValue: "1"
  LogAdzerkRetryMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.msg = "Adzerk retry" }'
      LogGroupName: !Ref TaskLogGroup
      MetricTransformations:
        - MetricName: !Sub AdzerkRetry${EnvironmentType}
          MetricNamespace: PRX/DovetailLegacy
          MetricValue: "1"
  LogAdzerkRemoteErrorMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.err = "RemoteError:*adzerk*" }'
      LogGroupName: !Ref TaskLogGroup
      MetricTransformations:
        - MetricName: !Sub AdzerkRemoteError${EnvironmentType}
          MetricNamespace: PRX/DovetailLegacy
          MetricValue: "1"
  LogAdzerkTimeoutErrorMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.err = "TimeoutError:*adzerk*" }'
      LogGroupName: !Ref TaskLogGroup
      MetricTransformations:
        - MetricName: !Sub AdzerkTimeoutError${EnvironmentType}
          MetricNamespace: PRX/DovetailLegacy
          MetricValue: "1"
  LogInfrequentHitMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.msg = "Infrequent HIT" }'
      LogGroupName: !Ref TaskLogGroup
      MetricTransformations:
        - MetricName: !Sub InfrequentHit${EnvironmentType}
          MetricNamespace: PRX/DovetailLegacy
          MetricValue: "1"
  LogWarnsMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{ $.level = 40 }"
      LogGroupName: !Ref TaskLogGroup
      MetricTransformations:
        - MetricName: !Sub Warns${EnvironmentType}
          MetricNamespace: PRX/DovetailLegacy
          MetricValue: "1"
  LogErrorsMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{ $.level > 40 }"
      LogGroupName: !Ref TaskLogGroup
      MetricTransformations:
        - MetricName: !Sub Errors${EnvironmentType}
          MetricNamespace: PRX/DovetailLegacy
          MetricValue: "1"
