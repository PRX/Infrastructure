# stacks/apps/augury.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates an ECS service for the Augury web server, along with target group and
  listener rule for the shared ALB. Also creates a worker service, queue,
  Fargate task, and other resources needed for periodic forecast processing.

Parameters:
  kWebContainerName:
    Type: String
    Default: augury-web
  kWorkerContainerName:
    Type: String
    Default: augury-worker
  kApplicationPort:
    Type: Number
    Default: 3000
  kPostgresPoolSize:
    Type: Number
    Default: 10
  #######
  AlbFullName: { Type: String }
  AlbHttpsListenerArn: { Type: String }
  EcsClusterArn: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RegionMode: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  EchoServiceToken: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CloudWatchLogGroupTaggerServiceToken: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  NewRelicApiKeyPrxLite: { Type: String }
  SecretsBase: { Type: String }
  EcrImageTag: { Type: String }
  AlbListenerRulePriorityPrefix: { Type: String }
  SecretsVersion: { Type: String }
  SecretsStackName: { Type: String }
  VpcPublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  EcsLaunchEndpointsAccessSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  KmsEndpointAccessSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedAuroraPostgresqlEndpoint: { Type: String }
  SharedAuroraPostgresqlPort: { Type: String }
  CastlePostgresInstanceEndpointAddress: { Type: String }
  CastlePostgresInstanceEndpointPort: { Type: String }
  AdFilesHostname: { Type: String }
  FeederHostname: { Type: String }
  IdHostname: { Type: String }
  CastleHostname: { Type: String }
  CmsHostname: { Type: String }
  DovetailRouterHostname: { Type: String }
  AdFilesS3BucketArn: { Type: String }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  IsPrimaryRegion: !Equals [!Ref RegionMode, Primary]
  HasAuroraEndpoint: !Not [!Equals [!Ref SharedAuroraPostgresqlEndpoint, ""]]
  EnableWorkers: !And [!Condition HasAuroraEndpoint, !Condition IsPrimaryRegion]

Resources:
  Constants:
    Type: Custom::Echo
    Properties:
      ServiceToken: !Ref EchoServiceToken
      ActualsIngestJobInvocationCountMetricName: !Sub ActualsIngestJobInvocationCountNewCluster${EnvironmentType}
      AdFilesS3BucketName: !Select [5, !Split [":", !Ref AdFilesS3BucketArn]]

  HostHeaderListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - augury.*
      ListenerArn: !Ref AlbHttpsListenerArn
      Priority: !Join ["", [!Ref AlbListenerRulePriorityPrefix, "01"]]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /health_check
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_augury" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  TargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Augury] Web server <${EnvironmentTypeAbbreviation}> RETURNING 5XX ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Augury's Rails server is returning 5XX errors from
        the ECS service to the load balancer.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref AlbFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  TargetGroupHttp5xxAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt TargetGroupHttp5xxAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WebTaskLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceDecryptPolicyArn
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceAccessPolicyArn
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sqs:*
                Effect: Allow
                Resource:
                  - !GetAtt SlowWorkerRelaySqsQueue.Arn
            Version: "2012-10-17"
          PolicyName: SqsFullApplicationAccess
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }

  WebEcsService:
    Type: AWS::ECS::Service
    Condition: HasAuroraEndpoint # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsProduction, 4, 2]
      EnableECSManagedTags: true
      LoadBalancers:
        - ContainerName: !Ref kWebContainerName
          ContainerPort: !Ref kApplicationPort
          TargetGroupArn: !Ref TargetGroup
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
      TaskDefinition: !Ref WebTaskDefinition
  WorkerEcsService:
    Type: AWS::ECS::Service
    Condition: EnableWorkers # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsProduction, 2, 1]
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
      TaskDefinition: !Ref WorkerTaskDefinition

  WebTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WebTaskLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref WebTaskLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 2000, 128]
          Environment:
            - Name: APP_NAME
              Value: augury
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: POSTGRES_HOST
              Value: !Ref SharedAuroraPostgresqlEndpoint
            - Name: POSTGRES_PORT
              Value: !Ref SharedAuroraPostgresqlPort
            - Name: UPLOAD_ADFILE_SECRET_ACCESS_KEY
              Value: !GetAtt S3SigningAccessKey.SecretAccessKey
            - Name: UPLOAD_ADFILE_ACCESS_KEY_ID
              Value: !Ref S3SigningAccessKey
            - Name: UPLOAD_ADFILE_AWS_REGION
              Value: !Ref AWS::Region
            - Name: UPLOAD_ADFILE_BUCKET
              Value: !GetAtt Constants.AdFilesS3BucketName
            - Name: UPLOAD_ADFILE_BUCKET_DOMAIN
              Value: !Sub ${Constants.AdFilesS3BucketName}.s3.${AWS::Region}.amazonaws.com
            - Name: UPLOAD_ADFILE_PUBLIC_ACCESS_HOST
              Value: !Ref AdFilesHostname
            - Name: RAILS_SERVE_STATIC_FILES
              Value: "true"
            - Name: POSTGRES_POOL_SIZE
              Value: !Ref kPostgresPoolSize
            - Name: CASTLE_POSTGRES_HOST
              Value: !Ref CastlePostgresInstanceEndpointAddress
            - Name: CASTLE_POSTGRES_PORT
              Value: !Ref CastlePostgresInstanceEndpointPort
            - Name: CASTLE_HOST
              Value: !Ref CastleHostname
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: DOVETAIL_HOST
              Value: !Ref DovetailRouterHostname
            - Name: FEEDER_HOST
              Value: !Ref FeederHostname
            - Name: ID_HOST
              Value: !Ref IdHostname
            - Name: NEW_RELIC_KEY
              Value: !Ref NewRelicApiKeyPrxLite
            - Name: NEW_RELIC_NAME
              Value: !If [IsProduction, Augury Production, Augury Staging]
            - Name: BQ_DATASET
              Value: !If [IsProduction, production, staging]
            - Name: SLOW_WORKER_RELAY_SQS_URL
              Value: !Ref SlowWorkerRelaySqsQueue
          Essential: true
          Image: !Ref EcrImageTag
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWebContainerName
          PortMappings:
            - ContainerPort: !Ref kApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
      TaskRoleArn: !GetAtt TaskRole.Arn

  WorkerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WorkerTaskLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref WorkerTaskLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - workfast
          Cpu: !If [IsProduction, 2000, 128]
          Environment:
            - Name: APP_NAME
              Value: augury
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: POSTGRES_HOST
              Value: !Ref SharedAuroraPostgresqlEndpoint
            - Name: POSTGRES_PORT
              Value: !Ref SharedAuroraPostgresqlPort
            - Name: RAILS_SERVE_STATIC_FILES
              Value: "true"
            - Name: POSTGRES_POOL_SIZE
              Value: !Ref kPostgresPoolSize
            - Name: CASTLE_POSTGRES_HOST
              Value: !Ref CastlePostgresInstanceEndpointAddress
            - Name: CASTLE_POSTGRES_PORT
              Value: !Ref CastlePostgresInstanceEndpointPort
            - Name: CASTLE_HOST
              Value: !Ref CastleHostname
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: DOVETAIL_HOST
              Value: !Ref DovetailRouterHostname
            - Name: FEEDER_HOST
              Value: !Ref FeederHostname
            - Name: ID_HOST
              Value: !Ref IdHostname
            - Name: NEW_RELIC_KEY
              Value: !Ref NewRelicApiKeyPrxLite
            - Name: NEW_RELIC_NAME
              Value: !If [IsProduction, Augury Production, Augury Staging]
            - Name: BQ_DATASET
              Value: !If [IsProduction, production, staging]
            - Name: SLOW_WORKER_RELAY_SQS_URL
              Value: !Ref SlowWorkerRelaySqsQueue
          Essential: true
          Image: !Ref EcrImageTag
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WorkerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWorkerContainerName
          PortMappings:
            - ContainerPort: !Ref kApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
      TaskRoleArn: !GetAtt TaskRole.Arn

  S3SigningUser:
    Type: AWS::IAM::User
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Augury }
  S3SigningAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref S3SigningUser
  S3SigningAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:PutObject
            Resource:
              - !Sub ${AdFilesS3BucketArn}/upload/*
      PolicyName: ExternalS3BucketAccess
      Users:
        - !Ref S3SigningUser

  WorkerTaskLogImpressionsFetchJobMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: |-
        { $.msg = "*Performed ImpressionsFetchJob*" }
      LogGroupName: !Ref WorkerTaskLogGroup
      MetricTransformations:
        - MetricName: !GetAtt Constants.ActualsIngestJobInvocationCountMetricName
          MetricNamespace: PRX/Augury
          MetricValue: "1"
  ReallocationJobMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: |-
        { $.msg = "reallocation_job" }
      LogGroupName: !Ref WorkerTaskLogGroup
      MetricTransformations:
        - MetricName: !Sub ReallocationJobElapsed${EnvironmentType}
          MetricNamespace: PRX/Augury
          MetricValue: $.elapsed
  InventoryUpdateJobMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: |-
        { $.msg = "inventory_update_job" }
      LogGroupName: !Ref WorkerTaskLogGroup
      MetricTransformations:
        - MetricName: !Sub InventoryUpdateJobElapsed${EnvironmentType}
          MetricNamespace: PRX/Augury
          MetricValue: $.elapsed
  AuguryActualsAreBehindAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Augury] Worker <${EnvironmentTypeAbbreviation}> NOT FETCHING IMPRESSIONS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Augury's worker task has not logged any impression
        fetching actvitiy for an unusually long time. This could mean incorrect
        ads are being served.
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 3
      MetricName: !GetAtt Constants.ActualsIngestJobInvocationCountMetricName
      Namespace: PRX/Augury
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: breaching
  AuguryActualsAreBehindAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AuguryActualsAreBehindAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }

  SlowWorkerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  SlowWorkerTaskLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref SlowWorkerTaskLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
  SlowWorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - workslow
          Environment:
            - Name: APP_NAME
              Value: augury
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: POSTGRES_HOST
              Value: !Ref SharedAuroraPostgresqlEndpoint
            - Name: POSTGRES_PORT
              Value: !Ref SharedAuroraPostgresqlPort
            - Name: RAILS_SERVE_STATIC_FILES
              Value: "true"
            - Name: POSTGRES_POOL_SIZE
              Value: !Ref kPostgresPoolSize
            - Name: CASTLE_POSTGRES_HOST
              Value: !Ref CastlePostgresInstanceEndpointAddress
            - Name: CASTLE_POSTGRES_PORT
              Value: !Ref CastlePostgresInstanceEndpointPort
            - Name: CASTLE_HOST
              Value: !Ref CastleHostname
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: DOVETAIL_HOST
              Value: !Ref DovetailRouterHostname
            - Name: FEEDER_HOST
              Value: !Ref FeederHostname
            - Name: ID_HOST
              Value: !Ref IdHostname
            - Name: NEW_RELIC_KEY
              Value: !Ref NewRelicApiKeyPrxLite
            - Name: NEW_RELIC_NAME
              Value: !If [IsProduction, Augury Production, Augury Staging]
            - Name: BQ_DATASET
              Value: !If [IsProduction, production, staging]
          Essential: true
          Image: !Ref EcrImageTag
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SlowWorkerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
          Name: augury-workslow
      Cpu: "4096"
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Memory: "30720"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
      TaskRoleArn: !GetAtt TaskRole.Arn

  SlowWorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows web/database traffic for FARGATE executions
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIpv6: ::/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          FromPort: !Ref SharedAuroraPostgresqlPort
          IpProtocol: tcp
          ToPort: !Ref SharedAuroraPostgresqlPort
        - CidrIpv6: ::/0
          FromPort: !Ref SharedAuroraPostgresqlPort
          IpProtocol: tcp
          ToPort: !Ref SharedAuroraPostgresqlPort
        - CidrIp: 0.0.0.0/0
          FromPort: !Ref CastlePostgresInstanceEndpointPort
          IpProtocol: tcp
          ToPort: !Ref CastlePostgresInstanceEndpointPort
        - CidrIpv6: ::/0
          FromPort: !Ref CastlePostgresInstanceEndpointPort
          IpProtocol: tcp
          ToPort: !Ref CastlePostgresInstanceEndpointPort
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_augury_workslow" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
      VpcId: !Ref VpcId

  SlowWorkerRelaySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Augury }
  SlowWorkerRelayFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Launches fargate slow queue worker from SQS
      Environment:
        Variables:
          ECS_CLUSTER_ARN: !Ref EcsClusterArn
          ECS_TASK_DEFINITION_ARN: !Ref SlowWorkerTaskDefinition
          VPC_SUBNET_1: !Ref VpcPublicSubnet1Id
          VPC_SUBNET_2: !Ref VpcPublicSubnet2Id
          VPC_SUBNET_3: !Ref VpcPublicSubnet3Id
          SECURITY_GROUP_1: !GetAtt SlowWorkerSecurityGroup.GroupId
          SECURITY_GROUP_2: !Ref EcsLaunchEndpointsAccessSecurityGroupId
          SECURITY_GROUP_3: !Ref KmsEndpointAccessSecurityGroupId
          MAX_FARGATES: "2"
          STARTED_BY: !Ref AWS::StackName
          ENVIRONMENT_TYPE: !Ref EnvironmentType
          ROOT_STACK_ID: !Ref RootStackId
          ROOT_STACK_NAME: !Ref RootStackName
          STACK_ID: !Ref AWS::StackName
          STACK_NAME: !Ref AWS::StackId
      Events:
        SqsMessages:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt SlowWorkerRelaySqsQueue.Arn
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');
        const ecs = new AWS.ECS();

        const MAX_FARGATES = process.env.MAX_FARGATES;
        const STARTED_BY = process.env.STARTED_BY;

        // ECS listTask parameters
        const listParams = {
          cluster: process.env.ECS_CLUSTER_ARN,
          desiredStatus: 'RUNNING',
          maxResults: MAX_FARGATES,
          startedBy: STARTED_BY,
        };

        // ECS runTask parameters
        const runParams = {
          cluster: process.env.ECS_CLUSTER_ARN,
          launchType: 'FARGATE',
          networkConfiguration: {
            awsvpcConfiguration: {
              subnets: [process.env.VPC_SUBNET_1, process.env.VPC_SUBNET_2, process.env.VPC_SUBNET_3],
              assignPublicIp: 'DISABLED',
              securityGroups: [process.env.SECURITY_GROUP_1, process.env.SECURITY_GROUP_2, process.env.SECURITY_GROUP_3],
            },
          },
          platformVersion: '1.4.0',
          startedBy: STARTED_BY,
          taskDefinition: process.env.ECS_TASK_DEFINITION_ARN,
          tags: [
            { key: "prx:meta:tagging-version", value: "2021-04-07" },
            { key: "prx:cloudformation:stack-name", value: process.env.STACK_NAME },
            { key: "prx:cloudformation:stack-id", value: process.env.STACK_ID },
            { key: "prx:cloudformation:root-stack-name", value: process.env.ROOT_STACK_NAME },
            { key: "prx:cloudformation:root-stack-id", value: process.env.ROOT_STACK_ID },
            { key: "prx:ops:environment", value: process.env.ENVIRONMENT_TYPE },
            { key: "prx:dev:family", value: "Dovetail" },
            { key: "prx:dev:application", value: "Augury" },
          ],
        };

        // lightweight json logger
        function log(level, msg, extra = {}) {
          console[level](JSON.stringify({level, msg, ...extra}));
        }

        exports.handler = async (event) => {
          const listRes = await ecs.listTasks(listParams).promise();
          const running = listRes.taskArns.length;
          if (running < MAX_FARGATES) {
            log('info', `launching 1 more fargate worker (${running} running)`);
            try {
              const runRes = await ecs.runTask(runParams).promise();
              log('debug', 'ran task', runRes);
            } catch (err) {
              log('error', 'error running task', err);
              throw err;
            }
          } else {
            log('info', `already running ${running} fargate workers`);
          }
        };
      MemorySize: 128
      Policies:
        - Statement:
            - Action: ecs:ListTasks
              Effect: Allow
              Resource: "*"
            - Action: ecs:RunTask
              Effect: Allow
              Resource: !Ref SlowWorkerTaskDefinition
            - Effect: Allow
              Action: iam:PassRole
              Resource:
                - !GetAtt ExecutionRole.Arn
                - !GetAtt TaskRole.Arn
          Version: "2012-10-17"
      ReservedConcurrentExecutions: 1
      Runtime: nodejs12.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Augury
      Timeout: 5

  # Forecast task timings
  ForecastJobMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: |-
        { $.msg = "forecast_job" }
      LogGroupName: !Ref SlowWorkerTaskLogGroup
      MetricTransformations:
        - MetricName: !Sub ForecastJobElapsed${EnvironmentType}
          MetricNamespace: PRX/Augury
          MetricValue: $.elapsed

  # Forecast Rscript timings
  ForecastDownloadsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: |-
        { $.msg = "forecast_downloads" }
      LogGroupName: !Ref SlowWorkerTaskLogGroup
      MetricTransformations:
        - MetricName: !Sub ForecastDownloadsElapsed${EnvironmentType}
          MetricNamespace: PRX/Augury
          MetricValue: $.elapsed
  ForecastGeocountriesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: |-
        { $.msg = "forecast_partitions" }
      LogGroupName: !Ref SlowWorkerTaskLogGroup
      MetricTransformations:
        - MetricName: !Sub ForecastPartitionsElapsed${EnvironmentType}
          MetricNamespace: PRX/Augury
          MetricValue: $.elapsed

Outputs:
  TargetGroupFullName:
    Value: !GetAtt TargetGroup.TargetGroupFullName
