# stacks/apps/dovetail-router.yml
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates a dedicated load balancer and the ECS service for Dovetail Router
  (i.e., Dovetail version 3). Also creates the stack for Dovetail version 2
  resources, which run on the same ALB.

Mappings:
  ElbService:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    us-east-1:
      AccountId: "127311923021"
    us-east-2:
      AccountId: "033677994240"
    us-west-1:
      AccountId: "027434742980"
    us-west-2:
      AccountId: "797873946194"
    af-south-1:
      AccountId: "098369216593"
    ca-central-1:
      AccountId: "985666609251"
    eu-central-1:
      AccountId: "054676820928"
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-south-1:
      AccountId: "635631232127"
    eu-west-3:
      AccountId: "009996457667"
    eu-north-1:
      AccountId: "897822967062"
    ap-east-1:
      AccountId: "754344448648"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-northeast-3:
      AccountId: "383597477331"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    me-south-1:
      AccountId: "076674570225"
    sa-east-1:
      AccountId: "507241528517"

Parameters:
  kContainerName:
    Type: String
    Default: dovetail-router
  kApplicationPort:
    Type: Number
    Default: 4000
  #######
  EcsClusterArn: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  SecretsBase: { Type: String }
  EcrImageTag: { Type: String }
  SecretsVersion: { Type: String }
  SecretsStackName: { Type: String }
  EchoServiceToken: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  SharedEcsAsgInstanceSecurityGroupId: { Type: String }
  VpcPublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  # For legacy stack
  CloudFormationNotificationArn: { Type: String }
  TemplateUrlPrefix: { Type: String }
  DovetailLegacyEcrImageTag: { Type: String }
  DovetailLegacySecretsVersion: { Type: String }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  Constants:
    Type: Custom::Echo
    Properties:
      ServiceToken: !Ref EchoServiceToken
      VanityAlbDomain: !Sub dovetail.dualstack.${Alb.DNSName}.${EnvironmentTypeAbbreviation}.prx.tech
      # The ServiceDomain is the name used to create alias records in each region
      # for the load balancer. Having multiple records with the same name in this
      # way creates latency records. This is the domain responsible for both
      # the multi-region latency-based routing policy, and health checks and
      # failover. The health of any given DNS record (i.e., region) is based on
      # the health of the load balancer being targeted by the alias. The health
      # of the load balancer is in turn based on the health of its target groups.
      # A load balancer is only considered healthy (and thus a possible return
      # value of the service domain) if all target groups contain at least one
      # healthy target.
      # https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
      # https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values-latency-alias.html
      ServiceDomain: !Sub dovetail-router-alb-latency-group.${EnvironmentTypeAbbreviation}.prx.tech

  Certificate:
    # This certificate does not include an entry for the service domain, since
    # that will generally be prx.tech, and there is some risk is serving user-
    # generated content from the same domain as other apps. So even though the
    # prx.tech service domain is used for DNS purposes, it should not be used
    # for other purposes.
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If [IsProduction, dovetail.prxu.org, dovetail.staging.prxu.org]
      SubjectAlternativeNames:
        - !GetAtt Constants.VanityAlbDomain
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_dovetail_${Alb.LoadBalancerName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
      ValidationMethod: DNS

  # The vanity ALB domain provides direct access to the ALB created in this
  # template. It's essentially an alternative to the xxxx.elb.amazonaws.com
  # domain provided with each ALB, but lives at a PRX-owned domain and includes
  # some context clues, like the environment type. It's not used as part of any
  # DNS strategies; it doesn't really need to exist.
  VanityAlbDomainRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub >-
        Record sets that provide direct access to a specific Dovetail
        ${EnvironmentType} ALB
      HostedZoneName: prx.tech.
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
          Name: !GetAtt Constants.VanityAlbDomain
          Type: AAAA
        - AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
          Name: !GetAtt Constants.VanityAlbDomain
          Type: A
  # The service failover domain is a domain that is the SAME FOR ALL REGIONS.
  # This is the mechanism that Route 53 uses to add load balancers to a latancy
  # group. All ALBs for a given environment type should use the exact same
  # `Name` value for these records, but have unique `SetIdentifier` values.
  # When ALIAS latency records target a load balancer, Route 53 automatically
  # determines the health of the load balancer to determine if it should be
  # included in the pool of possible responses. The domain name is largely
  # immaterial, since it is used exclusively for DNS queries within Route 53.
  ServiceFailoverRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub >-
        Latency record for the Dovetail ${EnvironmentType} ALB
      HostedZoneName: prx.tech.
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
          Name: !GetAtt Constants.ServiceDomain
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: AAAA
        - AliasTarget:
            DNSName: !GetAtt Alb.DNSName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
          Name: !GetAtt Constants.ServiceDomain
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: A

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: !If
              - IsProduction
              - 3
              - 1
            Status: Enabled
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
  AccessLogsBucketPolicy:
    # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !GetAtt AccessLogsBucket.Arn
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
          - Action: s3:PutObject
            Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${ElbAccountId}:root
                - ElbAccountId: !FindInMap [ElbService, !Ref "AWS::Region", AccountId]
            Resource: !Sub ${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*
        Version: "2012-10-17"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        Security group for the ${EnvironmentType} Dovetail; ALB. Only the ALB
        should belong to it. Controls traffic into the ALB (i.e., internet) and
        from the ALB to targets (EC2 instances, etc), By default, allows all
        HTTP inbound traffic.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: ::/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIpv6: ::/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_shared-alb_inbound_forwarding" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
      VpcId: !Ref VpcId
  LoadBalancerSecurityGroupInstanceEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: >-
        Allow all egress traffic from the Dovetail LB SG to the instance SG.
      # Based on the following recommednation
      # https://aws.amazon.com/premiumsupport/knowledge-center/troubleshoot-unhealthy-checks-ecs/#Correctly_configure_the_security_groups_attached_to_your_load_balancer_and_container_instance
      DestinationSecurityGroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
      FromPort: 0
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      IpProtocol: tcp
      ToPort: 65535

  # This adds a rule to the instance security group defined in
  # shared-ecs-asg.yml
  InstanceSecurityGroupAlbDynamicPortIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: >-
        Allow ingress traffic from the Dovetail LB SG to the instance SG on
        ports used by ECS task dynamic port mapping.
      FromPort: 32768
      GroupId: !Ref SharedEcsAsgInstanceSecurityGroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      ToPort: 60999

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: dualstack
      LoadBalancerAttributes:
        # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes
        - Key: idle_timeout.timeout_seconds
          Value: "150"
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets:
        - !Ref VpcPublicSubnet1Id
        - !Ref VpcPublicSubnet2Id
        - !Ref VpcPublicSubnet3Id
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
  Alb5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Dovetail] Load balancer <${EnvironmentTypeAbbreviation}> RETURNING 5XX ERRORS
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail's dedicated application load balancer (ALB)
        is returning 5XX errors to clients. The errors may or may not be
        originating from applications behind the ALB.
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt Alb.LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 2
      TreatMissingData: notBreaching
  AlbResponseTimeP95Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Dovetail] Load balancer <${EnvironmentTypeAbbreviation}> RESPONDING SLOWLY
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail's dedicated application load balancer (ALB)
        is seeing very slow response times for a significant percent of the
        traffic it's handling.
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt Alb.LoadBalancerFullName
      EvaluationPeriods: 2
      ExtendedStatistic: p95
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 300
      Threshold: 0.2
      TreatMissingData: notBreaching

  HttpListener:
    # Generally all HTTP traffic is redirected to HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: HTTPS
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: Alb
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "15"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_dovetail-router" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  TargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Router] Web server <${EnvironmentTypeAbbreviation}> RETURNING 5XX ERRORS
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Router's Elixer server is returning 5XX
        errors from the ECS service to the load balancer.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt Alb.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  TargetGroupHttp5xxAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt TargetGroupHttp5xxAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref TaskLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }

  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpListener
      - HttpsListener
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: true
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Ref kContainerName
          ContainerPort: !Ref kApplicationPort
          TargetGroupArn: !Ref TargetGroup
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
      TaskDefinition: !Ref TaskDefinition

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceDecryptPolicyArn
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceAccessPolicyArn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 700, 128]
          Environment:
            - Name: APP_NAME
              Value: dovetailrouter
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
          Essential: true
          Image: !Ref EcrImageTag
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 1000, 400]
          MemoryReservation: !If [IsProduction, 600, 200]
          Name: !Ref kContainerName
          PortMappings:
            - ContainerPort: !Ref kApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
      TaskRoleArn: !GetAtt TaskRole.Arn

  LegacyStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      NotificationARNs:
        - !Ref CloudFormationNotificationArn
      Parameters:
        EcsClusterArn: !Ref EcsClusterArn
        VpcId: !Ref VpcId
        SecretsBase: !Ref SecretsBase
        EcrImageTag: !Ref DovetailLegacyEcrImageTag
        SecretsVersion: !Ref DovetailLegacySecretsVersion
        SecretsStackName: !Ref SecretsStackName
        EnvironmentType: !Ref EnvironmentType
        EnvironmentTypeAbbreviation: !Ref EnvironmentTypeAbbreviation
        RootStackId: !Ref RootStackId
        RootStackName: !Ref RootStackName
        CloudWatchAlarmTaggerServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
        AlbLoadBalancerFullName: !GetAtt Alb.LoadBalancerFullName
        AlbHttpsListenerArn: !Ref HttpsListener
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Router }
      TemplateURL: !Sub ${TemplateUrlPrefix}/dovetail-legacy.yml
      TimeoutInMinutes: 20

Outputs:
  VanityAlbDomain:
    Description: >-
      The vanity wildcard domain configured for the ALB's certificate, and
      registered in the DNS hosted zone
    Value: !GetAtt Constants.VanityAlbDomain
  AlbName:
    Description: >-
      The full name of the load balancer. For example, my-load-balancer
    Value: !GetAtt Alb.LoadBalancerName
