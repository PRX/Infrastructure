# stacks/apps/feeder.yml
# 200A
#
# The names of the SQS queues created by this template are intended to
# implicitly match some configuration that exists within the CMS application.
# The only part of the queue names that is passed to the application is the
# prefix; if the stems change in other the template or the app config, things
# will not function as expected.
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a dedicated load balancer and the ECS service for the public Feeder
  web server. Also creates an ECS service for the Feeder workers.

Parameters:
  kWebContainerName:
    Type: String
    Default: feeder-web
  kWorkerContainerName:
    Type: String
    Default: feeder-worker
  kWebApplicationPort:
    Type: Number
    Default: 3000
  #######
  AlbFullName: { Type: String }
  AlbHttpsListenerArn: { Type: String }
  EcsClusterArn: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  EnvironmentTypeLowercase: { Type: String }
  RegionMode: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CloudWatchLogGroupTaggerServiceToken: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  NewRelicApiKeyPrxLite: { Type: String }
  EcrImageTag: { Type: AWS::SSM::Parameter::Value<String> }
  AlbListenerRulePriorityPrefix: { Type: String }
  SharedAuroraPostgresqlEndpoint: { Type: String }
  SharedAuroraPostgresqlPort: { Type: String }
  AnnounceResourcePrefix: { Type: String }
  PorterJobExecutionSnsTopicArn: { Type: String }
  FeedsS3BucketArn: { Type: AWS::SSM::Parameter::Value<String> }
  CmsHostname: { Type: String }
  DovetailRouterHostname: { Type: String }
  IdHostname: { Type: String }
  BetaHostname: { Type: String }
  FeederHostname: { Type: String }
  FeederAuthProxyHostname: { Type: String }
  FeederAuthProxyInternalHostname: { Type: String }
  PublicFeedsHostname: { Type: String }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  IsPrimaryRegion: !Equals [!Ref RegionMode, Primary]
  HasAuroraEndpoint: !Not [!Equals [!Ref SharedAuroraPostgresqlEndpoint, ""]]
  EnableWorkers: !And [!Condition HasAuroraEndpoint, !Condition IsPrimaryRegion]

Resources:
  HostHeaderListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref WebTargetGroup2
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - feeder.*
      ListenerArn: !Ref AlbHttpsListenerArn
      Priority: !Join ["", [!Ref AlbListenerRulePriorityPrefix, "01"]]

  DefaultJobQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_feeder_default
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DefaultJobDeadletterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      VisibilityTimeout: 3600 # 1 hour
  DefaultJobDeadletterQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_feeder_default_failures
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      VisibilityTimeout: 3600 # 1 hour
  DefaultJobDeadletterQueueMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Feeder] Default dead-letter queue <${EnvironmentTypeAbbreviation}> NOT EMPTY (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Feeder's dead-letter queue for the default callback
        queue is not empty, which means some job callbacks were not
        successfully processed.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DefaultJobDeadletterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching
  DefaultJobDeadletterQueueMessageAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt DefaultJobDeadletterQueueMessageAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }

  FixerCallbackQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_feeder_fixer_callback
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FixerCallbackDeadletterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      VisibilityTimeout: 3600 # 1 hour
  FixerCallbackDeadletterQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      QueueName: !Sub ${AnnounceResourcePrefix}_feeder_fixer_callback_failures
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DefaultJobDeadletterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      VisibilityTimeout: 3600 # 1 hour
  FixerCallbackDeadletterQueueMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Feeder] Fixer dead-letter queue <${EnvironmentTypeAbbreviation}> NOT EMPTY (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Feeder's dead-letter queue for the Fixer callback
        queue is not empty, which means some Fixer or Porter job callbacks were
        not successfully processed.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt FixerCallbackDeadletterQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching
  FixerCallbackDeadletterQueueMessageAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt FixerCallbackDeadletterQueueMessageAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WorkerTaskLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyDocument:
            Statement:
              - Action: ssm:GetParameters
                Effect: Allow
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/*
                Sid: AllowAppParameterRead
            Version: "2012-10-17"
          PolicyName: ContainerSecrets
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:Get*
                  - sqs:List*
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Effect: Allow
                Resource:
                  - !GetAtt DefaultJobQueue.Arn
                  - !GetAtt FixerCallbackQueue.Arn
                Sid: AllowShoryuken
            Version: "2012-10-17"
          PolicyName: AppQueues
        - PolicyDocument:
            Statement:
              - Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:Get*
                  - sqs:List*
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${AnnounceResourcePrefix}_announce_feeder_*
                Sid: AllowShoryuken
            Version: "2012-10-17"
          PolicyName: Announce
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: "*" # TODO permissive
                Sid: AllowGlobalPublish
            Version: "2012-10-17"
          PolicyName: SNS
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:Get*
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListBucketVersions
                Effect: Allow
                Resource: !Ref FeedsS3BucketArn
                Sid: AllowBucketActions
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:Get*
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectVersionAcl
                Effect: Allow
                Resource: !Sub ${FeedsS3BucketArn}/*
                Sid: AllowObjectActions
            Version: "2012-10-17"
          PolicyName: FeedsBucket
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }

  WebTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /api/v1
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_feeder" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  WebTargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Feeder] Web server <${EnvironmentTypeAbbreviation}> RETURNING 5XX ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Feeder's Rails server is returning 5XX errors from
        the ECS service to the load balancer.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref AlbFullName
        - Name: TargetGroup
          Value: !GetAtt WebTargetGroup2.TargetGroupFullName
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  WebTargetGroupHttp5xxAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt WebTargetGroupHttp5xxAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WebTaskLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }

  WebEcsService:
    Type: AWS::ECS::Service
    Condition: HasAuroraEndpoint # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsProduction, 5, 2]
      EnableECSManagedTags: true
      LoadBalancers:
        - ContainerName: !Ref kWebContainerName
          ContainerPort: !Ref kWebApplicationPort
          TargetGroupArn: !Ref WebTargetGroup2
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      TaskDefinition: !Ref WebTaskDefinition
  WebTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WebTaskLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref WebTaskLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: feeder
            - Name: RAILS_ENV
              Value: !Ref EnvironmentTypeLowercase
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: DB_PORT_5432_TCP_ADDR
              Value: !Ref SharedAuroraPostgresqlEndpoint
            - Name: DB_PORT_5432_TCP_PORT
              Value: !Ref SharedAuroraPostgresqlPort
            - Name: FIXER_CALLBACK_QUEUE_NAME
              Value: !GetAtt FixerCallbackQueue.QueueName
            - Name: ANNOUNCE_RESOURCE_PREFIX
              Value: !Ref AnnounceResourcePrefix
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: DATABASE_POOL_SIZE
              Value: "16"
            - Name: DOVETAIL_HOST
              Value: !Ref DovetailRouterHostname
            - Name: FEEDER_CDN_HOST
              Value: !Ref PublicFeedsHostname
            - Name: FEEDER_CDN_PRIVATE_HOST
              Value: !Ref FeederAuthProxyHostname
            - Name: ID_HOST
              Value: !Ref IdHostname
            - Name: LANG
              Value: en_US.UTF-8
            - Name: NEW_RELIC_KEY
              Value: !Ref NewRelicApiKeyPrxLite
            - Name: NEW_RELIC_NAME
              Value: !If [IsProduction, Feeder Production, Feeder Staging]
            - Name: PORTER_SNS_TOPIC
              Value: !Ref PorterJobExecutionSnsTopicArn
            - Name: PRX_HOST
              Value: !Ref BetaHostname
            - Name: RAILS_SERVE_STATIC_FILES
              Value: enabled
            - Name: WORKER_PAUSE
              Value: "30"
            - Name: WORKER_DATABASE_POOL_SIZE
              Value: !If [IsProduction, 10, 5]
            - Name: WORKER_COUNT
              Value: !If [IsProduction, 10, 5]
            - Name: FEEDER_HOST
              Value: !Ref FeederHostname
          Essential: true
          Image: !Ref EcrImageTag
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWebContainerName
          PortMappings:
            - ContainerPort: !Ref kWebApplicationPort
              HostPort: 0
          Secrets:
            - Name: DB_ENV_POSTGRES_DATABASE
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/database-name
            - Name: DB_ENV_POSTGRES_PASSWORD
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/database-password
            - Name: DB_ENV_POSTGRES_USER
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/database-username
            - Name: FEEDS_TOKEN
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/feeds-token
            - Name: PRX_CLIENT_ID
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/id-auth-client-id
            - Name: PRX_SECRET
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/id-auth-client-secret
            - Name: SECRET_KEY_BASE
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/secret-key-base
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      TaskRoleArn: !GetAtt TaskRole.Arn

  WorkerEcsService:
    Type: AWS::ECS::Service
    Condition: EnableWorkers # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      TaskDefinition: !Ref WorkerTaskDefinition
  WorkerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WorkerTaskLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref WorkerTaskLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - worker
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: feeder
            - Name: RAILS_ENV
              Value: !Ref EnvironmentTypeLowercase
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: DB_PORT_5432_TCP_ADDR
              Value: !Ref SharedAuroraPostgresqlEndpoint
            - Name: DB_PORT_5432_TCP_PORT
              Value: !Ref SharedAuroraPostgresqlPort
            - Name: FIXER_CALLBACK_QUEUE_NAME
              Value: !GetAtt FixerCallbackQueue.QueueName
            - Name: ANNOUNCE_RESOURCE_PREFIX
              Value: !Ref AnnounceResourcePrefix
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: DATABASE_POOL_SIZE
              Value: "16"
            - Name: DOVETAIL_HOST
              Value: !Ref DovetailRouterHostname
            - Name: FEEDER_CDN_HOST
              Value: !Ref PublicFeedsHostname
            - Name: FEEDER_CDN_PRIVATE_HOST
              Value: !Ref FeederAuthProxyHostname
            - Name: ID_HOST
              Value: !Ref IdHostname
            - Name: LANG
              Value: en_US.UTF-8
            - Name: NEW_RELIC_KEY
              Value: !Ref NewRelicApiKeyPrxLite
            - Name: NEW_RELIC_NAME
              Value: !If [IsProduction, Feeder Production, Feeder Staging]
            - Name: PORTER_SNS_TOPIC
              Value: !Ref PorterJobExecutionSnsTopicArn
            - Name: PRX_HOST
              Value: !Ref BetaHostname
            - Name: RAILS_SERVE_STATIC_FILES
              Value: enabled
            - Name: WORKER_PAUSE
              Value: "30"
            - Name: WORKER_DATABASE_POOL_SIZE
              Value: !If [IsProduction, 10, 5]
            - Name: WORKER_COUNT
              Value: !If [IsProduction, 10, 5]
            - Name: FEEDER_HOST
              Value: !Ref FeederHostname
          Essential: true
          Image: !Ref EcrImageTag
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WorkerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWorkerContainerName
          Secrets:
            - Name: DB_ENV_POSTGRES_DATABASE
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/database-name
            - Name: DB_ENV_POSTGRES_PASSWORD
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/database-password
            - Name: DB_ENV_POSTGRES_USER
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/database-username
            - Name: FEEDS_TOKEN
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/feeds-token
            - Name: PRX_CLIENT_ID
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/id-auth-client-id
            - Name: PRX_SECRET
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/id-auth-client-secret
            - Name: SECRET_KEY_BASE
              ValueFrom: !Sub /prx/${EnvironmentTypeAbbreviation}/Spire/Dovetail-Feeder/secret-key-base
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      TaskRoleArn: !GetAtt TaskRole.Arn

  AuthProxyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: !Sub Feeder ${EnvironmentType} private feed proxy service
      DisableExecuteApiEndpoint: false
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Feeder
  AuthProxyHttpLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub Feeder ${EnvironmentType} private feed proxy server
      Environment:
        Variables:
          PUBLIC_FEED_DOMAIN: !Ref PublicFeedsHostname
      Events:
        ApiRootRequest:
          Properties:
            ApiId: !Ref AuthProxyHttpApi
            Method: any
            Path: /
            PayloadFormatVersion: "1.0"
          Type: HttpApi
        ApiDeepRequest:
          Properties:
            ApiId: !Ref AuthProxyHttpApi
            Method: any
            Path: /{proxy+}
            PayloadFormatVersion: "1.0"
          Type: HttpApi
      Handler: index.handler
      InlineCode: |
        const http = require('http');
        const text = (statusCode = 200, body = 'ok', maxAge = 0) => {
          const headers = {
            'Content-Type': 'text/plain',
            'Cache-Control': `public, max-age=${maxAge}`,
          };
          return { statusCode, body, headers };
        };

        exports.handler = async (event) => {
          if (!event.queryStringParameters || !event.queryStringParameters.auth) {
            return text(403, 'nope, no feed for you!', 300);
          }

          const resp = await new Promise((resolve) => {
            http.get(`http://${process.env.PUBLIC_FEED_DOMAIN}${event.path}`, resolve);
          });
          if (resp.statusCode !== 200) {
            return text(404, 'Not Found', 300);
          }
          if (!(resp.headers['content-type'] || '').match(/application\/(rss\+)?xml/)) {
            return text(404, 'Not Feed', 300);
          }

          const data = await new Promise((resolve, reject) => {
            let chunks = '';
            resp.on('data', (chunk) => (chunks += chunk));
            resp.on('error', (err) => reject(err));
            resp.on('end', () => resolve(chunks));
          });

          const auth = event.queryStringParameters.auth;
          const body = data.replace(
            /<enclosure url="([^"]+)"/g,
            `<enclosure url="$1?auth=${auth}"`,
          );
          const headers = {
            'Content-Type': resp.headers['content-type'],
            'Cache-Control': `public, max-age=300`,
          };
          return { statusCode: 200, body, headers };
        };
      MemorySize: 192
      Runtime: nodejs16.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Feeder
      Timeout: 30
  AuthProxyHttpLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AuthProxyHttpLambdaFunction}
      RetentionInDays: 14
  AuthProxyHttpLambdaLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref AuthProxyHttpLambdaLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
  AuthProxyHttpLambdaElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [Feeder] Private feed proxy <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Feeder Private Feed Proxy Lambda function is failing.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuthProxyHttpLambdaFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  ProxyHttpLambdaElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AuthProxyHttpLambdaElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }

  ExternalCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref FeederAuthProxyHostname
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_feeder_auth" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeder }
      ValidationMethod: DNS

  # Creates an association between p.[staging.]prxu.org and the
  # API Gateway. This association can be created once per region.
  # This association allows for a CNAME to be made between p.[staging.]prxu.org
  # and p.[staging.]u.prx.tech, the latter of which provides latency-based
  # routing for the app between regions.
  ExternalDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref FeederAuthProxyHostname
      DomainNameConfigurations:
        - CertificateArn: !Ref ExternalCertificate
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Feeder
  ExternalApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref AuthProxyHttpApi
      DomainName: !Ref ExternalDomainName
      Stage: $default

  # Creates DNS records for p.[staging.]u.prx.tech, which alias to the
  # regional domain name for the domain association for p.[staging.]prxu.org.
  # This allows for p.[staging.].prxu.org to resolve to p.[staging.]u.prx.tech,
  # and have p.[staging.]u.prx.tech return the IP for an endpoint that
  # is associated with p.[staging.].prxu.org.
  # There is no API Gateway domain association for p.[staging.]u.prx.tech
  # itself, so that domain is not functional, in any way other than as a DNS
  # CNAME target.
  InternalDomainNameRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Record sets for auth proxy server API
      HostedZoneName: prx.tech.
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt ExternalDomainName.RegionalDomainName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt ExternalDomainName.RegionalHostedZoneId
          Name: !Ref FeederAuthProxyInternalHostname
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: A
        - AliasTarget:
            DNSName: !GetAtt ExternalDomainName.RegionalDomainName
            EvaluateTargetHealth: true
            HostedZoneId: !GetAtt ExternalDomainName.RegionalHostedZoneId
          Name: !Ref FeederAuthProxyInternalHostname
          Region: !Ref AWS::Region
          SetIdentifier: !Ref AWS::StackName
          Type: AAAA

Outputs:
  WebTargetGroupFullName:
    Value: !GetAtt WebTargetGroup2.TargetGroupFullName
  AuthApiDefaultEndpoint:
    Value: !Sub https://${AuthProxyHttpApi}.execute-api.${AWS::Region}.amazonaws.com
  AuthApiId:
    Value: !Ref AuthProxyHttpApi
