# stacks/apps/dovetail-analytics.yml
# 300A
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a number of Lambda functions that collect Dovetail metrics data
  from Kinesis streams, and process and forward that data to various
  destinations, like BigQuery and third-parties as pingback.

Parameters:
  kMetricFilterNamespace:
    Type: String
    Default: PRX/Dovetail/Analytics
  #######
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CloudWatchLogGroupTaggerServiceToken: { Type: String }
  CodeS3Bucket: { Type: String }
  CodeS3ObjectKey: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  VpcPrivateSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPrivateSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPrivateSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  DovetailVerifiedMetricsKinesisStreamArn: { Type: String }
  DovetailVerifiedMetricsKinesisStreamName: { Type: String }
  SharedRedisClientSecurityGroupId: { Type: AWS::EC2::SecurityGroup::Id }
  SharedRedisReplicationGroupEndpointAddress: { Type: String }
  SharedRedisReplicationGroupEndpointPort: { Type: String }
  DovetailCountedKinesisStreamArn: { Type: String }
  DovetailCountedKinesisStreamName: { Type: String }
  DynamoDbTableName: { Type: AWS::SSM::Parameter::Value<String> }
  DynamoDbTtl: { Type: AWS::SSM::Parameter::Value<String> }
  DynamoDbAccessRoleArn: { Type: AWS::SSM::Parameter::Value<String> }

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  ParameterStoreReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ssm:DescribeParameters
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prx/${EnvironmentTypeAbbreviation}/analytics-*
        Version: "2012-10-17"

  # BigQuery
  AnalyticsBigqueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} Dovetail Analytics sending data to BigQuery
      Environment:
        Variables:
          BQ_PROJECT_ID: prx-metrics
          # TODO: get these out of the code and into CFN somehow
          PARAMSTORE_PREFIX: !Sub /prx/${EnvironmentTypeAbbreviation}/analytics-bigquery
      Events:
        MetricsKinesisTrigger:
          Properties:
            BatchSize: 100
            Enabled: true
            StartingPosition: LATEST
            Stream: !Ref DovetailVerifiedMetricsKinesisStreamArn
          Type: Kinesis
      Handler: index.handler
      MemorySize: 512
      Runtime: nodejs12.x
      Policies:
        - !Ref ParameterStoreReadPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Analytics
      Timeout: 30
  AnalyticsBigqueryFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AnalyticsBigqueryFunction}
      RetentionInDays: 14
  AnalyticsBigqueryFunctionLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref AnalyticsBigqueryFunctionLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsBigqueryFunctionElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] BigQuery Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics BigQuery Lambda function is
        failing, but BigQuery records can safely be re-inserted, so these can
        be retried.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsBigqueryFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsBigqueryFunctionElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsBigqueryFunctionElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsBigqueryFunctionKinesisIteratorBehindAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] BigQuery Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR FALLING BEHIND (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics BigQuery Lambda function's
        Kinesis iterator age is higher than normal, tktktk.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsBigqueryFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 900000 # milliseconds
      TreatMissingData: notBreaching
      Unit: Milliseconds
  AnalyticsBigqueryFunctionKinesisIteratorBehindAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsBigqueryFunctionKinesisIteratorBehindAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsBigqueryFunctionKinesisIteratorStalledAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub FATAL [Dovetail-Analytics] BigQuery Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR STALLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics BigQuery Lambda function's
        Kinesis iterator is significantly delayed, and is likely to continue to
        fall behind without intervention.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsBigqueryFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 3600000 # milliseconds
      TreatMissingData: notBreaching
      Unit: Milliseconds
  AnalyticsBigqueryFunctionKinesisIteratorStalledAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsBigqueryFunctionKinesisIteratorStalledAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsBigqueryFunctionDownloadsMetricFilter:
    # Counts the total number of downloads sent to BigQuery?
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.dest = "dt_downloads" }'
      LogGroupName: !Ref AnalyticsBigqueryFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub bigquery_downloads_${AnalyticsBigqueryFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: $.rows
  AnalyticsBigqueryFunctionLowDownloadsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub FATAL [Dovetail-Analytics] BigQuery Lambda function <${EnvironmentTypeAbbreviation}> FEW DOWNLOADS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics BigQuery Lambda function is
        sending a suspiciously low number of downloads to BigQuery, which could
        mean that input data is not reaching the function.
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      MetricName: !Sub bigquery_downloads_${AnalyticsBigqueryFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 300
      Statistic: Sum
      Threshold: 2000
      TreatMissingData: breaching
  AnalyticsBigqueryFunctionLowDownloadsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsBigqueryFunctionLowDownloadsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref AnalyticsBigqueryFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsBigqueryFunctionImpressionsMetricFilter:
    # Counts the total number of impressions sent to BigQuery?
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.dest = "dt_impressions" }'
      LogGroupName: !Ref AnalyticsBigqueryFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub bigquery_impressions_${AnalyticsBigqueryFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: $.rows
  AnalyticsBigqueryFunctionImpressionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub FATAL [Dovetail-Analytics] BigQuery Lambda function <${EnvironmentTypeAbbreviation}> FEW IMPRESSIONS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics BigQuery Lambda function is
        sending a suspiciously low number of impressions to BigQuery, which
        could mean that input data is not reaching the function.
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      MetricName: !Sub bigquery_impressions_${AnalyticsBigqueryFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 300
      Statistic: Sum
      Threshold: 4000
      TreatMissingData: breaching
  AnalyticsBigqueryFunctionImpressionsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsBigqueryFunctionImpressionsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref AnalyticsBigqueryFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsBigqueryFunctionErrorLevelLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $._logLevel = "error" }'
      LogGroupName: !Ref AnalyticsBigqueryFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub bigquery_errors_${AnalyticsBigqueryFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"
  AnalyticsBigqueryFunctionLoggedErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Analytics] BigQuery Lambda function <${EnvironmentTypeAbbreviation}> LOGGED ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics BigQuery Lambda function has
        logged some errors during execution.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: !Sub bigquery_errors_${AnalyticsBigqueryFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsBigqueryFunctionLoggedErrorsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsBigqueryFunctionLoggedErrorsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref AnalyticsBigqueryFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  # DynamoDB
  AnalyticsDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PROVISIONED
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !If [IsProduction, 100, 1]
        WriteCapacityUnits: !If [IsProduction, 400, 1]
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
  AnalyticsDynamoDbTableWriteScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1000
      MinCapacity: !If [IsProduction, 215, 1]
      ResourceId: !Sub table/${AnalyticsDynamoDbTable}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  AnalyticsDynamoDbTableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: TableWriteCapacityScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AnalyticsDynamoDbTableWriteScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 82
  AnalyticsDynamoDbTableReadScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1000
      MinCapacity: 1
      ResourceId: !Sub table/${AnalyticsDynamoDbTable}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  AnalyticsDynamoDbTableReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: TableReadCapacityScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AnalyticsDynamoDbTableReadScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 82
  AnalyticsDynamodbTableBatchGetItemThrottledRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] DynamoDB Table <${EnvironmentTypeAbbreviation}> BATCH GET ITEM THROTTLING (${RootStackName})
      AlarmDescription: !Sub ${EnvironmentType} Dovetail Analytics DynamoDB BatchGetItem operations are being throttled
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref AnalyticsDynamoDbTable
        - Name: Operation
          Value: BatchGetItem
      EvaluationPeriods: 1
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsDynamodbTableBatchGetItemThrottledRequestsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsDynamodbTableBatchGetItemThrottledRequestsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsDynamodbTableBatchWriteItemThrottledRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] DynamoDB Table <${EnvironmentTypeAbbreviation}> BATCH WRITE ITEM THROTTLING (${RootStackName})
      AlarmDescription: !Sub ${EnvironmentType} Dovetail Analytics DynamoDB BatchWriteItem operations are being throttled
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref AnalyticsDynamoDbTable
        - Name: Operation
          Value: BatchWriteItem
      EvaluationPeriods: 1
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsDynamodbTableBatchWriteItemThrottledRequestsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsDynamodbTableBatchWriteItemThrottledRequestsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsDynamodbTableUpdateItemThrottledRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] DynamoDB Table <${EnvironmentTypeAbbreviation}> UPDATE ITEM THROTTLING (${RootStackName})
      AlarmDescription: !Sub ${EnvironmentType} Dovetail Analytics DynamoDB UpdateItem operations are being throttled
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref AnalyticsDynamoDbTable
        - Name: Operation
          Value: UpdateItem
      EvaluationPeriods: 1
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsDynamodbTableUpdateItemThrottledRequestsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsDynamodbTableUpdateItemThrottledRequestsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  # TODO: this is a temporary function to clone to new table. remove!
  AnalyticsTemporaryFunction:
    Type: AWS::Serverless::Function
    Condition: IsProduction
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} Temporary Dovetail Analytics sending data to new DynamoDB
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          DYNAMODB: "true" # set function mode = dynamodb
          DDB_TABLE: !Ref AnalyticsDynamoDbTable
          DDB_TTL: !Ref DynamoDbTtl
      Events:
        DynamodbKinesisTrigger:
          Properties:
            BatchSize: 50
            Enabled: true
            StartingPosition: LATEST
            Stream: !Ref DovetailCountedKinesisStreamArn
          Type: Kinesis
      Handler: index.handler
      MemorySize: 512
      Runtime: nodejs12.x
      Policies:
        - !Ref ParameterStoreReadPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
        - Statement:
            - Action:
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
                - dynamodb:ConditionCheck
                - dynamodb:DeleteItem
                - dynamodb:DescribeTable
                - dynamodb:DescribeTimeToLive
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:UpdateItem
              Effect: Allow
              Resource: !GetAtt AnalyticsDynamoDbTable.Arn
          Version: "2012-10-17"
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Analytics
      Timeout: 30
  AnalyticsTemporaryFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsProduction
    Properties:
      LogGroupName: !Sub /aws/lambda/${AnalyticsTemporaryFunction}
      RetentionInDays: 14
  AnalyticsTemporaryFunctionLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref AnalyticsTemporaryFunctionLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsDynamoDbFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} Dovetail Analytics sending data to DynamoDB
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          DYNAMODB: "true" # set function mode = dynamodb
          DDB_TABLE: !If [IsProduction, !Ref DynamoDbTableName, !Ref AnalyticsDynamoDbTable]
          DDB_ROLE: !If [IsProduction, !Ref DynamoDbAccessRoleArn, ""]
          DDB_TTL: !Ref DynamoDbTtl
      Events:
        DynamodbKinesisTrigger:
          Properties:
            BatchSize: 50
            Enabled: true
            StartingPosition: LATEST
            Stream: !Ref DovetailCountedKinesisStreamArn
          Type: Kinesis
      Handler: index.handler
      MemorySize: 512
      Runtime: nodejs12.x
      Policies:
        - !Ref ParameterStoreReadPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
        - Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Resource: !Ref DynamoDbAccessRoleArn
          Version: "2012-10-17"
        - Statement:
            - Action:
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
                - dynamodb:ConditionCheck
                - dynamodb:DeleteItem
                - dynamodb:DescribeTable
                - dynamodb:DescribeTimeToLive
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:UpdateItem
              Effect: Allow
              Resource: !GetAtt AnalyticsDynamoDbTable.Arn
          Version: "2012-10-17"
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Analytics
      Timeout: 30
  AnalyticsDynamoDbFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AnalyticsDynamoDbFunction}
      RetentionInDays: 14
  AnalyticsDynamoDbFunctionLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref AnalyticsDynamoDbFunctionLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsDynamoDbFunctionElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] DynamoDB Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics DynamoDB Lambda function is
        failing, but tktktk.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsDynamoDbFunction
      EvaluationPeriods: 5
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsDynamoDbFunctionElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsDynamoDbFunctionElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsDynamoDbFunctionLogGroupToKinesisSubscriptionFilterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: AnalyticsDynamodbSubscriptionKinesisPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource: !Ref DovetailVerifiedMetricsKinesisStreamArn
            Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsDynamoDbFunctionLogGroupImpressionsToKinesisSubscriptionFilter:
    # Send impression data from DynamoDB Lambda function's logs to Kinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Ref DovetailVerifiedMetricsKinesisStreamArn
      FilterPattern: "{$.msg = impression}"
      LogGroupName: !Ref AnalyticsDynamoDbFunctionLogGroup
      RoleArn: !GetAtt AnalyticsDynamoDbFunctionLogGroupToKinesisSubscriptionFilterRole.Arn

  AnalyticsDynamoDbFunctionKinesisIteratorBehindAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] DynamoDB Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR FALLING BEHIND (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics DynamoDB Lambda function's
        Kinesis iterator age is higher than normal, tktktk.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsDynamoDbFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 900000 # milliseconds
      TreatMissingData: notBreaching
      Unit: Milliseconds
  AnalyticsDynamoDbFunctionKinesisIteratorBehindAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsDynamoDbFunctionKinesisIteratorBehindAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsDynamoDbFunctionKinesisIteratorStalledAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub FATAL [Dovetail-Analytics] DynamoDB Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR STALLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics DynamoDB Lambda function's
        Kinesis iterator is significantly delayed, and is likely to continue to
        fall behind without intervention.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsDynamoDbFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 3600000 # milliseconds
      TreatMissingData: notBreaching
      Unit: Milliseconds
  AnalyticsDynamoDbFunctionKinesisIteratorStalledAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsDynamoDbFunctionKinesisIteratorStalledAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsDynamoDbFunctionErrorLevelLogMetricFilter:
    # Counts the number of logged errors
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $._logLevel = "error" }'
      LogGroupName: !Ref AnalyticsDynamoDbFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub dynamodb_errors_${AnalyticsDynamoDbFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"
  AnalyticsDynamoDbFunctionLoggedErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Analytics] DynamoDB Lambda function <${EnvironmentTypeAbbreviation}> LOGGED ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics DynamoDB Lambda function has
        logged some errors during execution.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: !Sub dynamodb_errors_${AnalyticsDynamoDbFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsDynamoDbFunctionLoggedErrorsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsDynamoDbFunctionLoggedErrorsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref AnalyticsDynamoDbFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsDynamoDbFunctionInsertsMetricFilter:
    # Counts the number of rows inserted to DynamoDB
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.dest = "dynamodb" }'
      LogGroupName: !Ref AnalyticsDynamoDbFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub dynamodb_inserts_${AnalyticsDynamoDbFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: $.rows

  AnalyticsDynamoDbFunctionLookupsMetricFilter:
    # Count the number of redirect-datas we've looked up and shuffeld along to
    # the metrics-kinesis stream
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.dest = "kinesis*" }'
      LogGroupName: !Ref AnalyticsDynamoDbFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub dynamodb_lookups_${AnalyticsDynamoDbFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: $.rows

  AnalyticsDynamoDbFunctionRetriesMetricFilter:
    # Counts the number of retried DynamoDB operations
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.ddb = "retrying" }'
      LogGroupName: !Ref AnalyticsDynamoDbFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub dynamodb_retries_${AnalyticsDynamoDbFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"

  # Pingbacks
  AnalyticsPingbacksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} Dovetail Analytics sending HTTP pingbacks
      Environment:
        Variables:
          PINGBACKS: "true"
      Events:
        MetricsKinesisTrigger:
          Properties:
            BatchSize: 25
            Enabled: true
            StartingPosition: LATEST
            Stream: !Ref DovetailVerifiedMetricsKinesisStreamArn
          Type: Kinesis
      Handler: index.handler
      MemorySize: 2048
      Runtime: nodejs12.x
      Policies:
        - !Ref ParameterStoreReadPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Analytics
      Timeout: 60
  AnalyticsPingbacksFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AnalyticsPingbacksFunction}
      RetentionInDays: 14
  AnalyticsPingbacksFunctionLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref AnalyticsPingbacksFunctionLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsPingbacksFunctionElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] Pingbacks Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics pingbacks Lambda function is
        failing, and some pingbacks may be getting dropped because it's not
        safe to resend them.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsPingbacksFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsPingbacksFunctionElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsPingbacksFunctionElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsPingbacksFunctionKinesisIteratorBehindAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] Pingbacks Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR FALLING BEHIND (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics Pingbacks Lambda function's
        Kinesis iterator age is higher than normal, tktktk.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsPingbacksFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 900000 # milliseconds
      TreatMissingData: notBreaching
      Unit: Milliseconds
  AnalyticsPingbacksFunctionKinesisIteratorBehindAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsPingbacksFunctionKinesisIteratorBehindAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsPingbacksFunctionKinesisIteratorStalledAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub FATAL [Dovetail-Analytics] Pingbacks Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR STALLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics Pingbacks Lambda function's
        Kinesis iterator is significantly delayed, and is likely to continue to
        fall behind without intervention.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsPingbacksFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 3600000 # milliseconds
      TreatMissingData: notBreaching
      Unit: Milliseconds
  AnalyticsPingbacksFunctionKinesisIteratorStalledAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsPingbacksFunctionKinesisIteratorStalledAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsPingbacksFunctionErrorLevelLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $._logLevel = "error" }'
      LogGroupName: !Ref AnalyticsPingbacksFunctionLogGroup
      MetricTransformations:
        # TODO Add dimensions
        - MetricName: !Sub pingbacks_errors_${AnalyticsPingbacksFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"
  AnalyticsPingbacksFunctionLoggedErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Analytics] Pingbacks Lambda function <${EnvironmentTypeAbbreviation}> LOGGED ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics Pingbacks Lambda function has
        logged some errors during execution.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: !Sub pingbacks_errors_${AnalyticsPingbacksFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsPingbacksFunctionLoggedErrorsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsPingbacksFunctionLoggedErrorsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref AnalyticsPingbacksFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  # TODO Adzerk Pingbacks are probably no longer necessary to track
  AnalyticsPingbacksFunctionAdzerkMetricFilter:
    # Counts the number of pingbacks sent to Adzerk
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.dest = "*.adzerk.net" }'
      LogGroupName: !Ref AnalyticsPingbacksFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub "pingbacks_adzerk_${AnalyticsPingbacksFunction}"
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: $.rows
  AnalyticsPingbacksFunctionAdzerkTrafficLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub FATAL [Dovetail-Analytics] Pingbacks Lambda function <${EnvironmentTypeAbbreviation}> FEW ADZERK PINGBACKS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics Pingback Lambda function is
        sending a suspiciously low amount of traffic to Adzerk, which could
        mean that input data is not reaching the function.
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      MetricName: !Sub "pingbacks_adzerk_${AnalyticsPingbacksFunction}"
      Namespace: !Ref kMetricFilterNamespace
      Period: 300
      Statistic: Sum
      Threshold: 4000
      TreatMissingData: breaching
  AnalyticsPingbacksFunctionAdzerkTrafficLowAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsPingbacksFunctionAdzerkTrafficLowAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref AnalyticsPingbacksFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsPingbacksFunctionNotAdzerkMetricFilter:
    # Counts the number of pingbacks sent everywhere except Adzerk
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.dest != "*.adzerk.net" }'
      LogGroupName: !Ref AnalyticsPingbacksFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub pingbacks_other_${AnalyticsPingbacksFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: $.rows

  AnalyticsPingbacksFunctionFailMetricFilter:
    # Counts the number of failed pingbacks
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.msg = "PINGFAIL*" }'
      LogGroupName: !Ref AnalyticsPingbacksFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub pingbacks_fails_${AnalyticsPingbacksFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"

  # Redis
  AnalyticsRedisFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub >-
        The security group for ${EnvironmentType} Dovetail Analytics Redis
        Lambda function that allows all outbound traffic
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
        - CidrIpv6: ::/0
          IpProtocol: "-1"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_dovetail-analytics_redis-function" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
      VpcId: !Ref VpcId
  AnalyticsRedisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key: !Ref CodeS3ObjectKey
      Description: !Sub >-
        ${EnvironmentType} Dovetail Analytics sending INCRs to Redis
      Environment:
        Variables:
          REDIS_HOST: !Sub cluster://${SharedRedisReplicationGroupEndpointAddress}:${SharedRedisReplicationGroupEndpointPort}
          REDIS_TTL: "7200"
          REDIS_IMPRESSIONS_HOST: !Sub cluster://${SharedRedisReplicationGroupEndpointAddress}:${SharedRedisReplicationGroupEndpointPort}
          REDIS_IMPRESSIONS_TTL: "90000"
      Events:
        MetricsKinesisTrigger:
          Properties:
            BatchSize: 100
            Enabled: true
            StartingPosition: LATEST
            Stream: !Ref DovetailVerifiedMetricsKinesisStreamArn
          Type: Kinesis
      Handler: index.handler
      MemorySize: 512
      Runtime: nodejs12.x
      Policies:
        - !Ref ParameterStoreReadPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: Analytics
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt AnalyticsRedisFunctionSecurityGroup.GroupId
          - !Ref SharedRedisClientSecurityGroupId
        SubnetIds:
          - !Ref VpcPrivateSubnet1Id
          - !Ref VpcPrivateSubnet2Id
          - !Ref VpcPrivateSubnet3Id
  AnalyticsRedisFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AnalyticsRedisFunction}
      RetentionInDays: 14
  AnalyticsRedisFunctionLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref AnalyticsRedisFunctionLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsRedisFunctionElevatedErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] Redis Lambda function <${EnvironmentTypeAbbreviation}> INVOCATIONS ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics Redis Lambda function is
        failing, and some INCR commands may be getting dropped because it's
        not safe to resend them.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsRedisFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
  AnalyticsRedisFunctionElevatedErrorAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsRedisFunctionElevatedErrorAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsRedisFunctionKinesisIteratorBehindAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [Dovetail-Analytics] Redis Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR FALLING BEHIND (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics Redis Lambda function's
        Kinesis iterator age is higher than normal, tktktk.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsRedisFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 900000 # milliseconds
      TreatMissingData: notBreaching
      Unit: Milliseconds
  AnalyticsRedisFunctionKinesisIteratorBehindAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsRedisFunctionKinesisIteratorBehindAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }
  AnalyticsRedisFunctionKinesisIteratorStalledAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub FATAL [Dovetail-Analytics] Redis Lambda function <${EnvironmentTypeAbbreviation}> KINESIS ITERATOR STALLED (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics Redis Lambda function's
        Kinesis iterator is significantly delayed, and is likely to continue to
        fall behind without intervention.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AnalyticsRedisFunction
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Maximum
      Threshold: 3600000 # milliseconds
      TreatMissingData: notBreaching
      Unit: Milliseconds
  AnalyticsRedisFunctionKinesisIteratorStalledAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsRedisFunctionKinesisIteratorStalledAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  AnalyticsRedisFunctionInsertsMetricFilter:
    # TODO Does this get used for anything?
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.dest = "redis*" }'
      LogGroupName: !Ref AnalyticsRedisFunctionLogGroup
      MetricTransformations:
        # TODO Add dimensions
        - MetricName: !Sub redis_inserts_${AnalyticsRedisFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: $.rows
  AnalyticsRedisFunctionErrorLevelLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $._logLevel = "error" }'
      LogGroupName: !Ref AnalyticsRedisFunctionLogGroup
      MetricTransformations:
        # TODO Add dimensions
        - MetricName: !Sub redis_errors_${AnalyticsRedisFunction}
          MetricNamespace: !Ref kMetricFilterNamespace
          MetricValue: "1"
  AnalyticsRedisFunctionLoggedErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ERROR [Dovetail-Analytics] Redis Lambda function <${EnvironmentTypeAbbreviation}> LOGGED ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Dovetail Analytics Redis Lambda function has logged
        some errors during execution.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: !Sub redis_errors_${AnalyticsRedisFunction}
      Namespace: !Ref kMetricFilterNamespace
      Period: 300
      Statistic: Sum
      Threshold: 4
      TreatMissingData: notBreaching
  AnalyticsRedisFunctionLoggedErrorsAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt AnalyticsRedisFunctionLoggedErrorsAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref AnalyticsRedisFunctionLogGroup }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Analytics }

  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub
        - |-
          {
            "widgets": [
              {
                "height": 5,
                "width": 12,
                "y": 0,
                "x": 0,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "${kMetricFilterNamespace}", "bigquery_downloads_${AnalyticsBigqueryFunction}", { "label": "BigQuery Download Records", "color": "#1f77b4" } ],
                    [ "${kMetricFilterNamespace}", "bigquery_impressions_${AnalyticsBigqueryFunction}", { "label": "BigQuery Impression Records", "color": "#ff7f0e" } ],
                    [ "${kMetricFilterNamespace}", "pingbacks_other_${AnalyticsPingbacksFunction}", { "label": "Pingbacks", "color": "#d62728" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "yAxis": {
                    "left": {
                      "min": 0
                    }
                  },
                  "title": "Resultant Data",
                  "period": 60,
                  "stat": "Sum"
                }
              },
              {
                "height": 5,
                "width": 12,
                "y": 5,
                "x": 0,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "IteratorAge", "FunctionName", "${AnalyticsBigqueryFunction}", { "label": "BigQuery Lambda" } ],
                    [ "AWS/Lambda", "IteratorAge", "FunctionName", "${AnalyticsDynamoDbFunction}", { "label": "DynamoDB Lambda" } ],
                    [ "AWS/Lambda", "IteratorAge", "FunctionName", "${AnalyticsPingbacksFunction}", { "label": "Pingbacks Lambda" } ],
                    [ "AWS/Lambda", "IteratorAge", "FunctionName", "${AnalyticsRedisFunction}", { "label": "Redis Lambda" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Max Iterator Age",
                  "period": 60,
                  "liveData": true,
                  "stat": "Maximum"
                }
              },
              {
                "height": 5,
                "width": 12,
                "y": 10,
                "x": 0,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Kinesis", "IncomingRecords", "StreamName", "${MetricsStreamName}", { "label": "Metrics stream IN" } ],
                    [ "AWS/Kinesis", "GetRecords.Records", "StreamName", "${MetricsStreamName}", { "yAxis": "left", "label": "Metrics stream OUT" } ],
                    [ "AWS/Kinesis", "IncomingRecords", "StreamName", "${DdbStreamName}", { "label": "DynamoDB stream IN", "yAxis": "right" } ],
                    [ "AWS/Kinesis", "GetRecords.Records", "StreamName", "${DdbStreamName}", { "label": "DynamoDB stream OUT", "color": "#d62728", "yAxis": "right" } ]
                  ],
                  "period": 60,
                  "stat": "Sum",
                  "title": "Kinesis Streams I/O (Records)",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stacked": false,
                  "yAxis": {
                    "left": {
                      "min": 0
                    }
                  }
                }
              },

              {
                "height": 4,
                "width": 6,
                "y": 0,
                "x": 12,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Invocations", "FunctionName", "${AnalyticsBigqueryFunction}", { "label": "Invocations" } ],
                    [ "AWS/Lambda", "Errors", "FunctionName", "${AnalyticsBigqueryFunction}", { "label": "[max: ${!MAX}] Errors", "yAxis": "right" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "BigQuery Health",
                  "period": 60,
                  "liveData": true,
                  "stat": "Sum"
                }
              },
              {
                "height": 4,
                "width": 6,
                "y": 0,
                "x": 18,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Duration", "FunctionName", "${AnalyticsBigqueryFunction}", { "label": "Average", "stat": "Average" } ],
                    [ "AWS/Lambda", "Duration", "FunctionName", "${AnalyticsBigqueryFunction}", { "label": "Max", "stat": "Maximum" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "BigQuery Duration",
                  "period": 60,
                  "liveData": true
                }
              },

              {
                "height": 4,
                "width": 6,
                "y": 4,
                "x": 12,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Invocations", "FunctionName", "${AnalyticsDynamoDbFunction}", { "label": "Invocations" } ],
                    [ "AWS/Lambda", "Errors", "FunctionName", "${AnalyticsDynamoDbFunction}", { "label": "[max: ${!MAX}] Errors", "yAxis": "right" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "DDB Health",
                  "period": 60,
                  "liveData": true,
                  "stat": "Sum"
                }
              },
              {
                "height": 4,
                "width": 6,
                "y": 4,
                "x": 18,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Duration", "FunctionName", "${AnalyticsDynamoDbFunction}", { "label": "Average", "stat": "Average" } ],
                    [ "AWS/Lambda", "Duration", "FunctionName", "${AnalyticsDynamoDbFunction}", { "label": "Max", "stat": "Maximum" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "DDB Duration",
                  "period": 60,
                  "liveData": true
                }
              },

              {
                "height": 4,
                "width": 6,
                "y": 8,
                "x": 12,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Invocations", "FunctionName", "${AnalyticsPingbacksFunction}", { "label": "Invocations" } ],
                    [ "AWS/Lambda", "Errors", "FunctionName", "${AnalyticsPingbacksFunction}", { "label": "[max: ${!MAX}] Errors", "yAxis": "right" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Pingbacks Health",
                  "period": 60,
                  "liveData": true,
                  "stat": "Sum"
                }
              },
              {
                "height": 4,
                "width": 6,
                "y": 8,
                "x": 18,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Duration", "FunctionName", "${AnalyticsPingbacksFunction}", { "label": "Average", "stat": "Average" } ],
                    [ "AWS/Lambda", "Duration", "FunctionName", "${AnalyticsPingbacksFunction}", { "label": "Max", "stat": "Maximum" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Pingbacks Duration",
                  "period": 60,
                  "liveData": true
                }
              },

              {
                "height": 4,
                "width": 6,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Invocations", "FunctionName", "${AnalyticsRedisFunction}", { "label": "Invocations" } ],
                    [ "AWS/Lambda", "Errors", "FunctionName", "${AnalyticsRedisFunction}", { "label": "[max: ${!MAX}] Errors", "yAxis": "right" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Redis Health",
                  "period": 60,
                  "liveData": true,
                  "stat": "Sum"
                }
              },
              {
                "height": 4,
                "width": 6,
                "y": 12,
                "x": 18,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [ "AWS/Lambda", "Duration", "FunctionName", "${AnalyticsRedisFunction}", { "label": "Average", "stat": "Average" } ],
                    [ "AWS/Lambda", "Duration", "FunctionName", "${AnalyticsRedisFunction}", { "label": "Max", "stat": "Maximum" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Redis Duration",
                  "period": 60,
                  "liveData": true
                }
              }
            ]
          }
        - DdbStreamName: !Ref DovetailCountedKinesisStreamName
          MetricsStreamName: !Ref DovetailVerifiedMetricsKinesisStreamName
      DashboardName: !Sub ${RootStackName}-${AWS::Region}-Dovetail-Analytics
