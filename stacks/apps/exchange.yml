# stacks/apps/exchange.yml
# 200A
#
# The names of the SQS queues created by this template are intended to
# implicitly match some configuration that exists within the CMS application.
# The only part of the queue names that is passed to the application is the
# prefix; if the stems change in other the template or the app config, things
# will not function as expected.
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates an ECS service for the public Exchange web server, along with target
  group and listener rule for the shared ALB. Also creates an IAM user and
  SES credentials for it. Also creates ECS services for SayWhen and the
  Exchange workers. Assumes that SES has been configured in the region.

Parameters:
  kWebContainerName:
    Type: String
    Default: exchange-web
  kWorkerContainerName:
    Type: String
    Default: exchange-worker
  kSayWhenContainerName:
    Type: String
    Default: exchange-worker
  kWebApplicationPort:
    Type: Number
    Default: 3000
  #######
  AlbFullName: { Type: String }
  AlbHttpsListenerArn: { Type: String }
  EcsClusterArn: { Type: String }
  EcsClusterName: { Type: String }
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RegionMode: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }
  NewRelicApiKeyPrxLite: { Type: String }
  VpcId: { Type: AWS::EC2::VPC::Id }
  VpcPublicSubnet1Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet2Id: { Type: AWS::EC2::Subnet::Id }
  VpcPublicSubnet3Id: { Type: AWS::EC2::Subnet::Id }
  SecretsBase: { Type: String }
  EcrImageTag: { Type: String }
  SecretsVersion: { Type: String }
  AlbListenerRulePriorityPrefix: { Type: String }
  SecretsStackName: { Type: String }
  AmazonSesSmtpCredentialsGeneratorServiceToken: { Type: String }
  CloudWatchAlarmTaggerServiceToken: { Type: String }
  CloudWatchLogGroupTaggerServiceToken: { Type: String }
  S3SigningEndpointUrl: { Type: String }
  S3SigningAccessKeyId: { Type: String }
  SharedMemcachedEndpointAddress: { Type: String }
  SharedMemcachedEndpointPort: { Type: String }
  SharedAuroraMysqlEndpoint: { Type: String }
  SharedAuroraMysqlPort: { Type: String }
  EchoServiceToken: { Type: String }
  AnnounceResourcePrefix: { Type: String }
  PorterJobExecutionSnsTopicArn: { Type: String }
  MediajointS3BucketArn: { Type: String }
  TransferS3BucketArn: { Type: String }
  IdHostname: { Type: String }
  CmsHostname: { Type: String }
  ExchangeHostname: { Type: String }
  BetaHostname: { Type: String }
  TheCountHostname: { Type: String }
  TheCastleHostname: { Type: String }

Conditions:
  IsStaging: !Equals [!Ref EnvironmentType, Staging]
  IsProduction: !Equals [!Ref EnvironmentType, Production]
  IsPrimaryRegion: !Equals [!Ref RegionMode, Primary]
  HasAuroraEndpoint: !Not [!Equals [!Ref SharedAuroraMysqlEndpoint, ""]]
  EnableWorkers: !And [!Condition HasAuroraEndpoint, !Condition IsPrimaryRegion]

Resources:
  Constants:
    Type: Custom::Echo
    Properties:
      ServiceToken: !Ref EchoServiceToken
      # Provides a namespace for Exchange-specific queues
      SqsQueuePrefix: !Sub ${AnnounceResourcePrefix}_exchange_

  ExchangeWildcardHostHeaderListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref WebTargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - exchange.*
      ListenerArn: !Ref AlbHttpsListenerArn
      Priority: !Join ["", [!Ref AlbListenerRulePriorityPrefix, "01"]]
  ApiWildcardHostHeaderListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref WebTargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values:
            - api.*
      ListenerArn: !Ref AlbHttpsListenerArn
      Priority: !Join ["", [!Ref AlbListenerRulePriorityPrefix, "11"]]

  SesSendingUser:
    Type: AWS::IAM::User
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  SesSendingAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref SesSendingUser
  SesSendingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ses:SendRawEmail
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SesSendingPolicy
      Users:
        - !Ref SesSendingUser
  SesSendingSmtpCredentials:
    Type: Custom::AmazonSesSmtpPasswordGenerator
    Properties:
      ServiceToken: !Ref AmazonSesSmtpCredentialsGeneratorServiceToken
      AccessKeyId: !Ref SesSendingAccessKey
      SecretAccessKey: !GetAtt SesSendingAccessKey.SecretAccessKey
      Region: !Ref AWS::Region

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /ping
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_exchange" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  WebTargetGroupHttp5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProduction
    Properties:
      AlarmName: !Sub ERROR [Exchange] Web server <${EnvironmentTypeAbbreviation}> RETURNING 5XX ERRORS (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Exchange's Rails server is returning 5XX errors from
        the ECS service to the load balancer.
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 5
      TreatMissingData: notBreaching
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref AlbFullName
        - Name: TargetGroup
          Value: !GetAtt WebTargetGroup.TargetGroupFullName
  WebTargetGroupHttp5xxAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt WebTargetGroupHttp5xxAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:ops:cloudwatch-log-group-name, Value: !Ref WebTaskLogGroup }
        - { Key: prx:dev:application, Value: Exchange }

  TaskUser:
    # TODO Someday when the AWS client within the Exchange app has support for
    # role-based authentication, these policies should be moved into the task
    # role, and the user should be removed
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        # When the user key/secret are passed into the task def, they are
        # available when aws-secrets runs, so they'll be used for those calls,
        # rather than the task role.
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceDecryptPolicyArn
        - Fn::ImportValue: !Sub ${SecretsStackName}-SecretsInstanceAccessPolicyArn
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: !Ref PorterJobExecutionSnsTopicArn
                Sid: AllowPorterJobExecution
            Version: "2012-10-17"
          PolicyName: Porter
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:Get*
                  - s3:ListBucket*
                  - s3:Put*
                Effect: Allow
                Resource: !Ref MediajointS3BucketArn
                Sid: AllowBucketActions
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:Delete*
                  - s3:Get*
                  - s3:List*
                  - s3:Put*
                  - s3:RestoreObject
                Effect: Allow
                Resource: !Sub ${MediajointS3BucketArn}/*
                Sid: AllowObjectActions
            Version: "2012-10-17"
          PolicyName: MediajointBucket
        - PolicyDocument:
            Statement:
              - Action: sqs:ListQueues
                Effect: Allow
                Resource: "*"
                Sid: AllowSqsList
              - Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${Constants.SqsQueuePrefix}*
                Sid: AllowActiveMessaging
            Version: "2012-10-17"
          PolicyName: AppQueues
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Network }
  TaskUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref TaskUser

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  WebEcsService:
    Type: AWS::ECS::Service
    Condition: HasAuroraEndpoint # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsProduction, 5, 2]
      EnableECSManagedTags: true
      LoadBalancers:
        - ContainerName: !Ref kWebContainerName
          ContainerPort: !Ref kWebApplicationPort
          TargetGroupArn: !Ref WebTargetGroup
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      TaskDefinition: !Ref WebTaskDefinition
  WebTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WebTaskLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref WebTaskLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - web
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: exchange
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_SIGNER_URL
              Value: !Ref S3SigningEndpointUrl
            - Name: AWS_SIGNER_KEY
              Value: !Ref S3SigningAccessKeyId
            - Name: DB_PORT_3306_TCP_ADDR
              Value: !Ref SharedAuroraMysqlEndpoint
            - Name: DB_PORT_3306_TCP_PORT
              Value: !Ref SharedAuroraMysqlPort
            - Name: MEMCACHED_PORT_11211_TCP_ADDR
              Value: !Ref SharedMemcachedEndpointAddress
            - Name: MEMCACHED_PORT_11211_TCP_PORT
              Value: !Ref SharedMemcachedEndpointPort
            - Name: SMTP_ADDRESS
              Value: !Sub email-smtp.${AWS::Region}.amazonaws.com
            - Name: SMTP_AUTHENTICATION
              Value: login
            - Name: SMTP_PORT
              Value: "587"
            - Name: SMTP_DOMAIN
              Value: prx.org
            - Name: SMTP_USER_NAME
              Value: !GetAtt SesSendingSmtpCredentials.UserName
            - Name: SMTP_PASSWORD
              Value: !GetAtt SesSendingSmtpCredentials.Password
            - Name: SQS_PREFIX
              Value: !GetAtt Constants.SqsQueuePrefix
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: AWS_ACCESS_KEY_ID
              Value: !Ref TaskUserAccessKey
            - Name: AWS_SECRET_ACCESS_KEY
              Value: !GetAtt TaskUserAccessKey.SecretAccessKey
            - Name: AWS_BUCKET
              Value: !Select [5, !Split [":", !Ref MediajointS3BucketArn]]
            - Name: AUTH_HOST
              Value: !Ref IdHostname
            - Name: ASSET_HOST
              Value: !If [IsProduction, assets2.prx.org, !Ref ExchangeHostname]
            - Name: CASTLE_HOST
              Value: !Ref TheCastleHostname
            - Name: CASTLE_PORT
              Value: "80"
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: COUNT_HOST
              Value: !Ref TheCountHostname
            - Name: PRX_HOST
              Value: !Ref BetaHostname
            - Name: SITE_HOST
              Value: !Ref ExchangeHostname
            - Name: PORTER_SNS_TOPIC
              Value: !Ref PorterJobExecutionSnsTopicArn
            - Name: PORTER_AUDIO_PROCESSING
              Value: "true"
            - Name: RAILS_LOG_STDOUT
              Value: "true"
            - Name: MODEL_SITE_HOST
              Value: !Ref ExchangeHostname
            - Name: DATABASE_POOL_SIZE
              Value: "5"
            - Name: NEW_RELIC_LICENSE_KEY
              Value: !Ref NewRelicApiKeyPrxLite
          Essential: true
          Image: !Ref EcrImageTag
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWebContainerName
          PortMappings:
            - ContainerPort: !Ref kWebApplicationPort
              HostPort: 0
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      TaskRoleArn: !GetAtt TaskRole.Arn

  WorkerEcsService:
    Type: AWS::ECS::Service
    Condition: EnableWorkers # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !If [IsProduction, 6, 1]
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      TaskDefinition: !Ref WorkerTaskDefinition
  WorkerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  WorkerTaskLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref WorkerTaskLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - worker
          Cpu: !If [IsProduction, 200, 128]
          Environment:
            - Name: APP_NAME
              Value: exchange
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_SIGNER_URL
              Value: !Ref S3SigningEndpointUrl
            - Name: AWS_SIGNER_KEY
              Value: !Ref S3SigningAccessKeyId
            - Name: DB_PORT_3306_TCP_ADDR
              Value: !Ref SharedAuroraMysqlEndpoint
            - Name: DB_PORT_3306_TCP_PORT
              Value: !Ref SharedAuroraMysqlPort
            - Name: MEMCACHED_PORT_11211_TCP_ADDR
              Value: !Ref SharedMemcachedEndpointAddress
            - Name: MEMCACHED_PORT_11211_TCP_PORT
              Value: !Ref SharedMemcachedEndpointPort
            - Name: SMTP_ADDRESS
              Value: !Sub email-smtp.${AWS::Region}.amazonaws.com
            - Name: SMTP_AUTHENTICATION
              Value: login
            - Name: SMTP_PORT
              Value: "587"
            - Name: SMTP_DOMAIN
              Value: prx.org
            - Name: SMTP_USER_NAME
              Value: !GetAtt SesSendingSmtpCredentials.UserName
            - Name: SMTP_PASSWORD
              Value: !GetAtt SesSendingSmtpCredentials.Password
            - Name: SQS_PREFIX
              Value: !GetAtt Constants.SqsQueuePrefix
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: AWS_ACCESS_KEY_ID
              Value: !Ref TaskUserAccessKey
            - Name: AWS_SECRET_ACCESS_KEY
              Value: !GetAtt TaskUserAccessKey.SecretAccessKey
            - Name: AWS_BUCKET
              Value: !Select [5, !Split [":", !Ref MediajointS3BucketArn]]
            - Name: AUTH_HOST
              Value: !Ref IdHostname
            - Name: ASSET_HOST
              Value: !If [IsProduction, assets2.prx.org, !Ref ExchangeHostname]
            - Name: CASTLE_HOST
              Value: !Ref TheCastleHostname
            - Name: CASTLE_PORT
              Value: "80"
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: COUNT_HOST
              Value: !Ref TheCountHostname
            - Name: PRX_HOST
              Value: !Ref BetaHostname
            - Name: SITE_HOST
              Value: !Ref ExchangeHostname
            - Name: PORTER_SNS_TOPIC
              Value: !Ref PorterJobExecutionSnsTopicArn
            - Name: PORTER_AUDIO_PROCESSING
              Value: "true"
            - Name: RAILS_LOG_STDOUT
              Value: "true"
            - Name: MODEL_SITE_HOST
              Value: !Ref ExchangeHostname
            - Name: DATABASE_POOL_SIZE
              Value: "5"
            - Name: NEW_RELIC_LICENSE_KEY
              Value: !Ref NewRelicApiKeyPrxLite
          Essential: true
          Image: !Ref EcrImageTag
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WorkerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: !If [IsProduction, 2000, 1000]
          MemoryReservation: !If [IsProduction, 1000, 500]
          Name: !Ref kWorkerContainerName
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      TaskRoleArn: !GetAtt TaskRole.Arn

  WorkerEcsServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: EnableWorkers # See README
    Properties:
      MinCapacity: !If [IsProduction, 2, 1]
      MaxCapacity: !If [IsProduction, 20, 4]
      ResourceId: !Sub service/${EcsClusterName}/${WorkerEcsService.Name}
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  WorkerEcsServiceStepScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: EnableWorkers # See README
    Properties:
      PolicyName: ExchangeWorkerScaleIn
      PolicyType: StepScaling
      ScalingTargetId: !Ref WorkerEcsServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: -9
            MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
          - MetricIntervalUpperBound: -9
            ScalingAdjustment: -2
  WorkerEcsServiceStepScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableWorkers # See README
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref WorkerEcsServiceStepScaleInPolicy
      AlarmDescription: Scale in exchange workers
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeliveryUpdateQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 10
      TreatMissingData: notBreaching
  WorkerEcsServiceStepScaleInAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: EnableWorkers # See README
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt WorkerEcsServiceStepScaleInAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  WorkerEcsServiceStepScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: EnableWorkers # See README
    Properties:
      PolicyName: ExchangeWorkerScaleOut
      PolicyType: StepScaling
      ScalingTargetId: !Ref WorkerEcsServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 120
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 80
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 80
            MetricIntervalUpperBound: 380
            ScalingAdjustment: 4
          - MetricIntervalLowerBound: 380
            ScalingAdjustment: 6
  WorkerEcsServiceStepScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableWorkers # See README
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref WorkerEcsServiceStepScaleOutPolicy
      AlarmDescription: Scale out exchange workers
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeliveryUpdateQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 20
      TreatMissingData: notBreaching
  WorkerEcsServiceStepScaleOutAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: EnableWorkers # See README
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt WorkerEcsServiceStepScaleOutAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }

  SayWhenEcsService:
    Type: AWS::ECS::Service
    Condition: EnableWorkers # See README
    Properties:
      Cluster: !Ref EcsClusterArn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      TaskDefinition: !Ref SayWhenTaskDefinition
  SayWhenTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  SayWhenTaskLogGroupTags:
    Type: Custom::CloudWatchLogGroupTags
    Properties:
      ServiceToken: !Ref CloudWatchLogGroupTaggerServiceToken
      LogGroupName: !Ref SayWhenTaskLogGroup
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  SayWhenTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - worker
          Cpu: 100 # TODO
          Environment:
            - Name: APP_NAME
              Value: exchange
            - Name: APP_ENV
              Value: !Ref EnvironmentTypeAbbreviation
            - Name: AWS_SECRETS_BASE
              Value: !Ref SecretsBase
            - Name: AWS_SECRETS_VERSION
              Value: !Ref SecretsVersion
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_SIGNER_URL
              Value: !Ref S3SigningEndpointUrl
            - Name: AWS_SIGNER_KEY
              Value: !Ref S3SigningAccessKeyId
            - Name: DB_PORT_3306_TCP_ADDR
              Value: !Ref SharedAuroraMysqlEndpoint
            - Name: DB_PORT_3306_TCP_PORT
              Value: !Ref SharedAuroraMysqlPort
            - Name: MEMCACHED_PORT_11211_TCP_ADDR
              Value: !Ref SharedMemcachedEndpointAddress
            - Name: MEMCACHED_PORT_11211_TCP_PORT
              Value: !Ref SharedMemcachedEndpointPort
            - Name: SAY_WHEN_THREAD
              Value: "true"
            - Name: SMTP_ADDRESS
              Value: !Sub email-smtp.${AWS::Region}.amazonaws.com
            - Name: SMTP_AUTHENTICATION
              Value: login
            - Name: SMTP_PORT
              Value: "587"
            - Name: SMTP_DOMAIN
              Value: prx.org
            - Name: SMTP_USER_NAME
              Value: !GetAtt SesSendingSmtpCredentials.UserName
            - Name: SMTP_PASSWORD
              Value: !GetAtt SesSendingSmtpCredentials.Password
            - Name: SQS_PREFIX
              Value: !GetAtt Constants.SqsQueuePrefix
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: AWS_ACCESS_KEY_ID
              Value: !Ref TaskUserAccessKey
            - Name: AWS_SECRET_ACCESS_KEY
              Value: !GetAtt TaskUserAccessKey.SecretAccessKey
            - Name: AWS_BUCKET
              Value: !Select [5, !Split [":", !Ref MediajointS3BucketArn]]
            - Name: AUTH_HOST
              Value: !Ref IdHostname
            - Name: ASSET_HOST
              Value: !If [IsProduction, assets2.prx.org, !Ref ExchangeHostname]
            - Name: CASTLE_HOST
              Value: !Ref TheCastleHostname
            - Name: CASTLE_PORT
              Value: "80"
            - Name: CMS_HOST
              Value: !Ref CmsHostname
            - Name: COUNT_HOST
              Value: !Ref TheCountHostname
            - Name: PRX_HOST
              Value: !Ref BetaHostname
            - Name: SITE_HOST
              Value: !Ref ExchangeHostname
            - Name: PORTER_SNS_TOPIC
              Value: !Ref PorterJobExecutionSnsTopicArn
            - Name: PORTER_AUDIO_PROCESSING
              Value: "true"
            - Name: RAILS_LOG_STDOUT
              Value: "true"
            - Name: MODEL_SITE_HOST
              Value: !Ref ExchangeHostname
            - Name: DATABASE_POOL_SIZE
              Value: "5"
            - Name: NEW_RELIC_LICENSE_KEY
              Value: !Ref NewRelicApiKeyPrxLite
          Essential: true
          Image: !Ref EcrImageTag
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SayWhenTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Memory: 400 # TODO
          Name: !Ref kSayWhenContainerName
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: bridge
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      TaskRoleArn: !GetAtt TaskRole.Arn
  SayWhenQueueHighVisibleMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub FATAL [Exchange] SayWhen queue <${EnvironmentTypeAbbreviation}> MANY VISIBLE MESSAGES (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Exchange's SayWhen queue contains an unusually high
        number of messages, which likely means processing has fallen behind or
        has stopped entirely.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SayWhenQueue.QueueName
      EvaluationPeriods: 12
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Average
      Threshold: 50
      TreatMissingData: notBreaching
  SayWhenQueueHighVisibleMessagesAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt SayWhenQueueHighVisibleMessagesAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }

  DeliveryUpdateQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub FATAL [Exchange] Delivery update queue <${EnvironmentTypeAbbreviation}> MANY VISIBLE MESSAGES (${RootStackName})
      AlarmDescription: !Sub >-
        ${EnvironmentType} Exchange's delivery updates queue contains an
        unusually high number of messages, which likely means audio file
        deliveries to stations are falling behind.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeliveryUpdateQueue.QueueName
      EvaluationPeriods: 12
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Average
      Threshold: 100
      TreatMissingData: notBreaching
  DeliveryUpdateQueueAlarmTags:
    Type: Custom::CloudWatchAlarmTags
    Condition: IsProduction
    Properties:
      ServiceToken: !Ref CloudWatchAlarmTaggerServiceToken
      AlarmArn: !GetAtt DeliveryUpdateQueueAlarm.Arn
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }

  FixerAudioQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}FixerAudio
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  PerformSolrSaveQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}PerformSolrSave
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  PerformSolrDestroyQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}PerformSolrDestroy
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  PublishPieceQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}PublishPiece
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  UnpublishPieceQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}UnpublishPiece
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  PurchasePieceQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}PurchasePiece
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  DropBoxFileQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}DropBoxFile
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  UpdateUserTypeQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}UpdateUserType
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  EmailUsersQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}EmailUsers
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  UpdatePieceLengthQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}UpdatePieceLength
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  EmailGroupQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}EmailGroup
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  SayWhenQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}SayWhen
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  DeliveryUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}DeliveryUpdate
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  StationPasswordQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}StationPassword
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  ApproveSubscriptionQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}ApproveSubscription
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  EmailNotificationsQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}EmailNotifications
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour
  PorterCallbackQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 345600 # 4 days
      QueueName: !Sub ${Constants.SqsQueuePrefix}_exchange_porter_callback
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VisibilityTimeout: 5400 # 1.5 hour

  FtpUserAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !Ref TransferS3BucketArn
                Sid: AllowBucketReadOnly
              - Action:
                  - s3:GetObject
                  - s3:GetObjectAttributes
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionAttributes
                Effect: Allow
                Resource: !Sub ${TransferS3BucketArn}/*
                Sid: AllowObjectReadOnly
            Version: "2012-10-17"
          PolicyName: TransferUserBasePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  FtpServerAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      # CodeUri:
      #   Bucket: !Ref CodeS3Bucket
      #   Key: !Ref CodeS3ObjectKey
      Description: !Sub ${EnvironmentType} FTP transfer server authorizer
      Environment:
        Variables:
          FTP_USER_ACCESS_ROLE: !GetAtt FtpUserAccessRole.Arn
          S3_BUCKET_ARN: !Ref TransferS3BucketArn
      Handler: index.handler
      InlineCode: |
        exports.handler = async (event) => {};
      MemorySize: 128
      Runtime: nodejs14.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:cloudformation:root-stack-name: !Ref RootStackName
        prx:cloudformation:root-stack-id: !Ref RootStackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:application: Exchange
      Timeout: 5
  FtpServerAuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${FtpServerAuthorizerFunction}
      RetentionInDays: 14
  FtpServerAuthorizerFunctionPermission:
    Type: AWS::Lambda::Permission
    # TODO This should have a condition
    # https://docs.aws.amazon.com/transfer/latest/userguide/custom-identity-provider-users.html#lambda-resource-policy
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FtpServerAuthorizerFunction.Arn
      Principal: transfer.amazonaws.com
  FtpServerLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:log-group:/aws/transfer/*
                Sid: AllowLogging
            Version: "2012-10-17"
          PolicyName: TransferActivityLogging
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  FtpServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Controls access to and from FTP server
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_exchange_ftp" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      VpcId: !Ref VpcId
  FtpServer:
    Type: AWS::Transfer::Server
    Condition: IsStaging
    Properties:
      Domain: S3
      EndpointDetails:
        SecurityGroupIds:
          - !GetAtt FtpServerSecurityGroup.GroupId
        SubnetIds:
          - !Ref VpcPublicSubnet1Id
          - !Ref VpcPublicSubnet2Id
          - !Ref VpcPublicSubnet3Id
        VpcId: !Ref VpcId
      EndpointType: VPC
      IdentityProviderDetails:
        Function: !GetAtt FtpServerAuthorizerFunction.Arn
      IdentityProviderType: AWS_LAMBDA
      LoggingRole: !GetAtt FtpServerLoggingRole.Arn
      PostAuthenticationLoginBanner: tktktk1
      PreAuthenticationLoginBanner: tktktk2
      # ProtocolDetails:
      #   ProtocolDetails
      Protocols:
        - SFTP
        - FTP
      SecurityPolicyName: TransferSecurityPolicy-2020-06
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
  FtpServerLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsStaging
    Properties:
      LogGroupName: !Sub /aws/transfer/${FtpServer.ServerId}
      RetentionInDays: 14
  FtpServerNlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: IsStaging
    Properties:
      IpAddressType: dualstack
      Scheme: internet-facing
      Subnets:
        - !Ref VpcPublicSubnet1Id
        - !Ref VpcPublicSubnet2Id
        - !Ref VpcPublicSubnet3Id
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      Type: network
  FtpServerFtpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsStaging
    DependsOn: FtpServerNlb
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 21
      HealthyThresholdCount: 3
      Port: 21
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      # Targets:
      #   - Id: !Ref FtpServerElasticIP1
      #   - Id: !Ref FtpServerElasticIP2
      #   - Id: !Ref FtpServerElasticIP3
      TargetType: ip
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_exchange_ftp" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  FtpServerFtpNlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: IsStaging
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FtpServerFtpTargetGroup
      LoadBalancerArn: !Ref FtpServerNlb
      Port: 21
      Protocol: TCP
  FtpServerSftpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsStaging
    DependsOn: FtpServerNlb
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 21
      HealthyThresholdCount: 3
      Port: 22
      Protocol: TCP
      # Targets:
      #   - Id: !Ref FtpServerElasticIP1
      #   - Id: !Ref FtpServerElasticIP2
      #   - Id: !Ref FtpServerElasticIP3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
      TargetType: ip
      Tags:
        - { Key: Name, Value: !Sub "${RootStackName}_exchange_ftp" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Exchange }
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  FtpServerSftpNlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: IsStaging
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FtpServerFtpTargetGroup
      LoadBalancerArn: !Ref FtpServerNlb
      Port: 22
      Protocol: TCP

Outputs:
  WebTargetGroupFullName:
    Value: !GetAtt WebTargetGroup.TargetGroupFullName
