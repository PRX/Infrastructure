# stacks/shared-announce.yml
#
# Announce handles both ends of the pub/sub model. Applications may publish
# events about certain entities. Those messages go to SNS topics general to
# the entity and action (e.g., episode_publish). Other applications consume
# those messages via application-specific SQS queues (e.g.,
# feeder_episode_publish). A subscription is needed to deliver the messages
# sent to the SNS topics to the SQS queues.
#
# The applications use derived names for the topics and queues that they
# interact with. The resources created by this template must be named in a way
# that aligns with thosed derivations.
#
# By convention, this stack outputs a prefix value that is passed to each
# application to be used as part of those derived values.
#
# For example, Feeder may expect a queue to exist with the name:
# myPrefix_stag_episode_publish. Based on that expecation, a queue will be
# created in this stack with that name. The `myPrefix` part of that name is an
# output of this stack, and should be passed to the Feeder stack, so that
# the Announce gem can be configured to use that value.
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates SQS and SNS resources used by various applications via the Announce
  Ruby gem system. Also creates the necessary subscriptions between topics and
  queues.

Parameters:
  EnvironmentType: { Type: String }
  EnvironmentTypeAbbreviation: { Type: String }
  RootStackName: { Type: String }
  RootStackId: { Type: String }

Resources:
  PlaceholderTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common }
      TopicName: !Sub ${AWS::StackName}_${EnvironmentTypeAbbreviation}_announce_mySubject_myVerb
  PlaceholderTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: AnnouncePolicy
        Statement:
          - Action: sqs:SendMessage
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource: !GetAtt PlaceholderQueue.Arn
            Sid: SqsSend
        Version: "2012-10-17"
      Topics:
        - !Ref PlaceholderTopic

  PlaceholderQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800 # 7 days
      ReceiveMessageWaitTimeSeconds: 0
      # RedrivePolicy:
      #   deadLetterTargetArn: !GetAtt DefaultJobDeadletterQueue.Arn
      #   maxReceiveCount: 10
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:cloudformation:root-stack-name, Value: !Ref RootStackName }
        - { Key: prx:cloudformation:root-stack-id, Value: !Ref RootStackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:application, Value: Common } # TODO App-specific
      VisibilityTimeout: 3600 # 1 hour

  PlaceholderSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt PlaceholderQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref PlaceholderTopic

Outputs:
  ResourcePrefix:
    Value: !Ref AWS::StackName
