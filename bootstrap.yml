# This creates a stack that watches for changes to infrastructure definitions,
# and updates resources to maintain that infrastructure. It is generally
# designed to maintain a single staging and single production environment in
# certain AWS regions. The direct result of a successful execution of the
# CodePipeline will be a single root staging CloudFormation stack. Optionally
# a single root production stack may be created (or updated) as well, based on
# an approval. Launching a root stack is intended to launch one or more nested
# stacks that represent individial apps or services, or collections of apps or
# services (ie a stack with further nested stacks). Configuration parameters
# used within a root stack, or stacks nested any number of levels below the root
# stack, are stored in configuration files in S3. A set of config files for
# various environments (staging, production, etc) are stored together in a zip
# file, and the appropriate file is used when launching a specific stack
# for a given environment.
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This is a bootstrapping template. Is launches a stack of resources, primarily
  a CodePipeline, which are designed to help automate deployments and updates of
  many PRX applications, servers, and services. This template is intended to act
  as an auxiliary support mechanism. Stacks and resources that are created as a
  result of this mechanism are only loosely tied back to any stack launched from
  this template. Which is to say, the bootstrapping stack can launch and update
  other stacks, but if the bootstrapping stack is torn down, those other stacks
  would continue to exist and function. The bootstrapping stack is not involved
  in the ongoing operation or orchestration of resultant stacks or resources,
  outside of creation and updates.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Authorization and Permissions
        Parameters:
          - GitHubOAuthToken
      - Label:
          default: Root Stack
        Parameters:
          - RootStackTemplateConfigBucket
          - RootStackTemplateConfigArchive
          - RootStackName
          - SingletonStackRegion
    ParameterLabels:
      GitHubOAuthToken:
        default: GitHub personal access token
      RootStackTemplateConfigBucket:
        default: Root stack template config bucket
      RootStackTemplateConfigArchive:
        default: Root stack template config archive (.zip)
      RootStackName:
        default: Root stack name
      SingletonStackRegion:
        default: Singleton stack region
Parameters:
  GitHubOAuthToken:
    Description: >
      A GitHub token with access to the Infrastructure repository that contains
      CloudFormation templates
    Type: String
  RootStackTemplateConfigBucket:
    Description: >
      Name of the S3 bucket that contains CloudFormation template configuration
      files that are used for launching new stacks
    Type: String
  RootStackTemplateConfigArchive:
    Description: >
      The name of the zip file that contains template configuration files for
      various environments (staging.json, production.json, etc). Include the
      entire file name (eg demo.zip)
    Type: String
  RootStackName:
    Description: >
      The name of the root stack that the bootstrapping process will create, and
      which will launch application and service stacks.
    Type: String
  SingletonStackRegion:
    Description: >
      The region in which singleton stacks (stacks that should only be launched
      once across all regions and environments) should be launched.
    Type: String
Resources:
  OpsStatusMessagesSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: CWStatus
  ArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      Tags:
        - Key: Project
          Value: Infrastructure
  StagingTemplateBucket:
    # The contents of the PRX/Infrastructure repository get synced into this
    # bucket so that the staging root stack is able to launch stacks for the
    # app- and service-specific templates that are tracked in the repository
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      Tags:
        - Key: Project
          Value: Infrastructure
  ProductionTemplateBucket:
    # The contents of the PRX/Infrastructure repository get synced into this
    # bucket so that the production root stack is able to launch stacks for the
    # app- and service-specific templates that are tracked in the repository
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      Tags:
        - Key: Project
          Value: Infrastructure
  StagingCodeBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 60
            Status: Enabled
      Tags:
        - Key: Project
          Value: Infrastructure
  ProductionCodeBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 60
            Status: Enabled
      Tags:
        - Key: Project
          Value: Infrastructure
  CodePipelineIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatusSNSPublishPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref OpsStatusMessagesSNSTopic
        - PolicyName: ArtifactStoreFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactStore}
                  - !Sub arn:aws:s3:::${ArtifactStore}/*
        - PolicyName: RootStacksCloudFormationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - !GetAtt CloudFormationIAMRole.Arn
              - Effect: Allow
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:DeleteChangeSet"
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${RootStackName}-Staging/*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${RootStackName}-Production/*
        - PolicyName: CodePipelineRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  # TODO Not sure what these are being used for
                  # Probably for source action buckets and artifact buckets
                  # Maybe also template buckets
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                Resource: "*"  # TODO Really?
              - Effect: Allow
                Action:
                  - "cloudwatch:*" # TODO Really?
                Resource: "*" # TODO Really?
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*" # TODO Really?
  CodeBuildIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  # NOTE When this policy is created by the AWS console during
                  # CodeBuild project creation, the log resources are tightly
                  # scoped to the project (eg log-group:/aws/codebuild/projName)
                  # but right now the name of that project isn't available until
                  # the project resource is created, and it relies on this IAM
                  # role. Need some way of that not being circular
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
        - PolicyName: ArtifactStoreBasicAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: !Sub arn:aws:s3:::${ArtifactStore}/*
        - PolicyName: TemplateBucketsBasicAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub arn:aws:s3:::${StagingTemplateBucket}
                  - !Sub arn:aws:s3:::${StagingTemplateBucket}/*
                  - !Sub arn:aws:s3:::${ProductionTemplateBucket}
                  - !Sub arn:aws:s3:::${ProductionTemplateBucket}/*
  CloudFormationIAMRole:
    # This is the role used to launch the root stack, and thus all nested app
    # and service stacks. It needs permissions to create any of the resources
    # that those stacks require. Eg, if a stack nested in the root stack
    # includes an S3 bucket resource, this role needs a policy that allows it
    # to create S3 buckets.
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: TemplateBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${StagingTemplateBucket}/*
                  - !Sub arn:aws:s3:::${ProductionTemplateBucket}/*
        - PolicyName: CodeBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${StagingCodeBucket}/*
                  - !Sub arn:aws:s3:::${ProductionCodeBucket}/*
        - PolicyName: CloudFormationRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*" # TODO Really?
                Resource: "*" # TODO Really?
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:PutLifecycleConfiguration
                Resource: "*" # TODO Really?
              - Effect: Allow
                # TODO Dangerous!
                Action:
                  - "ec2:*"
                  - "ecs:*"
                  - "iam:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "logs:*"
                  - "elasticloadbalancing:*"
                  - "route53:*"
                  - "application-autoscaling:*"
                  - "lambda:*"
                  - "sns:*"
                  - "codepipeline:*"
                  - "codebuild:*"
                  - "acm:*"
                  - "apigateway:*"
                Resource: "*" # TODO Really?
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: InfrastructureRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: PRX
                Repo: Infrastructure
                Branch: master
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              RunOrder: 1
            - Name: MetaRepo
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: PRX
                Repo: meta.prx.org
                Branch: master
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: MetaRepoSourceArtifact
              RunOrder: 1
            - Name: S3
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !Ref RootStackTemplateConfigBucket
                S3ObjectKey: !Ref RootStackTemplateConfigArchive
              OutputArtifacts:
                - Name: TemplateConfigZipArtifact
              RunOrder: 1
        - Name: Housekeeping
          Actions:
            - Name: TemplateSync
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref StagingSyncBuildProject
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              OutputArtifacts:
                - Name: StagingTemplateSyncArtifact
              RunOrder: 1
        - Name: Staging
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: TemplateConfigZipArtifact
                - Name: InfrastructureRepoSourceArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${RootStackName}ChangeSetStaging
                ParameterOverrides: !Sub |
                  {
                    "RootStackTemplateConfigBucket": "${RootStackTemplateConfigBucket}",
                    "RootStackTemplateConfigArchive": "${RootStackTemplateConfigArchive}",
                    "SingletonStackRegion": "${SingletonStackRegion}",
                    "OpsStatusMessagesSNSTopicArn": "${OpsStatusMessagesSNSTopic}"
                  }
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${RootStackName}-Staging
                TemplateConfiguration: TemplateConfigZipArtifact::staging.json
                TemplatePath: InfrastructureRepoSourceArtifact::root.yml
              RunOrder: 2
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              Configuration:
                NotificationArn: !Ref OpsStatusMessagesSNSTopic
                CustomData: "TODO Get info about the deploy (last commit, etc)"
              RunOrder: 3
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${RootStackName}ChangeSetStaging
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${RootStackName}-Staging
              RunOrder: 4
        - Name: Testing
          Actions:
            - Name: Acceptance
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref AcceptanceTestBuildProject
              InputArtifacts:
                - Name: MetaRepoSourceArtifact
              OutputArtifacts:
                - Name: AcceptanceTestArtifact
              RunOrder: 1
        - Name: Production
          Actions:
            - Name: TemplateSync
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref ProductionSyncBuildProject
              InputArtifacts:
                - Name: InfrastructureRepoSourceArtifact
              OutputArtifacts:
                - Name: ProductionTemplateSyncArtifact
              RunOrder: 1
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: TemplateConfigZipArtifact
                - Name: InfrastructureRepoSourceArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${RootStackName}ChangeSetProduction
                ParameterOverrides: !Sub |
                  {
                    "BootstrapStackName": "${AWS::StackName}",
                    "RootStackTemplateConfigBucket": "${RootStackTemplateConfigBucket}",
                    "RootStackTemplateConfigArchive": "${RootStackTemplateConfigArchive}",
                    "SingletonStackRegion": "${SingletonStackRegion}",
                    "OpsStatusMessagesSNSTopicArn": "${OpsStatusMessagesSNSTopic}"
                  }
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${RootStackName}-Production
                TemplateConfiguration: TemplateConfigZipArtifact::production.json
                TemplatePath: InfrastructureRepoSourceArtifact::root.yml
              RunOrder: 2
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 3
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${RootStackName}ChangeSetProduction
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${RootStackName}-Production
              RunOrder: 4
  StagingSyncBuildProject:
    # TODO It may be possible to do this action with a Lambda, which could be
    # considerably faster
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Syncs the GitHub repo to S3 for staging
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: TEMPLATE_BUCKET
            Value: !Ref StagingTemplateBucket
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
      Name: !Sub staging-template-sync-${AWS::Region}
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Source:
        Type: CODEPIPELINE
      Tags:
        - Key: Project
          Value: Infrastructure
      TimeoutInMinutes: 5
  ProductionSyncBuildProject:
    # TODO It may be possible to do this action with a Lambda, which could be
    # considerably faster
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Syncs the GitHub repo to S3 for production
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: TEMPLATE_BUCKET
            Value: !Ref ProductionTemplateBucket
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
      Name: !Sub production-template-sync-${AWS::Region}
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Source:
        Type: CODEPIPELINE
      Tags:
        - Key: Project
          Value: Infrastructure
      TimeoutInMinutes: 5
  AcceptanceTestBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Runs acceptance tests for PRX platform
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: DOVETAIL_HOST
            Value: https://dovetail-staging.prxu.org
          - Name: DOVETAIL_PROD
            Value: https://dovetail.prxu.org
        Image: aws/codebuild/ruby:2.1.10
        Type: LINUX_CONTAINER
      Name: !Sub acceptance-test-${AWS::Region}
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Source:
        Type: CODEPIPELINE
      Tags:
        - Key: Project
          Value: Infrastructure
      TimeoutInMinutes: 5
Outputs:
  StagingTemplateBucket:
    Description: >
      The name of the bucket that templates have been synced to, to be used
      in a staging environment
    Value: !Ref StagingTemplateBucket
    Export:
      Name: !Sub ${AWS::StackName}-Staging-TemplateBucket
  ProductionTemplateBucket:
    Description: >
      The name of the bucket that templates have been synced to, to be used
      in a production environment
    Value: !Ref ProductionTemplateBucket
    Export:
      Name: !Sub ${AWS::StackName}-Production-TemplateBucket
  StagingCodeBucket:
    Description: >
      The name of the bucket that code has been synced to, to be used
      in a staging environment
    Value: !Ref StagingCodeBucket
    Export:
      Name: !Sub ${AWS::StackName}-Staging-CodeBucket
  ProductionCodeBucket:
    Description: >
      The name of the bucket that code has been synced to, to be used
      in a production environment
    Value: !Ref ProductionCodeBucket
    Export:
      Name: !Sub ${AWS::StackName}-Production-CodeBucket
