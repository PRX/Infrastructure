AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This is a bootstrapping template. It creates AWS resources which in turn
  launch and manage CI/CD workflows for many PRX applications, servers, and
  services. The stack created from this template includes a CodePipeline that
  watches the github.com/PRX/Infrastructure repository, and creates and updates
  additional stacks as templates are added to and modified in that repository.
  A stack should be launched manually from this template in regions where CI/CD
  are required.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Authorization and Permissions
        Parameters:
          - GitHubOAuthToken
      - Label:
          defaut: Secure Assets
        Parameters:
          - TemplateConfigS3Bucket
          - TemplateConfigS3BucketRegion
          - TemplateConfigPrefix
      - Label:
          default: External Services
        Parameters:
          - SlackWebhookURL
    ParameterLabels:
      GitHubOAuthToken:
        default: GitHub personal access token
      SlackWebhookURL:
        default: Slack WebHook URL
      TemplateConfigS3Bucket:
        default: CloudFormation template config bucket
      TemplateConfigS3BucketRegion:
        default: CloudFormation template config region
Parameters:
  TemplateConfigS3Bucket:
    Description: >
      Name of the S3 bucket that contains CloudFormation template configuration
      files that are used for launching new stacks
    Type: String
  TemplateConfigS3BucketRegion:
    AllowedValues:
      - us-east-1
    Description: >
      The AWS region in which the template config bucket is located
    Type: String
  TemplateConfigPrefix:
    Description: >
      The prefix used for template config files that live in the template config
      bucket. (They are generally appended with -staging.yml, etc during the
      build process)
    Type: String
  GitHubOAuthToken:
    Description: >
      A GitHub token with access to the Infrastructure repository that contains
      CloudFormation templates
    Type: String
  SlackWebhookURL:
    Description: >
      The URL for an Incoming WebHook in Slack that notifications generated by
      CI/CD actions can be sent to
    Type: String
Resources:
  PipelineArtifactStoreBucket:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app or infrastructure data.
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
  CodePipelineIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CodePipelineRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: !Sub arn:aws:s3:::${PipelineArtifactStoreBucket}
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: !Sub arn:aws:s3:::${PipelineArtifactStoreBucket}/*
              - Effect: Allow
                Action:
                  - "cloudwatch:*"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"
  CodeBuildIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CodeBuildRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  # NOTE When this policy is created by the AWS console during
                  # CodeBuild project creation, the log resources are tightly
                  # scoped to the project (eg log-group:/aws/codebuild/projName)
                  # but right now the name of that project isn't available until
                  # the project resource is created, and it relies on this IAM
                  # role. Need some way of that not being circular
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: !Sub arn:aws:s3:::${PipelineArtifactStoreBucket}/*
  CloudFormationIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CloudFormationRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                Resource: "*"
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactStoreBucket
        Type: S3
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      Stages:
        - Name: Source
          # This stage pulls in various bits of template data needed to launch
          # or update a stack. It gets primary infrastructure code
          # (CloudFormation templates) from GitHub, and template Configuration
          # files from an S3 bucket set as a paramter on this bootstrap stack.
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: PRX
                Repo: Infrastructure
                Branch: master
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: GitHubSourceArtifact
              RunOrder: 1
            - Name: S3
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !Ref TemplateConfigS3Bucket
                S3ObjectKey: !Sub ${TemplateConfigPrefix}-staging.yml
              OutputArtifacts:
                - Name: StagingTemplateConfigArtifact
              RunOrder: 1
            # - Name: S3
            #   ActionTypeId:
            #     Category: Source
            #     Owner: AWS
            #     Provider: S3
            #     Version: 1
            #   Configuration:
            #     S3Bucket: !Ref TemplateConfigS3Bucket
            #     S3ObjectKey: !Sub ${TemplateConfigPrefix}-production.yml
            #   OutputArtifacts:
            #     - Name: ProductionTemplateConfigArtifact
            #   RunOrder: 1
        - Name: Build
          Actions:
            - Name: RootTemplate
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RootTemplateBuildProject
              InputArtifacts:
                - Name: GitHubSourceArtifact
              OutputArtifacts:
                - Name: RootTemplateArtifact
              RunOrder: 1
        # - Name: Deploy
        #   Actions:
        #     - Name: CreateStack
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Provider: CloudFormation
        #         Version: 1
        #       InputArtifacts:
        #         - Name: RootTemplateArtifact
        #       Configuration:
        #         ActionMode: REPLACE_ON_FAILURE
        #         RoleArn: !GetAtt [CFNRole, Arn]
        #         StackName: !Ref TestStackName
        #         TemplateConfiguration: !Sub "TemplateSource::${TestStackConfig}"
        #         TemplatePath: !Sub "TemplateSource::${TemplateFileName}"
        #       RunOrder: '1'
  RootTemplateBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Returns only the root.yml template
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
      Name: !Sub root-template-build-${AWS::Region}
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 5
