# This creates a stack that watches for changes to infrastructure definitions,
# and updates resources to maintain that infrastructure. It is generally
# designed to maintain a single staging and single production environment in
# certain AWS regions. The direct result of a successful execution of the
# CodePipeline will be a single root staging CloudFormation stack. Optionally
# a single root production stack may be created (or updated) as well, based on
# an approval. Launching a root stack is intended to launch one or more nested
# stacks that represent individial apps or services, or collections of apps or
# services (ie a stack with further nested stacks). Configuration parameters
# used within a root stack, or stacks nested any number of levels below the root
# stack, are stored in configuration files in S3. A set of config files for
# various environments (staging, production, etc) are stored together in a zip
# file, and the appropriate file is used when launching a specific stack
# for a given environment.
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This is a bootstrapping template. Is launches a stack of resources, primarily
  a CodePipeline, which are designed to help automate deployments and updates of
  many PRX applications, servers, and services. This template is intended to act
  as an auxiliary support mechanism. Stacks and resources that are created as a
  result of this mechanism are only loosely tied back to any stack launched from
  this template. Which is to say, the bootstrapping stack can launch and update
  other stacks, but if the bootstrapping stack is torn down, those other stacks
  would continue to exist and function. The bootstrapping stack is not involved
  in the ongoing operation or orchestration of resultant stacks or resources,
  outside of creation and updates.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Authorization and Permissions
        Parameters:
          - GitHubOAuthToken
      - Label:
          defaut: Root Stack
        Parameters:
          - TemplateConfigS3Bucket
          - TemplateConfigFile
          - RootStackName
      - Label:
          default: External Services
        Parameters:
          - SlackWebhookURL
    ParameterLabels:
      GitHubOAuthToken:
        default: GitHub personal access token
      SlackWebhookURL:
        default: Slack WebHook URL
      TemplateConfigS3Bucket:
        default: CloudFormation template config bucket
      TemplateConfigFile:
        default: CloudFormation template config archive (.zip)
      RootStackName:
        default: Root stack name
Parameters:
  TemplateConfigS3Bucket:
    Description: >
      Name of the S3 bucket that contains CloudFormation template configuration
      files that are used for launching new stacks
    Type: String
  TemplateConfigFile:
    Description: >
      The name of the zip file that contains template configuration files for
      various environments (staging.json, production.json, etc). Include the
      entire file name (eg demo.zip)
    Type: String
  GitHubOAuthToken:
    Description: >
      A GitHub token with access to the Infrastructure repository that contains
      CloudFormation templates
    Type: String
  RootStackName:
    Description: >
      The name of the root stack that the bootstrapping process will create, and
      which will launch application and service stacks.
    Type: String
  SlackWebhookURL:
    Description: >
      The URL for an Incoming WebHook in Slack that notifications generated by
      CI/CD actions can be sent to
    Type: String
Resources:
  ArtifactStore:
    # The bucket used to store artifacts generated by CodePipeline actions.
    # This bucket is to be used exclusively by AWS; don't use it to store any
    # app, infrastructure, or user data.
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
  StagingTemplateBucket:
    # The contents of the PRX/Infrastructure repository get synced into this
    # bucket so that the staging root stack is able to launch stacks for the
    # app- and service-specific templates that are tracked in the repository
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
  ProductionTemplateBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
  CodePipelineIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CodePipelineRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: !Sub arn:aws:s3:::${ArtifactStore}
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: !Sub arn:aws:s3:::${ArtifactStore}/*
              - Effect: Allow
                Action:
                  - "cloudwatch:*"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${RootStackName}-Staging/*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${RootStackName}-Production/*
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: !GetAtt CloudFormationIAMRole.Arn
  CodeBuildIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CodeBuildRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  # NOTE When this policy is created by the AWS console during
                  # CodeBuild project creation, the log resources are tightly
                  # scoped to the project (eg log-group:/aws/codebuild/projName)
                  # but right now the name of that project isn't available until
                  # the project resource is created, and it relies on this IAM
                  # role. Need some way of that not being circular
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: !Sub arn:aws:s3:::${ArtifactStore}/*
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:PutObject"
                Resource:
                  - !Sub arn:aws:s3:::${StagingTemplateBucket}
                  - !Sub arn:aws:s3:::${StagingTemplateBucket}/*
                  - !Sub arn:aws:s3:::${ProductionTemplateBucket}
                  - !Sub arn:aws:s3:::${ProductionTemplateBucket}/*
  CloudFormationIAMRole:
    # This is the role used to launch the root stack, and thus all nested app
    # and service stacks. It needs permissions to create any of the resources
    # that those stacks require. Eg, if a stack nested in the root stack
    # includes an S3 bucket resource, this role needs a policy that allows it
    # to create S3 buckets.
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CloudFormationRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                Resource: "*"
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStore
        Type: S3
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: PRX
                Repo: Infrastructure
                Branch: master
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: GitHubSourceArtifact
              RunOrder: 1
            - Name: S3
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !Ref TemplateConfigS3Bucket
                S3ObjectKey: !Ref TemplateConfigFile
              OutputArtifacts:
                - Name: TemplateConfigZipArtifact
              RunOrder: 1
        - Name: Staging
          Actions:
            - Name: TemplateSync
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref StagingSyncBuildProject
              InputArtifacts:
                - Name: GitHubSourceArtifact
              OutputArtifacts:
                - Name: StagingTemplateSyncArtifact
              RunOrder: 1
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: TemplateConfigZipArtifact
                - Name: GitHubSourceArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                ChangeSetName: !Sub ${RootStackName}ChangeSetStaging
                StackName: !Sub ${RootStackName}-Staging
                TemplateConfiguration: TemplateConfigZipArtifact::staging.json
                TemplatePath: GitHubSourceArtifact::root.yml
              RunOrder: 2
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 3
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub ${RootStackName}ChangeSetStaging
                RoleArn: !GetAtt CloudFormationIAMRole.Arn
                StackName: !Sub ${RootStackName}-Staging
              RunOrder: 4
  StagingSyncBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Syncs the GitHub repo to S3 for staging
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: TEMPLATE_BUCKET
            Value: !Ref StagingTemplateBucket
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
      Name: !Sub staging-template-sync-${AWS::Region}
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 5
