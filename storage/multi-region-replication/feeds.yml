# storage/multi-region-replication/radiotopia-media.yml

################################################################################
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Changes to this template must be deployed to all regions immediately!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
################################################################################

AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates an S3 bucket to be used as an origin for the f.prxu.org
  CloudFront distribution. Contents will be replicated to a second region.
  Buckets in both regions are created using this template. Once both buckets
  have been created, the destination bucket parameter should be set on the
  stack that is serving as the source region.

Parameters:
  BucketNameOverride:
    Type: String
  DestinationBucketArn:
    Type: String
  CloudFrontOai:
    Type: String
    AllowedPattern: ^arn:aws:iam::cloudfront:user\/CloudFront Origin Access Identity [A-Z0-9]+$
  PorterWriterRoleArn:
    Type: String
  EnvironmentType:
    Type: String
    AllowedValues:
      - Staging
      - Production

Conditions:
  HasDestinationBucketArn: !Not [!Equals [!Ref DestinationBucketArn, ""]]
  HasBucketNameOverride: !Not [!Equals [!Ref BucketNameOverride, ""]]

Mappings:
  EnvironmentTypeMap:
    Staging:
      abbreviation: stag
    Production:
      abbreviation: prod

Resources:
  ReplicationRole:
    Type: AWS::IAM::Role
    Condition: HasDestinationBucketArn
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeds }
  ReplicationSourcePolicy:
    Type: AWS::IAM::Policy
    Condition: HasDestinationBucketArn
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetReplicationConfiguration
              - s3:ListBucket
            Effect: Allow
            Resource: !GetAtt FeedsBucket.Arn
          - Action:
              - s3:GetObjectVersionForReplication
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
            Effect: Allow
            Resource: !Sub ${FeedsBucket.Arn}/*
        Version: "2012-10-17"
      PolicyName: ReplicationSourcePolicy
      Roles:
        - !Ref ReplicationRole
  ReplicationDestinationPolicy:
    Type: AWS::IAM::Policy
    Condition: HasDestinationBucketArn
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicateTags
            Effect: Allow
            Resource: !Sub ${DestinationBucketArn}/*
        Version: "2012-10-17"
      PolicyName: ReplicationDestinationPolicy
      Roles:
        - !Ref ReplicationRole

  FeedsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !If
        - HasBucketNameOverride
        - !Ref BucketNameOverride
        - Fn::Sub:
            - prx-mrr-${AWS::Region}-feed-${env}
            - env: !FindInMap [EnvironmentTypeMap, !Ref EnvironmentType, abbreviation]
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: []
            AllowedMethods: [GET]
            AllowedOrigins: ["*"]
            ExposedHeaders: []
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 1 # Permanently delete non-current versions
            Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration: !If
        - HasDestinationBucketArn
        - Role: !GetAtt ReplicationRole.Arn
          Rules:
            - Destination:
                Bucket: !Ref DestinationBucketArn
              Status: Enabled
        - !Ref AWS::NoValue
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feeds }
      VersioningConfiguration:
        Status: Enabled # Required for replication
  FeedsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FeedsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS: !Ref CloudFrontOai
            Resource: !Sub ${FeedsBucket.Arn}/*
            Sid: Grant read access to a CloudFront Origin Identity
          - Action: s3:ListBucketMultipartUploads
            Effect: Allow
            Principal:
              AWS: !Ref PorterWriterRoleArn
            Resource: !GetAtt FeedsBucket.Arn
            Sid: Grant list access to Porter
          - Action:
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
            Effect: Allow
            Principal:
              AWS: !Ref PorterWriterRoleArn
            Resource: !Sub ${FeedsBucket.Arn}/*
            Sid: Grant write access to Porter
