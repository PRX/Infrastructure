AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  HealthCheckFtpUser: { Type: String }
  HealthCheckFtpPassword: { NoEcho: true, Type: String }

  ProductionUsEast1LoadBalancerHostname: { Type: String }
  ProductionUsWest2LoadBalancerHostname: { Type: String }

Resources:
  BasicFtpLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: basic-ftp NPM module
      ContentUri: lib/basic-ftp
      CompatibleRuntimes:
        - nodejs18.x

  # Creates a Lambda function to continuously test connections to a server. It
  # will be invoked on a regular interval using a rule. If the connection fails,
  # the execution will result in a Lambda error. A CloudWatch Alarm is
  # triggered whenever the function is reporting errors. A Route 53 Helath
  # Check uses this Alarm to detemine the health of the check; when the Alarm
  # is in error, the health check will be unhealthy. The DNS records for the
  # server being checked by the Lambda function are associated with the health
  # check, traffic will be routed away from the server when the check is
  # unhealthy.
  ProdUsEast1ConntestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/conntest/
      Description: >-
        Tests FTP connections
      Environment:
        Variables:
          FQDN: !Ref ProductionUsEast1LoadBalancerHostname
          FTP_USER: !Ref HealthCheckFtpUser
          FTP_PASSWORD: !Ref HealthCheckFtpPassword
      Events:
        Cron:
          Properties:
            Description: FTP server test
            Schedule: rate(1 minute)
            State: ENABLED
          Type: Schedule
      Handler: index.handler
      Layers:
        - !Ref BasicFtpLambdaLayer
      MemorySize: 128
      Runtime: nodejs18.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: Broadcast Delivery
      Timeout: 10
  ProdUsEast1ConntestLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProdUsEast1ConntestFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Broadcast Delivery }
  ProdUsEast1ConntestErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [FTP] us-east-1 Connection Test <prod> TEST FAILURES (${AWS::StackName})
      AlarmDescription: >-
        The production FTP connection tester for us-east-1 Transfer Family
        servers is failing to connect. This generally means either the servers
        or the authorization Lambda in us-east-1 are down, meaning those
        servers are unavailable.

        If all connection tests for this region fail, the region will be
        removed from the DNS pool.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProdUsEast1ConntestFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: breaching
  ProdUsEast1ConntestHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        AlarmIdentifier:
          Name: !Ref ProdUsEast1ConntestErrorAlarm
          Region: !Ref AWS::Region
        InsufficientDataHealthStatus: Unhealthy
        Type: CLOUDWATCH_METRIC
      HealthCheckTags:
        - { Key: Name, Value: !Sub "delivery_prod_us-east-1_synthetic_from-${AWS::Region}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Broadcast Delivery }

  # Creates a Lambda function to continuously test connections to a server. It
  # will be invoked on a regular interval using a rule. If the connection fails,
  # the execution will result in a Lambda error. A CloudWatch Alarm is
  # triggered whenever the function is reporting errors. A Route 53 Helath
  # Check uses this Alarm to detemine the health of the check; when the Alarm
  # is in error, the health check will be unhealthy. The DNS records for the
  # server being checked by the Lambda function are associated with the health
  # check, traffic will be routed away from the server when the check is
  # unhealthy.
  ProdUsWest2ConntestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/conntest/
      Description: >-
        Tests FTP connections
      Environment:
        Variables:
          FQDN: !Ref ProductionUsWest2LoadBalancerHostname
          FTP_USER: !Ref HealthCheckFtpUser
          FTP_PASSWORD: !Ref HealthCheckFtpPassword
      Events:
        Cron:
          Properties:
            Description: FTP server test
            Schedule: rate(1 minute)
            State: ENABLED
          Type: Schedule
      Handler: index.handler
      Layers:
        - !Ref BasicFtpLambdaLayer
      MemorySize: 128
      Runtime: nodejs18.x
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: Production
        prx:dev:application: Broadcast Delivery
      Timeout: 10
  ProdUsWest2ConntestLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProdUsWest2ConntestFunction}
      RetentionInDays: 14
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Broadcast Delivery }
  ProdUsWest2ConntestErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub WARN [FTP] us-west-2 Connection Test <prod> TEST FAILURES (${AWS::StackName})
      AlarmDescription: >-
        The production FTP connection tester for us-west-2 Transfer Family
        servers is failing to connect. This generally means either the servers
        or the authorization Lambda in us-east-1 are down, meaning those
        servers are unavailable.

        If all connection tests for this region fail, the region will be
        removed from the DNS pool.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProdUsWest2ConntestFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: breaching
  ProdUsWest2ConntestHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        AlarmIdentifier:
          Name: !Ref ProdUsWest2ConntestErrorAlarm
          Region: !Ref AWS::Region
        InsufficientDataHealthStatus: Unhealthy
        Type: CLOUDWATCH_METRIC
      HealthCheckTags:
        - { Key: Name, Value: !Sub "delivery_prod_us-west-2_synthetic_from-${AWS::Region}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: Production }
        - { Key: prx:dev:application, Value: Broadcast Delivery }

Outputs:
  ProdUsEast1ConntestHealthCheckId: { Value: !GetAtt ProdUsEast1ConntestHealthCheck.HealthCheckId }
  ProdUsWest2ConntestHealthCheckId: { Value: !GetAtt ProdUsWest2ConntestHealthCheck.HealthCheckId }
