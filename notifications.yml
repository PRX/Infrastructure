AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates foundational resources needed to handle infrastructure-related
  messaging and notifications
Parameters:
  OpsStatusMessagesSNSTopicArn:
    Type: String
  AutoScalingSlackWebhookURL:
    Type: String
  CloudWatchSlackWebhookURL:
    Type: String
  CloudFormationSlackWebhookURL:
    Type: String
  CodePipelineSlackWebhookURL:
    Type: String
  IkeSlackVerificationToken:
    Type: String
  TemplateBucket:
    Type: String
Resources:
  # This topic is maintained by the Bootstrap stack, but we need to subscribe
  # the relay Lambda function here
  OpsStatusMessagesSNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      TopicArn: !Ref OpsStatusMessagesSNSTopicArn
      Protocol: lambda
      Endpoint: !GetAtt SNSOpsMessagesToSlackLambdaFunction.Arn
  #
  # SNS Topics with subscriptions to the relay Lambda
  OpsDebugMessagesSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: CWDebug
      Subscription:
        - Endpoint: !GetAtt SNSOpsMessagesToSlackLambdaFunction.Arn
          Protocol: lambda
  OpsInfoMessagesSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: CWInfo
      Subscription:
        - Endpoint: !GetAtt SNSOpsMessagesToSlackLambdaFunction.Arn
          Protocol: lambda
  OpsWarnMessagesSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: CWWarn
      Subscription:
        - Endpoint: !GetAtt SNSOpsMessagesToSlackLambdaFunction.Arn
          Protocol: lambda
  OpsErrorMessagesSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: CWError
      Subscription:
        - Endpoint: !GetAtt SNSOpsMessagesToSlackLambdaFunction.Arn
          Protocol: lambda
  OpsFatalMessagesSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: CWFatal
      Subscription:
        - Endpoint: !GetAtt SNSOpsMessagesToSlackLambdaFunction.Arn
          Protocol: lambda
  #
  # A Lambda function that relays messages sent to all ops topics to Slack
  LambdaBasicExecutionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  SNSOpsMessagesToSlackLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplateBucket
        S3Key: "lambdas/sns-ops-to-slack.zip"
      Description: >
        Relays messages, which are produced by various AWS services and posted
        to SNS, to the channels in Slack
      Environment:
        Variables:
          ASG_SLACK_WEBHOOK_URL: !Ref AutoScalingSlackWebhookURL
          CW_SLACK_WEBHOOK_URL: !Ref CloudWatchSlackWebhookURL
          PIPELINE_SLACK_WEBHOOK_URL: !Ref CodePipelineSlackWebhookURL
          CFN_SLACK_WEBHOOK_URL: !Ref CloudFormationSlackWebhookURL
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionIAMRole.Arn
      Runtime: nodejs4.3
      Timeout: 3
  #
  # A Lambda function that handles button action request
  CodePipelineApprovalHandlerLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplateBucket
        S3Key: "lambdas/codepipeline-approval-handler.zip"
      Description: >
        Handles requests sent from Slack in response to button actions related
        to the approval of CodePipeline actions
      Environment:
        Variables:
          SLACK_VERIFICATION_TOKEN: !Ref IkeSlackVerificationToken
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBasicExecutionIAMRole.Arn
      Runtime: nodejs4.3
      Timeout: 3
  #
  # API Gateway fronting the CodePipeline approval hander
  CodePipelineApprovalHandlerRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Body:
        swagger: "2.0"
        info:
          version: "2017-03-08T22:12:24Z"
          title: "infrastructure"
        basePath: "/bootstrap"
        schemes:
          - "https"
        paths:
          /codepipeline/approval/interactive-messages:
            post:
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Join ["", ["arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/", !GetAtt CodePipelineApprovalHandlerLambdaFunction.Arn]]
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
      # Description: "A test API"
      # Name: "MyRestAPI"
  #
  # Permission needs to be granted to each SNS topic to invoke the lambda
  SNSOpsMessagesToSlackLambdaFunctionStatusTopicPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SNSOpsMessagesToSlackLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsStatusMessagesSNSTopicArn
  SNSOpsMessagesToSlackLambdaFunctionDebugTopicPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SNSOpsMessagesToSlackLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsDebugMessagesSNSTopic
  SNSOpsMessagesToSlackLambdaFunctionInfoTopicPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SNSOpsMessagesToSlackLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsInfoMessagesSNSTopic
  SNSOpsMessagesToSlackLambdaFunctionWarnTopicPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SNSOpsMessagesToSlackLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsWarnMessagesSNSTopic
  SNSOpsMessagesToSlackLambdaFunctionErrorTopicPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SNSOpsMessagesToSlackLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsErrorMessagesSNSTopic
  SNSOpsMessagesToSlackLambdaFunctionFatalTopicPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SNSOpsMessagesToSlackLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref OpsFatalMessagesSNSTopic
Outputs:
  OpsStatusMessagesSNSTopicArn:
    Value: !Ref OpsStatusMessagesSNSTopicArn
  OpsDebugMessagesSNSTopicArn:
    Value: !Ref OpsDebugMessagesSNSTopic
  OpsInfoMessagesSNSTopicArn:
    Value: !Ref OpsInfoMessagesSNSTopic
  OpsWarnMessagesSNSTopicArn:
    Value: !Ref OpsWarnMessagesSNSTopic
  OpsErrorMessagesSNSTopicArn:
    Value: !Ref OpsErrorMessagesSNSTopic
  OpsFatalMessagesSNSTopicArn:
    Value: !Ref OpsFatalMessagesSNSTopic
