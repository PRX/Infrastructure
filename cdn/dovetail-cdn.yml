# cdn/dovetail-cdn.yml
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Creates a CloudFront distribution to validate and redirect viewer-requests,
  invoke dovetail-cdn-arranger to stitch new arrangements, and origin-pull from
  any dovetail-cdn-arranger S3 bucket.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Distribution Parameters
        Parameters:
          - DistributionDomain
          - ExpiredRedirectPrefix
          - OriginRequestFunctionArn
          - EnvironmentType
          - EnvironmentTypeAbbreviation
      - Label:
          default: Primary Region
        Parameters:
          - CacheBehaviorPrefix
          - OriginBucket
          - RealtimeLogKinesisStreamArn
      - Label:
          default: Secondary Region (optional)
        Parameters:
          - CacheBehaviorPrefix2
          - OriginBucket2
          - RealtimeLogKinesisStreamArn2
      - Label:
          default: Tertiary Region (optional)
        Parameters:
          - CacheBehaviorPrefix3
          - OriginBucket3
          - RealtimeLogKinesisStreamArn3
    ParameterLabels:
      OriginBucket:
        default: Primary region's dovetail-cdn-arranger S3 Bucket
      OriginBucket2:
        default: Secondary region's dovetail-cdn-arranger S3 Bucket
      OriginBucket3:
        default: Tertiary region's dovetail-cdn-arranger S3 Bucket
      DistributionDomain:
        default: Domain Name
      ExpiredRedirectPrefix:
        default: Prefix for redirecting back to Dovetail
      OriginRequestFunctionArn:
        default: Dovetail origin request lambda
      EnvironmentType:
        default: Environment Type
      EnvironmentTypeAbbreviation:
        default: Environment Type Abbreviation
      CacheBehaviorPrefix:
        default: Primary region's path prefix
      CacheBehaviorPrefix2:
        default: Secondary region's path prefix
      CacheBehaviorPrefix3:
        default: Tertiary region's path prefix
      RealtimeLogKinesisStreamArn:
        default: Primary region's kinesis stream for realtime logs
      RealtimeLogKinesisStreamArn2:
        default: Secondary region's kinesis stream for realtime logs
      RealtimeLogKinesisStreamArn3:
        default: Tertiary region's kinesis stream for realtime logs

Parameters:
  OriginBucket:
    Type: String
    Description: eg. some-bucket-name.s3.amazonaws.com
  OriginBucket2:
    Type: String
    Description: eg. some-bucket-name.s3.amazonaws.com
  OriginBucket3:
    Type: String
    Description: eg. some-bucket-name.s3.amazonaws.com
  DistributionDomain:
    Type: String
    Description: eg. dovetail3-cdn.prxu.org
  ExpiredRedirectPrefix:
    Type: String
    Description: eg. https://dovetail.prxu.org
  OriginRequestFunctionArn:
    Type: String
    Description: eg. arn:aws:lambda:<region>:<account>:function:<name>:<version>
  EnvironmentType:
    Type: String
    Description: Only deploy this stack once per environment
    AllowedValues:
      - Testing
      - Staging
      - Production
  EnvironmentTypeAbbreviation:
    Type: String
    Description: Must match above
    AllowedValues:
      - test
      - stag
      - prod
  CacheBehaviorPrefix:
    Type: String
    Description: eg. use1/, us-west-2/
  CacheBehaviorPrefix2:
    Type: String
    Description: eg. use1/, us-west-2/
  CacheBehaviorPrefix3:
    Type: String
    Description: eg. use1/, us-west-2/
  RealtimeLogKinesisStreamArn:
    Type: String
    Description: eg. arn:aws:kinesis:<region>:<account>:stream/<name>
  RealtimeLogKinesisStreamArn2:
    Type: String
    Description: eg. arn:aws:kinesis:<region>:<account>:stream/<name>
  RealtimeLogKinesisStreamArn3:
    Type: String
    Description: eg. arn:aws:kinesis:<region>:<account>:stream/<name>

Conditions:
  HasSecondaryRegion: !Not [!Equals [!Ref RealtimeLogKinesisStreamArn2, ""]]
  HasTertiaryRegion: !Not [!Equals [!Ref RealtimeLogKinesisStreamArn3, ""]]
  CreateAlarms: !Not [!Equals [!Ref EnvironmentType, Testing]]

Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DistributionDomain
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: CDN }
      ValidationMethod: DNS

  CloudFrontFunctionCodeFetcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Deploys the contents of a zip archive to an S3 bucket
      Environment:
        Variables:
          EXPIRED_REDIRECT_PREFIX: !Ref ExpiredRedirectPrefix
      Handler: index.lambda_handler
      InlineCode: |
        import cfnresponse
        import traceback
        import urllib.request
        import urllib.parse
        import os


        def lambda_handler(event, context):
            try:
                print(event)

                url = "https://raw.githubusercontent.com/PRX/dovetail-cdn-viewer-request/main/index.js"
                f = urllib.request.urlopen(url)
                body = f.read().decode("utf-8")
                body = body.replace("<EXPIRED_REDIRECT_PREFIX>", os.environ["EXPIRED_REDIRECT_PREFIX"])

                props = {
                  "ViewerRequestFunctionCode": body
                }
                cfnresponse.send(event, context, cfnresponse.SUCCESS, props)

            except Exception as e:
                print("Function failed due to exception.")
                print(e)
                traceback.print_exc()
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
      MemorySize: 256
      Runtime: python3.8
      Tags:
        prx:meta:tagging-version: "2021-04-07"
        prx:cloudformation:stack-name: !Ref AWS::StackName
        prx:cloudformation:stack-id: !Ref AWS::StackId
        prx:ops:environment: !Ref EnvironmentType
        prx:dev:family: Dovetail
        prx:dev:application: CDN
      Timeout: 60
  CloudFrontFunctionCodeFetcherFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CloudFrontFunctionCodeFetcherFunction}
      RetentionInDays: 5
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: CDN }

  GithubCodeFetcher:
    Type: Custom::CodeFetcher
    Properties:
      ServiceToken: !GetAtt CloudFrontFunctionCodeFetcherFunction.Arn
      Cycle: 2 # Change this when the code in GitHub changes

  ViewerRequestFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true # TODO
      FunctionCode: !GetAtt GithubCodeFetcher.ViewerRequestFunctionCode
      FunctionConfig:
        Comment: Handle viewer-requests for Dovetail 3 CDN
        Runtime: cloudfront-js-1.0
      Name: !Sub "dt3-viewer-request-${EnvironmentTypeAbbreviation}"

  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub Policy for ${AWS::StackName}
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 0
        Name: !Sub ${AWS::StackName}-CachePolicy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
  CloudFrontOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Comment: !Sub Policy for ${AWS::StackName}
        CookiesConfig:
          CookieBehavior: none
        HeadersConfig:
          HeaderBehavior: none
        Name: !Sub ${AWS::StackName}-OriginRequestPolicy
        QueryStringsConfig:
          QueryStringBehavior: none
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: ViewerRequestFunction
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DistributionDomain
        CacheBehaviors:
          - AllowedMethods: [HEAD, GET]
            CachedMethods: [HEAD, GET]
            CachePolicyId: !Ref CloudFrontCachePolicy
            Compress: false
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !Sub arn:aws:cloudfront::${AWS::AccountId}:function/dt3-viewer-request-${EnvironmentTypeAbbreviation}
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref OriginRequestFunctionArn
            OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
            PathPattern: !Ref CacheBehaviorPrefix
            RealtimeLogConfigArn: !Ref RealtimeLogConfig
            TargetOriginId: dovetail3-stitch-s3
            ViewerProtocolPolicy: allow-all
          - !If
            - HasSecondaryRegion
            - AllowedMethods: [HEAD, GET]
              CachedMethods: [HEAD, GET]
              CachePolicyId: !Ref CloudFrontCachePolicy
              Compress: false
              FunctionAssociations:
                - EventType: viewer-request
                  FunctionARN: !Sub arn:aws:cloudfront::${AWS::AccountId}:function/dt3-viewer-request-${EnvironmentTypeAbbreviation}
              LambdaFunctionAssociations:
                - EventType: origin-request
                  LambdaFunctionARN: !Ref OriginRequestFunctionArn
              OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
              PathPattern: !Ref CacheBehaviorPrefix2
              RealtimeLogConfigArn: !Ref RealtimeLogConfig2
              TargetOriginId: dovetail3-stitch-s3-2
              ViewerProtocolPolicy: allow-all
            - !Ref AWS::NoValue
          - !If
            - HasTertiaryRegion
            - AllowedMethods: [HEAD, GET]
              CachedMethods: [HEAD, GET]
              CachePolicyId: !Ref CloudFrontCachePolicy
              Compress: false
              FunctionAssociations:
                - EventType: viewer-request
                  FunctionARN: !Sub arn:aws:cloudfront::${AWS::AccountId}:function/dt3-viewer-request-${EnvironmentTypeAbbreviation}
              LambdaFunctionAssociations:
                - EventType: origin-request
                  LambdaFunctionARN: !Ref OriginRequestFunctionArn
              OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
              PathPattern: !Ref CacheBehaviorPrefix3
              RealtimeLogConfigArn: !Ref RealtimeLogConfig3
              TargetOriginId: dovetail3-stitch-s3-3
              ViewerProtocolPolicy: allow-all
            - !Ref AWS::NoValue
        Comment: !Ref DistributionDomain
        CustomErrorResponses:
          # dovetail uploaded, but file wasn't there!
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
          # unrecognized uri or arrangement not found
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
          # lambda caught an error
          - ErrorCachingMinTTL: 0
            ErrorCode: 500
          # callback(null, {invalid-response})
          - ErrorCachingMinTTL: 10
            ErrorCode: 502
          # timeout / memory-exceeded / callback(err)
          - ErrorCachingMinTTL: 0
            ErrorCode: 503
          # unknown
          - ErrorCachingMinTTL: 10
            ErrorCode: 504
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, GET]
          CachedMethods: [HEAD, GET]
          CachePolicyId: !Ref CloudFrontCachePolicy
          Compress: false
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !Sub arn:aws:cloudfront::${AWS::AccountId}:function/dt3-viewer-request-${EnvironmentTypeAbbreviation}
              # TODO: this is stalling CFN updates for like ... no reason.
              # FunctionARN: !GetAtt ViewerRequestFunction.FunctionMetadata.FunctionARN
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref OriginRequestFunctionArn
          OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
          RealtimeLogConfigArn: !Ref RealtimeLogConfig
          TargetOriginId: dovetail3-stitch-s3
          ViewerProtocolPolicy: allow-all
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: prx-dovetail.s3.amazonaws.com
          IncludeCookies: false
          Prefix: !Sub "dt3-logs-${EnvironmentTypeAbbreviation}"
        Origins:
          - DomainName: !Ref OriginBucket
            Id: dovetail3-stitch-s3
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - !If
            - HasSecondaryRegion
            - DomainName: !Ref OriginBucket2
              Id: dovetail3-stitch-s3-2
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
            - !Ref AWS::NoValue
          - !If
            - HasTertiaryRegion
            - DomainName: !Ref OriginBucket3
              Id: dovetail3-stitch-s3-3
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
            - !Ref AWS::NoValue
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: CDN }

  RealtimeLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RealtimeLogKinesisPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:DescribeStreamSummary
                  - kinesis:DescribeStream
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Effect: Allow
                Resource:
                  - !Ref RealtimeLogKinesisStreamArn
                  - !If [HasSecondaryRegion, !Ref RealtimeLogKinesisStreamArn2, !Ref AWS::NoValue]
                  - !If [HasTertiaryRegion, !Ref RealtimeLogKinesisStreamArn3, !Ref AWS::NoValue]
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: CDN }
  RealtimeLogConfig:
    Type: AWS::CloudFront::RealtimeLogConfig
    Properties:
      EndPoints:
        - KinesisStreamConfig:
            RoleArn: !GetAtt RealtimeLogRole.Arn
            StreamArn: !Ref RealtimeLogKinesisStreamArn
          StreamType: Kinesis
      Fields:
        - timestamp
        - c-ip
        - sc-status
        - cs-method
        - cs-uri-stem
        - cs-user-agent
        - cs-referer
        - x-forwarded-for
        - sc-content-len
        - sc-range-start
        - sc-range-end
      Name: !Sub ${AWS::StackName}-RealtimeLogConfig
      SamplingRate: 100
  RealtimeLogConfig2:
    Condition: HasSecondaryRegion
    Type: AWS::CloudFront::RealtimeLogConfig
    Properties:
      EndPoints:
        - KinesisStreamConfig:
            RoleArn: !GetAtt RealtimeLogRole.Arn
            StreamArn: !Ref RealtimeLogKinesisStreamArn2
          StreamType: Kinesis
      Fields:
        - timestamp
        - c-ip
        - sc-status
        - cs-method
        - cs-uri-stem
        - cs-user-agent
        - cs-referer
        - x-forwarded-for
        - sc-content-len
        - sc-range-start
        - sc-range-end
      Name: !Sub ${AWS::StackName}-RealtimeLogConfig2
      SamplingRate: 100
  RealtimeLogConfig3:
    Condition: HasTertiaryRegion
    Type: AWS::CloudFront::RealtimeLogConfig
    Properties:
      EndPoints:
        - KinesisStreamConfig:
            RoleArn: !GetAtt RealtimeLogRole.Arn
            StreamArn: !Ref RealtimeLogKinesisStreamArn3
          StreamType: Kinesis
      Fields:
        - timestamp
        - c-ip
        - sc-status
        - cs-method
        - cs-uri-stem
        - cs-user-agent
        - cs-referer
        - x-forwarded-for
        - sc-content-len
        - sc-range-start
        - sc-range-end
      Name: !Sub ${AWS::StackName}-RealtimeLogConfig3
      SamplingRate: 100

  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Dovetail 3 CDN

  CloudFrontDistribution400Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateAlarms
    Properties:
      AlarmName: !Sub WARN [Dovetail-CDN] CDN <${EnvironmentType}> RETURNING 4XX ERRORS (${AWS::StackName})
      AlarmDescription: !Sub >-
        The ${EnvironmentType} Dovetail CDN is returning an
        unusually high rate of 4XX errors to end users. The usually doesn't
        indicate any operational problems with any components of Dovetail.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      EvaluationPeriods: 2
      MetricName: 4xxErrorRate
      Namespace: AWS/CloudFront
      Period: 300
      Statistic: Average
      Threshold: 40
      TreatMissingData: notBreaching
      Unit: Percent
  CloudFrontDistribution500Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateAlarms
    Properties:
      AlarmName: !Sub WARN [Dovetail-CDN] CDN <${EnvironmentType}> RETURNING 5XX ERRORS (${AWS::StackName})
      AlarmDescription: !Sub >-
        The ${EnvironmentType} Dovetail CDN 5XX error rate is
        higher than the baseline background noise rate, which could indicate a
        problem with audio stitching or the CDN's origin.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      EvaluationPeriods: 5
      MetricName: 5xxErrorRate
      Namespace: AWS/CloudFront
      Period: 60
      Statistic: Average
      Threshold: 1
      TreatMissingData: notBreaching
      Unit: Percent
  CloudFrontDistributionFatal500Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateAlarms
    Properties:
      AlarmName: !Sub FATAL [Dovetail-CDN] CDN <${EnvironmentType}> RETURNING 5XX ERRORS (${AWS::StackName})
      AlarmDescription: !Sub >-
        The ${EnvironmentType} Dovetail CDN 5XX error rate is
        very high. This likely means a significant number of end users are not
        able to download audio.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      EvaluationPeriods: 3
      MetricName: 5xxErrorRate
      Namespace: AWS/CloudFront
      Period: 60
      Statistic: Average
      Threshold: 2
      TreatMissingData: notBreaching
      Unit: Percent
  CloudFrontDistributionLambdaExecutionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateAlarms
    Properties:
      AlarmName: !Sub WARN [Dovetail-CDN] Edge Lambda <${EnvironmentType}> EXECUTION ERRORS (${AWS::StackName})
      AlarmDescription: !Sub >-
        The ${EnvironmentType} Dovetail CDN Lambda@Edge functions
        are failing. This could mean the stitching functions they call are also
        failing, or working too slowly. Some audio downloads may be failing.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Region
          Value: Global
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      EvaluationPeriods: 1
      MetricName: LambdaExecutionError
      Namespace: AWS/CloudFront
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
      Unit: Count

Outputs:
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
