# cdn/publicfeeds-cdn.yml
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates a CloudFront distribution that hosts podcast RSS feeds at
  publicfeeds.net

Parameters:
  EnvironmentType:
    Type: String
    AllowedValues:
      - Staging
      - Production

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, Production]

Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If [IsProduction, publicfeeds.net, staging.publicfeeds.net]
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName} ${AWS::Region}" }
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feed CDN }
      ValidationMethod: DNS

  EdgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:EnableReplication*
                  - iam:CreateServiceLinkedRole
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: LambdaEdgePolicy
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feed CDN }

  OriginRequestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;

            // The `/f` path is reserved to indicate an f.prxu.org feed origin. The `/f`
            // path part must be removed to make a valid origin request.
            if (request.uri.startsWith('/f/')) {
              request.uri = request.uri.slice(2);

              const headUrl = `https://${request.origin.custom.domainName}${request.uri}`;

              // Check the feed file for a redirect marker
              fetch(headUrl, { method: 'HEAD' }).then((res) => {
                if (res.headers.has('x-amz-meta-dovetail-feed-cdn-redirect')) {
                  // The feed file in S3 being requested has been marked with a
                  // redirect header. Respond with a 301 to the given URL, rather than
                  // with the actual feed.
                  callback(null, {
                    status: 301,
                    headers: {
                      location: [
                        {
                          key: 'Location',
                          value: res.headers.get('x-amz-meta-dovetail-feed-cdn-redirect')
                        }
                      ],
                      'cache-control': [
                        {
                          key: 'Cache-Control',
                          value: 'max-age=18000' // 5 hours
                        }
                      ]
                    }
                  });
                } else {
                  // Not a redirect; continue the origin request normally.
                  callback(null, request);
                }
              });
            } else {
              callback(null, { status: 404 });
            }
          };

      Description: !Sub ${EnvironmentType} podcast feed CDN origin requests
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt EdgeLambdaRole.Arn
      Runtime: nodejs20.x
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feed CDN }
      Timeout: 30
  OriginRequestFunctionVersionG:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !GetAtt OriginRequestFunction.Arn

  CachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400 # 1 day (default)
        MaxTTL: 31536000 # 1 year (default)
        MinTTL: 60
        Name: !Sub ${AWS::StackName}-cache-policy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
            # Cookies:
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
            # Headers:
          QueryStringsConfig:
            QueryStringBehavior: none
            # QueryStrings:

  OriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        CookiesConfig:
          CookieBehavior: none
          # Cookies:
        HeadersConfig:
          HeaderBehavior: none
          # Headers:
        Name: !Sub ${AWS::StackName}-origin-req-policy
        QueryStringsConfig:
          QueryStringBehavior: none
          # QueryStrings:

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !If [IsProduction, publicfeeds.net, staging.publicfeeds.net]
        CacheBehaviors:
          - AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            CachePolicyId: !GetAtt CachePolicy.Id
            Compress: true
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !Ref OriginRequestFunctionVersionG
            OriginRequestPolicyId: !GetAtt OriginRequestPolicy.Id
            PathPattern: "/f/*"
            TargetOriginId: feeder-cdn-origin
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            CachePolicyId: !GetAtt CachePolicy.Id
            Compress: true
            OriginRequestPolicyId: !GetAtt OriginRequestPolicy.Id
            PathPattern: "/robots.txt"
            TargetOriginId: feeder-cdn-origin
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            CachePolicyId: !GetAtt CachePolicy.Id
            Compress: true
            OriginRequestPolicyId: !GetAtt OriginRequestPolicy.Id
            PathPattern: "/favicon.ico"
            TargetOriginId: feeder-cdn-origin
            ViewerProtocolPolicy: redirect-to-https

        Comment: !Sub ${EnvironmentType} podcast feeds CDN

        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          CachePolicyId: !GetAtt CachePolicy.Id
          Compress: true
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref OriginRequestFunctionVersionG
          OriginRequestPolicyId: !GetAtt OriginRequestPolicy.Id
          TargetOriginId: blackhole-origin
          ViewerProtocolPolicy: redirect-to-https

        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true

        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1.2]
            DomainName: !If [IsProduction, f.prxu.org, f-staging.prxu.org]
            Id: feeder-cdn-origin
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1.2]
            DomainName: nowhere.publicfeeds.net
            Id: blackhole-origin

        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
      Tags:
        - { Key: prx:meta:tagging-version, Value: "2021-04-07" }
        - { Key: prx:cloudformation:stack-name, Value: !Ref AWS::StackName }
        - { Key: prx:cloudformation:stack-id, Value: !Ref AWS::StackId }
        - { Key: prx:ops:environment, Value: !Ref EnvironmentType }
        - { Key: prx:dev:family, Value: Dovetail }
        - { Key: prx:dev:application, Value: Feed CDN }
