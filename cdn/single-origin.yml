# cdn/single-origin.yml
# When creating a CloudFront distribution for an S3 bucket, it is recommended
# that the bucket remains private and CloudFront is given access to it via an
# Origin Access Identity. This template can create that identity, but it cannot
# update the origin bucket's policy to grant the identity access permissions.
# Once the stack has been created, add a policy like the following to the
# bucket, substituting the bucket name and the S3 canonical user ID (whose
# value is an output of the stack)
# {
#     "Version": "2012-10-17",
#     "Id": "CloudFrontOrigin",
#     "Statement": [
#         {
#             "Sid": "Grant read access to a CloudFront Origin Identity",
#             "Effect": "Allow",
#             "Principal": {
#                 "CanonicalUser":"XXXXXXXXXXXXXX"
#             },
#             "Action": "s3:GetObject",
#             "Resource": "arn:aws:s3:::XXXXXXX-bucketname/*"
#         }
#     ]
# }
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates a CloudFront distribution with a single origin (either web or S3)
Conditions:
  HasCloudFrontDefaultRootObject: !Not [!Equals [!Ref CloudFrontDefaultRootObject, ""]]
  HasCloudFrontMinTtl: !Not [!Equals [!Ref CloudFrontMinTtl, ""]]
  HasCloudFrontMaxTtl: !Not [!Equals [!Ref CloudFrontMaxTtl, ""]]
  HasCloudFrontOriginAccess: !Equals [!Ref CloudFrontOriginAccess, "Yes"]
  HasCloudFrontLoggingBucket: !Not [!Equals [!Ref CloudFrontLoggingBucket, ""]]
  HasCloudFrontLoggingBucketPrefix: !Not [!Equals [!Ref CloudFrontLoggingBucketPrefix, ""]]
  HasCloudFrontCustom403ErrorResponseCode: !Not [!Equals [!Ref CloudFrontCustom403ErrorResponseCode, ""]]
  # HasCloudFrontCustom403ErrorResponsePagePath: !Not [!Equals [!Ref CloudFrontCustom403ErrorResponsePagePath, ""]]
  HasCloudFrontWebACLId: !Not [!Equals [!Ref CloudFrontWebACLId, ""]]
  HasAcmCertificateArn: !Not [!Equals [!Ref AcmCertificateArn, ""]]
  HasNoAcmCertificateArn: !Equals [!Ref AcmCertificateArn, ""]
  HasDetachedCertificate: !Equals [!Ref CertificateAttachment, "Detached"]
  HasOriginPath: !Not [!Equals [!Ref OriginPath, ""]]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: HTTPS Certificate
        Parameters:
          - CertificateAttachment
          - AcmCertificateArn
      - Label:
          default: Distribution
        Parameters:
          - ProjectTag
          - Cnames
      - Label:
          default: Origin
        Parameters:
          - OriginDomain
          - OriginPath
      - Label:
          default: CloudFront
        Parameters:
          - CloudFrontComment
          - CloudFrontPriceClass
          - CloudFrontDefaultRootObject
          - CloudFrontViewerProtocolPolicy
          - CloudFrontCachedMethods
          - CloudFrontAllowedMethods
          - CloudFrontMinTtl
          - CloudFrontMaxTtl
          - CloudFrontLoggingBucket
          - CloudFrontLoggingBucketPrefix
          - CloudFrontOriginAccess
          - CloudFrontOriginProtocolPolicy
          - CloudFrontCustom403ErrorResponseCode
          - CloudFrontCustom403ErrorResponsePagePath
          - CloudFrontWebACLId
    ParameterLabels:
      ProjectTag:
        default: Project tag
      Cnames:
        default: CNAMEs
      OriginDomain:
        default: Origin domain
      OriginPath:
        default: Origin path
      CloudFrontLoggingBucket:
        default: Log S3 bucket
      CloudFrontLoggingBucketPrefix:
        default: Log file prefix
      CloudFrontComment:
        default: Comment
      CloudFrontMinTtl:
        default: Min TTL
      CloudFrontMaxTtl:
        default: Max TTL
      CloudFrontPriceClass:
        default: Price class
      CloudFrontDefaultRootObject:
        default: Default root object
      CloudFrontAllowedMethods:
        default: Allowed methods
      CloudFrontCachedMethods:
        default: Cached methods
      CloudFrontOriginAccess:
        default: Origin access identity
      CloudFrontOriginProtocolPolicy:
        default: Origin protocol policy
      CloudFrontViewerProtocolPolicy:
        default: Viewer protocol policy
      CloudFrontCustom403ErrorResponseCode:
        default: Custom 403 error response code
      CloudFrontCustom403ErrorResponsePagePath:
        default: Custom 403 error response page
      CloudFrontWebACLId:
        default: AWS WAF web ACL ID
      AcmCertificateArn:
        default: Certificate ARN
      CertificateAttachment:
        default: Certificate attachment
Parameters:
  ProjectTag:
    Type: String
    AllowedPattern: ^.+$
    ConstraintDescription: must not be blank
    Description: >
      The value used for the Project tag on resources that support tagging.
  Cnames:
    Type: CommaDelimitedList
    Description: >
      (optional) The CNAMEs (alternate domain names) for the distribution, as a
      comma-delimited list (e.g. "cdn1.example.com,cdn2.example.com")
  OriginDomain:
    Type: String
    AllowedPattern: ^.+\.[a-zA-Z]+$
    ConstraintDescription: >
      must be a hostname or of the format mybucket.s3.amazonaws.com
    Description: >
      The DNS name of the Amazon Simple Storage Service (S3) bucket or the HTTP
      server from which you want CloudFront to get objects for this origin.
  OriginPath:
    Type: String
    Description: >
      (optional) The path that CloudFront uses to request content from an S3
      bucket or custom origin. The combination of the DomainName and OriginPath
      properties must resolve to a valid path. The value must start with a slash
      mark (/) and cannot end with a slash mark.
  CloudFrontLoggingBucket:
    Type: String
    AllowedPattern: ^$|^.+\.s3\.amazonaws\.com$
    ConstraintDescription: >
      must be of the format mybucket.s3.amazonaws.com
    Description: >
      (optional) The Amazon S3 bucket address where access logs are stored for
      CloudFront. (e.g., mybucket.s3.amazonaws.com)
  CloudFrontLoggingBucketPrefix:
    Type: String
    Description: >
      (optional) A prefix for the access log file names for the CloudFront
      distribution. (e.g., myprefix/)
  CloudFrontComment:
    Type: String
    AllowedPattern: ^.+$
    ConstraintDescription: must not be blank
    Description: >
      Any comments that you want to include about the CloudFront distribution
    MaxLength: 128
  CloudFrontMinTtl:
    Type: String
    Description: >
      (optional) The minimum amount of time that you want objects to stay in
      CloudFront caches before CloudFront forwards another request to your
      origin to determine whether the object has been updated.
  CloudFrontMaxTtl:
    Type: String
    Description: >
      (optional) The maximum amount of time, in seconds, that you want objects
      to stay in CloudFront caches before CloudFront forwards another request
      to your origin to determine whether the object has been updated. The
      value that you specify applies only when your origin adds HTTP headers
      such as Cache-Control max-age, Cache-Control s-maxage, and Expires to
      objects
  CloudFrontPriceClass:
    Type: String
    Description: >
      The price class that corresponds with the maximum price that you want to
      pay for CloudFront service.
    Default: PriceClass_All
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  CloudFrontDefaultRootObject:
    Type: String
    Default: index.html
    Description: >
      Optional. The object that you want CloudFront to return (for example,
      index.html) when a viewer request points to your root URL
      (http://www.example.com) instead of to a specific object in your
      distribution (http://www.example.com/index.html).
  CloudFrontAllowedMethods:
    Type: CommaDelimitedList
    Description: >
      HTTP methods that CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
    Default: "HEAD,GET"
    AllowedValues:
      - "HEAD,GET"
      - "GET,HEAD,OPTIONS"
      - "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT"
  CloudFrontCachedMethods:
    Type: CommaDelimitedList
    Description: >
      HTTP methods for which CloudFront caches responses.
    Default: "HEAD,GET"
    AllowedValues:
      - "HEAD,GET"
      - "GET,HEAD,OPTIONS"
  CloudFrontOriginAccess:
    Type: String
    Description: >
      Create an origin access identity which can be used to grant the CloudFront
      distribution access to an S3 bucket via a bucket policy. Only use this
      when the origin is an S3 bucket. The Comment is required when an origin
      access identity is created. Turning this on will not update an S3 bucket
      policies.
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  CloudFrontOriginProtocolPolicy:
    Type: String
    Description: >
      The origin protocol policy to apply to your origin
    Default: https-only
    AllowedValues:
      - http-only
      - match-viewer
      - https-only
  CloudFrontViewerProtocolPolicy:
    Type: String
    Description: >
      The protocol that viewers can use to access the files in the origin
    Default: redirect-to-https
    AllowedValues:
      - allow-all
      - redirect-to-https
      - https-only
  CloudFrontCustom403ErrorResponseCode:
    Type: String
    Description: >
      (optional) A custom HTTP resonse code to return when a 403 is returned by the origin
      by the origin
  CloudFrontCustom403ErrorResponsePagePath:
    Type: String
    Description: >
      (optional) A custom page to return when a 403 is returned by the origin
  CloudFrontWebACLId:
    Type: String
    Description: >
      (optional) The AWS WAF web ACL to associate with this distribution
  AcmCertificateArn:
    Type: String
    Description: >
      ARN for the ACM certificate that will be used with the CloudFront
      distribution. If no value is supplied, a new certificate will be created.
  CertificateAttachment:
    Type: String
    Description: >
      When "Detached" is chosen, an ACM certificate will be created for the
      provided CNAMEs, but it will not be associated with the CloudFront
      distribution. The CNAMEs will also not added as aliases to the
      distribution. This allows the certificate and the distribution to be
      created simultaneously. If a Certificate ARN is provided this should
      always be set to "Attached".
    AllowedValues:
      - Attached
      - Detached
Resources:
  # If no ACM certificate ARN was provided as a stack parameter, a new ACM
  # certificate will be minted. It will be a single certificate covering all
  # domain names listed in the CNAMEs parameter. The certificate will be
  # created even if the stack has a detached certificate.
  Certificate:
    Type: "AWS::CertificateManager::Certificate"
    Condition: HasNoAcmCertificateArn
    Properties:
      DomainName: !Select [0, !Ref Cnames]
      SubjectAlternativeNames: !Ref Cnames
      Tags:
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Name
          Value: !Sub "${AWS::StackName} ${AWS::Region}"
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      ValidationMethod: DNS
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        # Aliases can only be configured on a distribution if there is an
        # associated, validated certificate that covers every alias domain.
        # When the stack has a detached certificate, that is not possible, so
        # the aliases are ignored until the certificate is attached.
        Aliases: !If [HasDetachedCertificate, !Ref "AWS::NoValue", !Ref "Cnames"]
        # CacheBehaviors:
          # CacheBehavior
        Comment: !Ref CloudFrontComment
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: !If [HasCloudFrontCustom403ErrorResponseCode, !Ref CloudFrontCustom403ErrorResponseCode, !Ref "AWS::NoValue"]
            ResponsePagePath: !If [HasCloudFrontCustom403ErrorResponseCode, !Ref CloudFrontCustom403ErrorResponsePagePath, !Ref "AWS::NoValue"]
        DefaultCacheBehavior:
          AllowedMethods: !Ref CloudFrontAllowedMethods
          CachedMethods: !Ref CloudFrontCachedMethods
          Compress: true
          # DefaultTTL: Number
          ForwardedValues:
            # Cookies:
            #   Cookies
            # Headers:
            #   - String
            QueryString: false
            # QueryStringCacheKeys:
          # LambdaFunctionAssociations:
          MaxTTL: !If [HasCloudFrontMaxTtl, !Ref "CloudFrontMaxTtl", !Ref "AWS::NoValue"]
          MinTTL: !If [HasCloudFrontMinTtl, !Ref "CloudFrontMinTtl", !Ref "AWS::NoValue"]
          # SmoothStreaming: Boolean
          TargetOriginId: web-origin
          # TrustedSigners:
          #   - String
          ViewerProtocolPolicy : !Ref CloudFrontViewerProtocolPolicy
        DefaultRootObject: !If [HasCloudFrontDefaultRootObject, !Ref "CloudFrontDefaultRootObject", !Ref "AWS::NoValue"]
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          !If
            - HasCloudFrontLoggingBucket
            - Bucket: !Ref CloudFrontLoggingBucket
              IncludeCookies: false
              Prefix: !If [HasCloudFrontLoggingBucketPrefix, !Ref "CloudFrontLoggingBucketPrefix", !Ref "AWS::NoValue"]
            - !Ref "AWS::NoValue"
        Origins:
          - CustomOriginConfig:
              !If
                - HasCloudFrontOriginAccess
                - !Ref "AWS::NoValue"
                - HTTPSPort: 443
                  # HTTPPort: Integer
                  OriginProtocolPolicy: !Ref CloudFrontOriginProtocolPolicy
                  OriginSSLProtocols:
                    - TLSv1.2
                    - TLSv1.1
                    - TLSv1
            DomainName: !Ref OriginDomain
            Id: web-origin
            # OriginCustomHeaders:
            #   - OriginCustomHeader
            OriginPath: !If [HasOriginPath, !Ref "OriginPath", !Ref "AWS::NoValue"]
            S3OriginConfig:
              !If
                - HasCloudFrontOriginAccess
                - OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
                - !Ref "AWS::NoValue"
        PriceClass: !Ref CloudFrontPriceClass
        # Restrictions:
        #   Restriction
        ViewerCertificate:
          # When the stack has a detached certificate, the distribution will
          # use the default CloudFront certificate (*.cloudfront.net). When
          # the certificate is attached it conditionally uses a provided ACM
          # certificate, or the one created by the stack.
          !If
            - HasDetachedCertificate
            - !Ref "AWS::NoValue"
            - AcmCertificateArn: !If [HasAcmCertificateArn, !Ref AcmCertificateArn, !Ref Certificate]
              # CloudFrontDefaultCertificate: true
              # IamCertificateId: String
              # MinimumProtocolVersion: String
              SslSupportMethod: sni-only
        WebACLId: !If [HasCloudFrontWebACLId, !Ref "CloudFrontWebACLId", !Ref "AWS::NoValue"]
      Tags:
        - Key: Project
          Value: !Ref ProjectTag
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Condition: HasCloudFrontOriginAccess
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref CloudFrontComment
Outputs:
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
  CloudFrontOriginAccessIdentityId:
    Condition: HasCloudFrontOriginAccess
    Value: !Ref CloudFrontOriginAccessIdentity
  CloudFrontOriginAccessIdentityS3CanonicalUserId:
    Condition: HasCloudFrontOriginAccess
    Value: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
