# cdn/single-origin.yml
# When creating a CloudFront distribution for an S3 bucket, it is recommended
# that the bucket remains private and CloudFront is given access to it via an
# Origin Access Identity. This template can create that identity, but it cannot
# update the origin bucket's policy to grant the identity access permissions.
# Once the stack has been created, add a policy like the following to the
# bucket. Be sure to replace the bucket name in the Resource, and change the
# object prefix to match only what CloudFront needs access to. Also replace
# the origin access identity, such as E15MNIMTCFKK4C, in the Principal. You can
# find that value in the stack outputs under CloudFrontOriginAccessIdentityId.
# {
#     "Version": "2012-10-17",
#     "Id": "CloudFrontOrigin",
#     "Statement": [
#         {
#             "Sid": "Grant read access to a CloudFront Origin Identity",
#             "Effect": "Allow",
#             "Principal": {
#                 "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity XXXXXXXXXXXXXX"
#             },
#             "Action": "s3:GetObject",
#             "Resource": "arn:aws:s3:::XXXXXXX-bucketname/*"
#         }
#     ]
# }
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates a CloudFront distribution with a single origin (either web or S3)
Conditions:
  HasCloudFrontDefaultRootObject: !Not [!Equals [!Ref CloudFrontDefaultRootObject, ""]]
  HasCloudFrontCompress: !Equals [!Ref CloudFrontCompress, "True"]
  HasCloudFrontDefaultTtl: !Not [!Equals [!Ref CloudFrontDefaultTtl, ""]]
  HasCloudFrontForwardedHeaders: !Not [!Equals [!Join ["", !Ref CloudFrontForwardedHeaders], ""]]
  HasCloudFrontMinTtl: !Not [!Equals [!Ref CloudFrontMinTtl, ""]]
  HasCloudFrontMaxTtl: !Not [!Equals [!Ref CloudFrontMaxTtl, ""]]
  HasCloudFrontOriginAccess: !Equals [!Ref CloudFrontOriginAccess, "Yes"]
  HasCloudFrontLoggingBucket: !Not [!Equals [!Ref CloudFrontLoggingBucket, ""]]
  HasCloudFrontLoggingBucketPrefix: !Not [!Equals [!Ref CloudFrontLoggingBucketPrefix, ""]]
  HasCloudFrontCustom403ErrorResponseCode: !Not [!Equals [!Ref CloudFrontCustom403ErrorResponseCode, ""]]
  # HasCloudFrontCustom403ErrorResponsePagePath: !Not [!Equals [!Ref CloudFrontCustom403ErrorResponsePagePath, ""]]
  HasCloudFrontWebACLId: !Not [!Equals [!Ref CloudFrontWebACLId, ""]]
  HasAcmCertificateArn: !Not [!Equals [!Ref AcmCertificateArn, ""]]
  HasNoAcmCertificateArn: !Equals [!Ref AcmCertificateArn, ""]
  HasOriginPath: !Not [!Equals [!Ref OriginPath, ""]]
  HasCnames: !Not [!Equals [!Join ["", !Ref Cnames], ""]]
  CreateCertificate: !And
    - !Condition HasNoAcmCertificateArn
    - !Condition HasCnames
  UseCertificate: !Or
    - !Condition CreateCertificate
    - !Condition HasAcmCertificateArn
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Distribution
        Parameters:
          - ProjectTag
          - Cnames
      - Label:
          default: Origin
        Parameters:
          - OriginDomain
          - OriginPath
      - Label:
          default: CloudFront
        Parameters:
          - CloudFrontComment
          - CloudFrontPriceClass
          - CloudFrontDefaultRootObject
          - CloudFrontViewerProtocolPolicy
          - CloudFrontViewerCertificateMinimumProtocolVersion
          - CloudFrontCachedMethods
          - CloudFrontAllowedMethods
          - CloudFrontForwardedHeaders
          - CloudFrontCompress
          - CloudFrontDefaultTtl
          - CloudFrontMinTtl
          - CloudFrontMaxTtl
          - CloudFrontLoggingBucket
          - CloudFrontLoggingBucketPrefix
          - CloudFrontOriginAccess
          - CloudFrontOriginProtocolPolicy
          - CloudFrontCustom403ErrorResponseCode
          - CloudFrontCustom403ErrorResponsePagePath
          - CloudFrontWebACLId
      - Label:
          default: HTTPS Certificate
        Parameters:
          - AcmCertificateArn
    ParameterLabels:
      ProjectTag:
        default: Project tag
      Cnames:
        default: CNAMEs
      OriginDomain:
        default: Origin domain
      OriginPath:
        default: Origin path
      CloudFrontLoggingBucket:
        default: Log S3 bucket
      CloudFrontLoggingBucketPrefix:
        default: Log file prefix
      CloudFrontComment:
        default: Comment
      CloudFrontDefaultTtl:
        default: Default TTL
      CloudFrontMinTtl:
        default: Min TTL
      CloudFrontMaxTtl:
        default: Max TTL
      CloudFrontPriceClass:
        default: Price class
      CloudFrontDefaultRootObject:
        default: Default root object
      CloudFrontAllowedMethods:
        default: Allowed methods
      CloudFrontCachedMethods:
        default: Cached methods
      CloudFrontForwardedHeaders:
        default: Forwarded Headers
      CloudFrontCompress:
        default: Compress objects automatically
      CloudFrontOriginAccess:
        default: Origin access identity
      CloudFrontOriginProtocolPolicy:
        default: Origin protocol policy
      CloudFrontViewerProtocolPolicy:
        default: Viewer protocol policy
      CloudFrontViewerCertificateMinimumProtocolVersion:
        default: Viewer security policy
      CloudFrontCustom403ErrorResponseCode:
        default: Custom 403 error response code
      CloudFrontCustom403ErrorResponsePagePath:
        default: Custom 403 error response page
      CloudFrontWebACLId:
        default: AWS WAF web ACL ID
      AcmCertificateArn:
        default: Certificate ARN
Parameters:
  ProjectTag:
    Type: String
    AllowedPattern: ^.+$
    ConstraintDescription: must not be blank
    Description: >-
      The value used for the Project tag on resources that support tagging.
  Cnames:
    Type: CommaDelimitedList
    Description: >-
      (optional) The CNAMEs (alternate domain names) for the distribution, as a
      comma-delimited list (e.g. "cdn1.example.com,cdn2.example.com")
  OriginDomain:
    Type: String
    AllowedPattern: ^.+\.[a-zA-Z]+$
    ConstraintDescription: >-
      must be a hostname or of the format mybucket.s3.amazonaws.com
    Description: >-
      The DNS name of the Amazon Simple Storage Service (S3) bucket or the HTTP
      server from which you want CloudFront to get objects for this origin.
      (e.g. "example.com" or "mybucket.s3.amazonaws.com")
  OriginPath:
    Type: String
    AllowedPattern: ^$|^\/..+(?<!\/)$
    ConstraintDescription: >-
      must start with a slash and must not end with a slash
    Description: >-
      (optional) The path that CloudFront uses to request content from an S3
      bucket or custom origin. The combination of the DomainName and OriginPath
      properties must resolve to a valid path. The value must start with a slash
      mark (/) and cannot end with a slash mark.
  CloudFrontLoggingBucket:
    Type: String
    AllowedPattern: ^$|^.+\.s3\..+\.amazonaws\.com$
    ConstraintDescription: >-
      must be of the format mybucket.s3.amazonaws.com
    Description: >-
      (optional) The Amazon S3 bucket address where access logs are stored for
      CloudFront. (e.g., mybucket.s3.amazonaws.com)
  CloudFrontLoggingBucketPrefix:
    Type: String
    Description: >-
      (optional) A prefix for the access log file names for the CloudFront
      distribution. (e.g., myprefix/)
  CloudFrontComment:
    Type: String
    AllowedPattern: ^.+$
    ConstraintDescription: must not be blank
    Description: >-
      Any comments that you want to include about the CloudFront distribution
    MaxLength: 128
  CloudFrontDefaultTtl:
    Type: String
    Description: >-
      (optional) The default amount of time, in seconds, that you want objects
      to stay in the CloudFront cache before CloudFront sends another request
      to the origin to see if the object has been updated. CloudFront uses this
      value as the objectâ€™s time to live (TTL) only when the origin does not
      send Cache-Control or Expires headers with the object. The default value
      for this field is 86400 seconds (one day). If the value of MinTTL is more
      than 86400 seconds, then the default value for this field is the same as
      the value of MinTTL.
  CloudFrontForwardedHeaders:
    Type: CommaDelimitedList
    Description: >-
      (optional) The HTTP headers, if any, that you want included in requests
      that CloudFront sends to the origin, and that are included in the cache
      key used to cache separate versions of the specified object based on
      those headers' values in the viewer request. Provide a comma-delimited
      list (e.g. "Origin,Access-Control-Request-Headers,
      Access-Control-Request-Method")
  CloudFrontMinTtl:
    Type: String
    Description: >-
      (optional) The minimum amount of time, in seconds, that you want objects
      to stay in the CloudFront cache before CloudFront sends another request
      to the origin to see if the object has been updated. The default value
      for this field is 0 seconds.
  CloudFrontMaxTtl:
    Type: String
    Description: >-
      (optional) The maximum amount of time, in seconds, that objects stay in
      the CloudFront cache before CloudFront sends another request to the
      origin to see if the object has been updated. CloudFront uses this value
      only when the origin sends Cache-Control or Expires headers with the
      object. The default value for this field is 31536000 seconds (one year).
      If the value of MinTTL or DefaultTTL is more than 31536000 seconds, then
      the default value for this field is the same as the value of DefaultTTL.
  CloudFrontPriceClass:
    Type: String
    Description: >-
      The price class that corresponds with the maximum price that you want to
      pay for CloudFront service.
    Default: PriceClass_All
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  CloudFrontDefaultRootObject:
    Type: String
    Default: index.html
    Description: >-
      Optional. The object that you want CloudFront to return (for example,
      index.html) when a viewer request points to your root URL
      (http://www.example.com) instead of to a specific object in your
      distribution (http://www.example.com/index.html).
  CloudFrontAllowedMethods:
    Type: CommaDelimitedList
    Description: >-
      HTTP methods that CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
    Default: "HEAD,GET"
    AllowedValues:
      - "HEAD,GET"
      - "GET,HEAD,OPTIONS"
      - "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT"
  CloudFrontCachedMethods:
    Type: CommaDelimitedList
    Description: >-
      HTTP methods for which CloudFront caches responses.
    Default: "HEAD,GET"
    AllowedValues:
      - "HEAD,GET"
      - "GET,HEAD,OPTIONS"
  CloudFrontCompress:
    Type: String
    Description: >-
      Whether you want CloudFront to automatically compress certain files.
    Default: "True"
    AllowedValues:
      - "True"
      - "False"
  CloudFrontOriginAccess:
    Type: String
    Description: >-
      Create an origin access identity which can be used to grant the CloudFront
      distribution access to an S3 bucket via a bucket policy. Only use this
      when the origin is an S3 bucket. Turning this on will not update any S3
      bucket policies, but such a policy is required to allow the origin access
      identity to function properly.
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  CloudFrontOriginProtocolPolicy:
    Type: String
    Description: >-
      The origin protocol policy to apply to your origin
    Default: https-only
    AllowedValues:
      - http-only
      - match-viewer
      - https-only
  CloudFrontViewerProtocolPolicy:
    Type: String
    Description: >-
      The protocol that viewers can use to access the files in the origin
    Default: redirect-to-https
    AllowedValues:
      - allow-all
      - redirect-to-https
      - https-only
  CloudFrontViewerCertificateMinimumProtocolVersion:
    Type: String
    Description: >-
      The security policy to use for HTTPS connections with viewers, which
      determines the minimum SSL/TLS protocol that CloudFront can use to
      communicate with viewers, and the ciphers that CloudFront can use to
      encrypt the content that it returns to viewers.
    Default: TLSv1
    AllowedValues:
      - SSLv3
      - TLSv1
      - TLSv1_2016
      - TLSv1.1_2016
      - TLSv1.2_2018
      - TLSv1.2_2019
  CloudFrontCustom403ErrorResponseCode:
    Type: String
    Description: >-
      (optional) A custom HTTP response code to return when a 403 is returned
      by the origin
  CloudFrontCustom403ErrorResponsePagePath:
    Type: String
    Description: >-
      (optional) A custom page to return when a 403 is returned by the origin
  CloudFrontWebACLId:
    Type: String
    Description: >-
      (optional) The AWS WAF web ACL to associate with this distribution
  AcmCertificateArn:
    Type: String
    Description: >-
      (optional) ARN for the ACM certificate that will be used with the
      CloudFront distribution. If no value is supplied, a new certificate will
      be created.
Resources:
  # ACM Certificate
  # This gets created when no ARN for a pre-existing certificate is provided
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateCertificate
    Properties:
      DomainName: !Select [0, !Ref Cnames]
      SubjectAlternativeNames: !Ref Cnames
      Tags:
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Name
          Value: !Sub ${AWS::StackName} ${AWS::Region}
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
      ValidationMethod: DNS
  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub Policy for ${AWS::StackName}
        DefaultTTL: !If [HasCloudFrontDefaultTtl, !Ref CloudFrontDefaultTtl, 86400]
        MaxTTL: !If [HasCloudFrontMaxTtl, !Ref CloudFrontMaxTtl, 31536000]
        MinTTL: !If [HasCloudFrontMinTtl, !Ref CloudFrontMinTtl, 0]
        Name: !Sub ${AWS::StackName}-CachePolicy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
            # Cookies:
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: !If [HasCloudFrontForwardedHeaders, whitelist, none]
            Headers: !If [HasCloudFrontForwardedHeaders, !Ref CloudFrontForwardedHeaders, !Ref "AWS::NoValue"]
          QueryStringsConfig:
            QueryStringBehavior: none
            # QueryStrings:
  CloudFrontOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Comment: !Sub Policy for ${AWS::StackName}
        CookiesConfig:
          CookieBehavior: none
          # Cookies:
        HeadersConfig:
          HeaderBehavior: !If [HasCloudFrontForwardedHeaders, whitelist, none]
          Headers: !If [HasCloudFrontForwardedHeaders, !Ref CloudFrontForwardedHeaders, !Ref "AWS::NoValue"]
        Name: !Sub ${AWS::StackName}-OriginRequestPolicy
        QueryStringsConfig:
          QueryStringBehavior: none
          # QueryStrings:
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [HasCnames, !Ref Cnames, !Ref "AWS::NoValue"]
        # CacheBehaviors:
          # CacheBehavior
        Comment: !Ref CloudFrontComment
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: !If [HasCloudFrontCustom403ErrorResponseCode, !Ref CloudFrontCustom403ErrorResponseCode, !Ref "AWS::NoValue"]
            ResponsePagePath: !If [HasCloudFrontCustom403ErrorResponseCode, !Ref CloudFrontCustom403ErrorResponsePagePath, !Ref "AWS::NoValue"]
        DefaultCacheBehavior:
          AllowedMethods: !Ref CloudFrontAllowedMethods
          CachedMethods: !Ref CloudFrontCachedMethods
          CachePolicyId: !Ref CloudFrontCachePolicy
          Compress: !If [HasCloudFrontCompress, true, false]
          # LambdaFunctionAssociations:
          OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
          # SmoothStreaming: Boolean
          TargetOriginId: web-origin
          # TrustedSigners:
          #   - String
          ViewerProtocolPolicy : !Ref CloudFrontViewerProtocolPolicy
        DefaultRootObject: !If [HasCloudFrontDefaultRootObject, !Ref CloudFrontDefaultRootObject, !Ref "AWS::NoValue"]
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          !If
            - HasCloudFrontLoggingBucket
            - Bucket: !Ref CloudFrontLoggingBucket
              IncludeCookies: false
              Prefix: !If [HasCloudFrontLoggingBucketPrefix, !Ref CloudFrontLoggingBucketPrefix, !Ref "AWS::NoValue"]
            - !Ref AWS::NoValue
        Origins:
          - CustomOriginConfig:
              !If
                - HasCloudFrontOriginAccess
                - !Ref AWS::NoValue
                - HTTPSPort: 443
                  # HTTPPort: Integer
                  OriginProtocolPolicy: !Ref CloudFrontOriginProtocolPolicy
                  OriginSSLProtocols:
                    - TLSv1.2
                    - TLSv1.1
                    - TLSv1
            DomainName: !Ref OriginDomain
            Id: web-origin
            # OriginCustomHeaders:
            #   - OriginCustomHeader
            OriginPath: !If [HasOriginPath, !Ref OriginPath, !Ref "AWS::NoValue"]
            S3OriginConfig:
              !If
                - HasCloudFrontOriginAccess
                - OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
                - !Ref AWS::NoValue
        PriceClass: !Ref CloudFrontPriceClass
        # Restrictions:
        #   Restriction
        ViewerCertificate:
          !If
            - UseCertificate
            - AcmCertificateArn: !If [CreateCertificate, !Ref Certificate, !Ref AcmCertificateArn]
              # CloudFrontDefaultCertificate: true
              # IamCertificateId: String
              MinimumProtocolVersion: !Ref CloudFrontViewerCertificateMinimumProtocolVersion
              SslSupportMethod: sni-only
            - !Ref AWS::NoValue
        WebACLId: !If [HasCloudFrontWebACLId, !Ref CloudFrontWebACLId, !Ref "AWS::NoValue"]
      Tags:
        - Key: Project
          Value: !Ref ProjectTag
        - Key: "prx:cloudformation:stack-name"
          Value: !Ref AWS::StackName
        - Key: "prx:cloudformation:stack-id"
          Value: !Ref AWS::StackId
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: HasCloudFrontOriginAccess
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref CloudFrontComment
Outputs:
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
  CloudFrontOriginAccessIdentityId:
    Condition: HasCloudFrontOriginAccess
    Value: !Ref CloudFrontOriginAccessIdentity
  CloudFrontOriginAccessIdentityS3CanonicalUserId:
    Condition: HasCloudFrontOriginAccess
    Value: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
